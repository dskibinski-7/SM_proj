
Regulacja_swiatla.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b12c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800b300  0800b300  0001b300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5f0  0800b5f0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5f0  0800b5f0  0001b5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5f8  0800b5f8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5f8  0800b5f8  0001b5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5fc  0800b5fc  0001b5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000070c  200001e0  0800b7e0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ec  0800b7e0  000208ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e27  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035e8  00000000  00000000  0003a037  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001560  00000000  00000000  0003d620  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001388  00000000  00000000  0003eb80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000283a9  00000000  00000000  0003ff08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014543  00000000  00000000  000682b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f7601  00000000  00000000  0007c7f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00173df5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006644  00000000  00000000  00173e70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b2e4 	.word	0x0800b2e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800b2e4 	.word	0x0800b2e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 f94b 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 f806 	bl	8000fe4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fd8:	f006 f93a 	bl	8007250 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f965 	bl	80012d2 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 f92d 	bl	800127e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000000c 	.word	0x2000000c
 800103c:	20000004 	.word	0x20000004
 8001040:	20000000 	.word	0x20000000

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000004 	.word	0x20000004
 8001068:	20000210 	.word	0x20000210

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000210 	.word	0x20000210

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff ffee 	bl	800106c <HAL_GetTick>
 8001090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d005      	beq.n	80010aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_Delay+0x40>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010aa:	bf00      	nop
 80010ac:	f7ff ffde 	bl	800106c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8f7      	bhi.n	80010ac <HAL_Delay+0x28>
  {
  }
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000004 	.word	0x20000004

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <__NVIC_SetPriorityGrouping+0x40>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <__NVIC_SetPriorityGrouping+0x40>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00
 800110c:	05fa0000 	.word	0x05fa0000

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db0b      	blt.n	8001156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4907      	ldr	r1, [pc, #28]	; (8001164 <__NVIC_EnableIRQ+0x38>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f7ff ff8e 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff29 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff3e 	bl	8001110 <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff8e 	bl	80011bc <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5d 	bl	8001168 <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff31 	bl	800112c <__NVIC_EnableIRQ>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffa2 	bl	8001224 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d004      	beq.n	8001308 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e00c      	b.n	8001322 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2205      	movs	r2, #5
 800130c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0201 	bic.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001340:	4ba9      	ldr	r3, [pc, #676]	; (80015e8 <HAL_ETH_Init+0x2b8>)
 8001342:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e183      	b.n	800165e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d106      	bne.n	8001370 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f005 fa4c 	bl	8006808 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001370:	4b9e      	ldr	r3, [pc, #632]	; (80015ec <HAL_ETH_Init+0x2bc>)
 8001372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001374:	4a9d      	ldr	r2, [pc, #628]	; (80015ec <HAL_ETH_Init+0x2bc>)
 8001376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137a:	6453      	str	r3, [r2, #68]	; 0x44
 800137c:	4b9b      	ldr	r3, [pc, #620]	; (80015ec <HAL_ETH_Init+0x2bc>)
 800137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001388:	4b99      	ldr	r3, [pc, #612]	; (80015f0 <HAL_ETH_Init+0x2c0>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4a98      	ldr	r2, [pc, #608]	; (80015f0 <HAL_ETH_Init+0x2c0>)
 800138e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001392:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001394:	4b96      	ldr	r3, [pc, #600]	; (80015f0 <HAL_ETH_Init+0x2c0>)
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4994      	ldr	r1, [pc, #592]	; (80015f0 <HAL_ETH_Init+0x2c0>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 0201 	orr.w	r2, r2, #1
 80013b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013b8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80013ba:	f7ff fe57 	bl	800106c <HAL_GetTick>
 80013be:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80013c0:	e011      	b.n	80013e6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80013c2:	f7ff fe53 	bl	800106c <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013d0:	d909      	bls.n	80013e6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2203      	movs	r2, #3
 80013d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e13b      	b.n	800165e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1e4      	bne.n	80013c2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f023 031c 	bic.w	r3, r3, #28
 8001406:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001408:	f002 fd48 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 800140c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	4a78      	ldr	r2, [pc, #480]	; (80015f4 <HAL_ETH_Init+0x2c4>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d908      	bls.n	8001428 <HAL_ETH_Init+0xf8>
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4a77      	ldr	r2, [pc, #476]	; (80015f8 <HAL_ETH_Init+0x2c8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d804      	bhi.n	8001428 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	e027      	b.n	8001478 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	4a73      	ldr	r2, [pc, #460]	; (80015f8 <HAL_ETH_Init+0x2c8>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d908      	bls.n	8001442 <HAL_ETH_Init+0x112>
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	4a72      	ldr	r2, [pc, #456]	; (80015fc <HAL_ETH_Init+0x2cc>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d804      	bhi.n	8001442 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f043 030c 	orr.w	r3, r3, #12
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	e01a      	b.n	8001478 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4a6d      	ldr	r2, [pc, #436]	; (80015fc <HAL_ETH_Init+0x2cc>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d903      	bls.n	8001452 <HAL_ETH_Init+0x122>
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	4a6c      	ldr	r2, [pc, #432]	; (8001600 <HAL_ETH_Init+0x2d0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d911      	bls.n	8001476 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4a6a      	ldr	r2, [pc, #424]	; (8001600 <HAL_ETH_Init+0x2d0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d908      	bls.n	800146c <HAL_ETH_Init+0x13c>
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	4a69      	ldr	r2, [pc, #420]	; (8001604 <HAL_ETH_Init+0x2d4>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d804      	bhi.n	800146c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	61fb      	str	r3, [r7, #28]
 800146a:	e005      	b.n	8001478 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f043 0310 	orr.w	r3, r3, #16
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	e000      	b.n	8001478 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001476:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	69fa      	ldr	r2, [r7, #28]
 800147e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001480:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001484:	2100      	movs	r1, #0
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f956 	bl	8001738 <HAL_ETH_WritePHYRegister>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00b      	beq.n	80014aa <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001496:	6939      	ldr	r1, [r7, #16]
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f9b3 	bl	8001804 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e0d9      	b.n	800165e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80014aa:	20ff      	movs	r0, #255	; 0xff
 80014ac:	f7ff fdea 	bl	8001084 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 80a7 	beq.w	8001608 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80014ba:	f7ff fdd7 	bl	800106c <HAL_GetTick>
 80014be:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	461a      	mov	r2, r3
 80014c6:	2101      	movs	r1, #1
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 f8cd 	bl	8001668 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80014ce:	f7ff fdcd 	bl	800106c <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014dc:	4293      	cmp	r3, r2
 80014de:	d90f      	bls.n	8001500 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014e4:	6939      	ldr	r1, [r7, #16]
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f98c 	bl	8001804 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e0ae      	b.n	800165e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0da      	beq.n	80014c0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800150a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800150e:	2100      	movs	r1, #0
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f911 	bl	8001738 <HAL_ETH_WritePHYRegister>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00b      	beq.n	8001534 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001520:	6939      	ldr	r1, [r7, #16]
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f96e 	bl	8001804 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001530:	2301      	movs	r3, #1
 8001532:	e094      	b.n	800165e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001534:	f7ff fd9a 	bl	800106c <HAL_GetTick>
 8001538:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	461a      	mov	r2, r3
 8001540:	2101      	movs	r1, #1
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f890 	bl	8001668 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001548:	f7ff fd90 	bl	800106c <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f241 3288 	movw	r2, #5000	; 0x1388
 8001556:	4293      	cmp	r3, r2
 8001558:	d90f      	bls.n	800157a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800155e:	6939      	ldr	r1, [r7, #16]
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f94f 	bl	8001804 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e071      	b.n	800165e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f003 0320 	and.w	r3, r3, #32
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0da      	beq.n	800153a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	461a      	mov	r2, r3
 800158a:	211f      	movs	r1, #31
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f86b 	bl	8001668 <HAL_ETH_ReadPHYRegister>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00b      	beq.n	80015b0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800159c:	6939      	ldr	r1, [r7, #16]
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f930 	bl	8001804 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80015ac:	2301      	movs	r3, #1
 80015ae:	e056      	b.n	800165e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d004      	beq.n	80015c4 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	e002      	b.n	80015ca <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	e037      	b.n	800164c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	e032      	b.n	800164c <HAL_ETH_Init+0x31c>
 80015e6:	bf00      	nop
 80015e8:	03938700 	.word	0x03938700
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40013800 	.word	0x40013800
 80015f4:	01312cff 	.word	0x01312cff
 80015f8:	02160ebf 	.word	0x02160ebf
 80015fc:	039386ff 	.word	0x039386ff
 8001600:	05f5e0ff 	.word	0x05f5e0ff
 8001604:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	08db      	lsrs	r3, r3, #3
 800160e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	085b      	lsrs	r3, r3, #1
 8001616:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001618:	4313      	orrs	r3, r2
 800161a:	b29b      	uxth	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	2100      	movs	r1, #0
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f889 	bl	8001738 <HAL_ETH_WritePHYRegister>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00b      	beq.n	8001644 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001630:	6939      	ldr	r1, [r7, #16]
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f8e6 	bl	8001804 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e00c      	b.n	800165e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001644:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001648:	f7ff fd1c 	bl	8001084 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800164c:	6939      	ldr	r1, [r7, #16]
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f8d8 	bl	8001804 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3720      	adds	r7, #32
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop

08001668 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	460b      	mov	r3, r1
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b82      	cmp	r3, #130	; 0x82
 8001688:	d101      	bne.n	800168e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800168a:	2302      	movs	r3, #2
 800168c:	e050      	b.n	8001730 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2282      	movs	r2, #130	; 0x82
 8001692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f003 031c 	and.w	r3, r3, #28
 80016a4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8a1b      	ldrh	r3, [r3, #16]
 80016aa:	02db      	lsls	r3, r3, #11
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80016b4:	897b      	ldrh	r3, [r7, #10]
 80016b6:	019b      	lsls	r3, r3, #6
 80016b8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	4313      	orrs	r3, r2
 80016c0:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f023 0302 	bic.w	r3, r3, #2
 80016c8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80016da:	f7ff fcc7 	bl	800106c <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016e0:	e015      	b.n	800170e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80016e2:	f7ff fcc3 	bl	800106c <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f0:	d309      	bcc.n	8001706 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e014      	b.n	8001730 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1e4      	bne.n	80016e2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	b29b      	uxth	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	460b      	mov	r3, r1
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b42      	cmp	r3, #66	; 0x42
 8001758:	d101      	bne.n	800175e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800175a:	2302      	movs	r3, #2
 800175c:	e04e      	b.n	80017fc <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2242      	movs	r2, #66	; 0x42
 8001762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f003 031c 	and.w	r3, r3, #28
 8001774:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8a1b      	ldrh	r3, [r3, #16]
 800177a:	02db      	lsls	r3, r3, #11
 800177c:	b29b      	uxth	r3, r3
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	4313      	orrs	r3, r2
 8001782:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001784:	897b      	ldrh	r3, [r7, #10]
 8001786:	019b      	lsls	r3, r3, #6
 8001788:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	4313      	orrs	r3, r2
 8001790:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80017b4:	f7ff fc5a 	bl	800106c <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017ba:	e015      	b.n	80017e8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80017bc:	f7ff fc56 	bl	800106c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ca:	d309      	bcc.n	80017e0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e00d      	b.n	80017fc <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1e4      	bne.n	80017bc <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b0b0      	sub	sp, #192	; 0xc0
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d007      	beq.n	800182a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001820:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001828:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001832:	2300      	movs	r3, #0
 8001834:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d103      	bne.n	8001852 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800184a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800184e:	663b      	str	r3, [r7, #96]	; 0x60
 8001850:	e001      	b.n	8001856 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800185a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001860:	2300      	movs	r3, #0
 8001862:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001870:	2340      	movs	r3, #64	; 0x40
 8001872:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001898:	2300      	movs	r3, #0
 800189a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80018d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018dc:	4bab      	ldr	r3, [pc, #684]	; (8001b8c <ETH_MACDMAConfig+0x388>)
 80018de:	4013      	ands	r3, r2
 80018e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80018e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80018e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80018e8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80018ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80018ec:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80018ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80018f0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80018f6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80018f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80018fa:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80018fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80018fe:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001904:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001908:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800190a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800190c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800190e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001910:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001914:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001918:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800191a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800191e:	4313      	orrs	r3, r2
 8001920:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800192c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001938:	2001      	movs	r0, #1
 800193a:	f7ff fba3 	bl	8001084 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001946:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001948:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800194a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800194c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800194e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001950:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001952:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001956:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800195c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800195e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001962:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001964:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001968:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800196c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001974:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001976:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001982:	2001      	movs	r0, #1
 8001984:	f7ff fb7e 	bl	8001084 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001990:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800199a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80019a4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80019b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019b4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80019b8:	4013      	ands	r3, r2
 80019ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80019be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019c2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80019c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80019c8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80019ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80019ce:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80019d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80019d4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80019d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80019da:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80019dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80019e0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80019e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019e6:	4313      	orrs	r3, r2
 80019e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019f4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a00:	2001      	movs	r0, #1
 8001a02:	f7ff fb3f 	bl	8001084 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a0e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a10:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001a14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f7ff fb2a 	bl	8001084 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a38:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001a3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a42:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001a48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a4c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001a5e:	2304      	movs	r3, #4
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a72:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a78:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001a82:	2300      	movs	r3, #0
 8001a84:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	f241 0318 	movw	r3, #4120	; 0x1018
 8001a8e:	4413      	add	r3, r2
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001a96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a9a:	4b3d      	ldr	r3, [pc, #244]	; (8001b90 <ETH_MACDMAConfig+0x38c>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001aa2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001aa6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001aa8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001aaa:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001aac:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001aae:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001ab0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001ab2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001ab4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001ab6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001aba:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001abe:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001ac2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001ac4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001adc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ae6:	4413      	add	r3, r2
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff fac8 	bl	8001084 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	f241 0318 	movw	r3, #4120	; 0x1018
 8001afc:	4413      	add	r3, r2
 8001afe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b02:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b08:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001b0c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b10:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001b14:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b18:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001b1a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001b1e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f7ff faa1 	bl	8001084 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b4e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d10d      	bne.n	8001b74 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	f241 031c 	movw	r3, #4124	; 0x101c
 8001b60:	4413      	add	r3, r2
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6811      	ldr	r1, [r2, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <ETH_MACDMAConfig+0x390>)
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	f241 031c 	movw	r3, #4124	; 0x101c
 8001b70:	440b      	add	r3, r1
 8001b72:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f80b 	bl	8001b98 <ETH_MACAddressConfig>
}
 8001b82:	bf00      	nop
 8001b84:	37c0      	adds	r7, #192	; 0xc0
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	ff20810f 	.word	0xff20810f
 8001b90:	f8de3f23 	.word	0xf8de3f23
 8001b94:	00010040 	.word	0x00010040

08001b98 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3305      	adds	r3, #5
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	3204      	adds	r2, #4
 8001bb0:	7812      	ldrb	r2, [r2, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <ETH_MACAddressConfig+0x68>)
 8001bba:	4413      	add	r3, r2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3303      	adds	r3, #3
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	061a      	lsls	r2, r3, #24
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3302      	adds	r3, #2
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	7812      	ldrb	r2, [r2, #0]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <ETH_MACAddressConfig+0x6c>)
 8001bea:	4413      	add	r3, r2
 8001bec:	461a      	mov	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	6013      	str	r3, [r2, #0]
}
 8001bf2:	bf00      	nop
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40028040 	.word	0x40028040
 8001c04:	40028044 	.word	0x40028044

08001c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	e175      	b.n	8001f14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	f040 8164 	bne.w	8001f0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x4e>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b12      	cmp	r3, #18
 8001c54:	d123      	bne.n	8001c9e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	08da      	lsrs	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3208      	adds	r2, #8
 8001c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	220f      	movs	r2, #15
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	08da      	lsrs	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3208      	adds	r2, #8
 8001c98:	69b9      	ldr	r1, [r7, #24]
 8001c9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	2203      	movs	r2, #3
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 0203 	and.w	r2, r3, #3
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d00b      	beq.n	8001cf2 <HAL_GPIO_Init+0xea>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d007      	beq.n	8001cf2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ce6:	2b11      	cmp	r3, #17
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b12      	cmp	r3, #18
 8001cf0:	d130      	bne.n	8001d54 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d28:	2201      	movs	r2, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 0201 	and.w	r2, r3, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80be 	beq.w	8001f0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	4b65      	ldr	r3, [pc, #404]	; (8001f28 <HAL_GPIO_Init+0x320>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	4a64      	ldr	r2, [pc, #400]	; (8001f28 <HAL_GPIO_Init+0x320>)
 8001d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9e:	4b62      	ldr	r3, [pc, #392]	; (8001f28 <HAL_GPIO_Init+0x320>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001daa:	4a60      	ldr	r2, [pc, #384]	; (8001f2c <HAL_GPIO_Init+0x324>)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a57      	ldr	r2, [pc, #348]	; (8001f30 <HAL_GPIO_Init+0x328>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d037      	beq.n	8001e46 <HAL_GPIO_Init+0x23e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a56      	ldr	r2, [pc, #344]	; (8001f34 <HAL_GPIO_Init+0x32c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d031      	beq.n	8001e42 <HAL_GPIO_Init+0x23a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a55      	ldr	r2, [pc, #340]	; (8001f38 <HAL_GPIO_Init+0x330>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d02b      	beq.n	8001e3e <HAL_GPIO_Init+0x236>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a54      	ldr	r2, [pc, #336]	; (8001f3c <HAL_GPIO_Init+0x334>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d025      	beq.n	8001e3a <HAL_GPIO_Init+0x232>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a53      	ldr	r2, [pc, #332]	; (8001f40 <HAL_GPIO_Init+0x338>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d01f      	beq.n	8001e36 <HAL_GPIO_Init+0x22e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a52      	ldr	r2, [pc, #328]	; (8001f44 <HAL_GPIO_Init+0x33c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d019      	beq.n	8001e32 <HAL_GPIO_Init+0x22a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a51      	ldr	r2, [pc, #324]	; (8001f48 <HAL_GPIO_Init+0x340>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_GPIO_Init+0x226>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a50      	ldr	r2, [pc, #320]	; (8001f4c <HAL_GPIO_Init+0x344>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00d      	beq.n	8001e2a <HAL_GPIO_Init+0x222>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4f      	ldr	r2, [pc, #316]	; (8001f50 <HAL_GPIO_Init+0x348>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d007      	beq.n	8001e26 <HAL_GPIO_Init+0x21e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4e      	ldr	r2, [pc, #312]	; (8001f54 <HAL_GPIO_Init+0x34c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <HAL_GPIO_Init+0x21a>
 8001e1e:	2309      	movs	r3, #9
 8001e20:	e012      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e22:	230a      	movs	r3, #10
 8001e24:	e010      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e26:	2308      	movs	r3, #8
 8001e28:	e00e      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	e00c      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e2e:	2306      	movs	r3, #6
 8001e30:	e00a      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e32:	2305      	movs	r3, #5
 8001e34:	e008      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e36:	2304      	movs	r3, #4
 8001e38:	e006      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e004      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e002      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x240>
 8001e46:	2300      	movs	r3, #0
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	f002 0203 	and.w	r2, r2, #3
 8001e4e:	0092      	lsls	r2, r2, #2
 8001e50:	4093      	lsls	r3, r2
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e58:	4934      	ldr	r1, [pc, #208]	; (8001f2c <HAL_GPIO_Init+0x324>)
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e66:	4b3c      	ldr	r3, [pc, #240]	; (8001f58 <HAL_GPIO_Init+0x350>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e8a:	4a33      	ldr	r2, [pc, #204]	; (8001f58 <HAL_GPIO_Init+0x350>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e90:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <HAL_GPIO_Init+0x350>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb4:	4a28      	ldr	r2, [pc, #160]	; (8001f58 <HAL_GPIO_Init+0x350>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eba:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <HAL_GPIO_Init+0x350>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ede:	4a1e      	ldr	r2, [pc, #120]	; (8001f58 <HAL_GPIO_Init+0x350>)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <HAL_GPIO_Init+0x350>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f08:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <HAL_GPIO_Init+0x350>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3301      	adds	r3, #1
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	f67f ae86 	bls.w	8001c28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	3724      	adds	r7, #36	; 0x24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40013800 	.word	0x40013800
 8001f30:	40020000 	.word	0x40020000
 8001f34:	40020400 	.word	0x40020400
 8001f38:	40020800 	.word	0x40020800
 8001f3c:	40020c00 	.word	0x40020c00
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40021400 	.word	0x40021400
 8001f48:	40021800 	.word	0x40021800
 8001f4c:	40021c00 	.word	0x40021c00
 8001f50:	40022000 	.word	0x40022000
 8001f54:	40022400 	.word	0x40022400
 8001f58:	40013c00 	.word	0x40013c00

08001f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f6c:	787b      	ldrb	r3, [r7, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f78:	e003      	b.n	8001f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	041a      	lsls	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	619a      	str	r2, [r3, #24]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d006      	beq.n	8001fb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 f806 	bl	8001fc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40013c00 	.word	0x40013c00

08001fc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e07f      	b.n	80020ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f004 fda4 	bl	8006b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2224      	movs	r2, #36	; 0x24
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002028:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002038:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d107      	bne.n	8002052 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	e006      	b.n	8002060 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800205e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d104      	bne.n	8002072 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002070:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6859      	ldr	r1, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_I2C_Init+0x11c>)
 800207e:	430b      	orrs	r3, r1
 8002080:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002090:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691a      	ldr	r2, [r3, #16]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	ea42 0103 	orr.w	r1, r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	021a      	lsls	r2, r3, #8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69d9      	ldr	r1, [r3, #28]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1a      	ldr	r2, [r3, #32]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	02008000 	.word	0x02008000

080020f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	461a      	mov	r2, r3
 8002104:	460b      	mov	r3, r1
 8002106:	817b      	strh	r3, [r7, #10]
 8002108:	4613      	mov	r3, r2
 800210a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b20      	cmp	r3, #32
 8002116:	f040 80da 	bne.w	80022ce <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_I2C_Master_Transmit+0x30>
 8002124:	2302      	movs	r3, #2
 8002126:	e0d3      	b.n	80022d0 <HAL_I2C_Master_Transmit+0x1d8>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002130:	f7fe ff9c 	bl	800106c <HAL_GetTick>
 8002134:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2319      	movs	r3, #25
 800213c:	2201      	movs	r2, #1
 800213e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fe76 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0be      	b.n	80022d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2221      	movs	r2, #33	; 0x21
 8002156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2210      	movs	r2, #16
 800215e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	893a      	ldrh	r2, [r7, #8]
 8002172:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217e:	b29b      	uxth	r3, r3
 8002180:	2bff      	cmp	r3, #255	; 0xff
 8002182:	d90e      	bls.n	80021a2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	22ff      	movs	r2, #255	; 0xff
 8002188:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218e:	b2da      	uxtb	r2, r3
 8002190:	8979      	ldrh	r1, [r7, #10]
 8002192:	4b51      	ldr	r3, [pc, #324]	; (80022d8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 ffd8 	bl	8003150 <I2C_TransferConfig>
 80021a0:	e06c      	b.n	800227c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	8979      	ldrh	r1, [r7, #10]
 80021b4:	4b48      	ldr	r3, [pc, #288]	; (80022d8 <HAL_I2C_Master_Transmit+0x1e0>)
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 ffc7 	bl	8003150 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80021c2:	e05b      	b.n	800227c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	6a39      	ldr	r1, [r7, #32]
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 fe73 	bl	8002eb4 <I2C_WaitOnTXISFlagUntilTimeout>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e07b      	b.n	80022d0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d034      	beq.n	800227c <HAL_I2C_Master_Transmit+0x184>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002216:	2b00      	cmp	r3, #0
 8002218:	d130      	bne.n	800227c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	2200      	movs	r2, #0
 8002222:	2180      	movs	r1, #128	; 0x80
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 fe05 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e04d      	b.n	80022d0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002238:	b29b      	uxth	r3, r3
 800223a:	2bff      	cmp	r3, #255	; 0xff
 800223c:	d90e      	bls.n	800225c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	22ff      	movs	r2, #255	; 0xff
 8002242:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	b2da      	uxtb	r2, r3
 800224a:	8979      	ldrh	r1, [r7, #10]
 800224c:	2300      	movs	r3, #0
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 ff7b 	bl	8003150 <I2C_TransferConfig>
 800225a:	e00f      	b.n	800227c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226a:	b2da      	uxtb	r2, r3
 800226c:	8979      	ldrh	r1, [r7, #10]
 800226e:	2300      	movs	r3, #0
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 ff6a 	bl	8003150 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d19e      	bne.n	80021c4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	6a39      	ldr	r1, [r7, #32]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 fe52 	bl	8002f34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e01a      	b.n	80022d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2220      	movs	r2, #32
 80022a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_I2C_Master_Transmit+0x1e4>)
 80022ae:	400b      	ands	r3, r1
 80022b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e000      	b.n	80022d0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80022ce:	2302      	movs	r3, #2
  }
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	80002000 	.word	0x80002000
 80022dc:	fe00e800 	.word	0xfe00e800

080022e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	461a      	mov	r2, r3
 80022ec:	460b      	mov	r3, r1
 80022ee:	817b      	strh	r3, [r7, #10]
 80022f0:	4613      	mov	r3, r2
 80022f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	f040 80db 	bne.w	80024b8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_I2C_Master_Receive+0x30>
 800230c:	2302      	movs	r3, #2
 800230e:	e0d4      	b.n	80024ba <HAL_I2C_Master_Receive+0x1da>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002318:	f7fe fea8 	bl	800106c <HAL_GetTick>
 800231c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2319      	movs	r3, #25
 8002324:	2201      	movs	r2, #1
 8002326:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 fd82 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e0bf      	b.n	80024ba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2222      	movs	r2, #34	; 0x22
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2210      	movs	r2, #16
 8002346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	893a      	ldrh	r2, [r7, #8]
 800235a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002366:	b29b      	uxth	r3, r3
 8002368:	2bff      	cmp	r3, #255	; 0xff
 800236a:	d90e      	bls.n	800238a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	22ff      	movs	r2, #255	; 0xff
 8002370:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002376:	b2da      	uxtb	r2, r3
 8002378:	8979      	ldrh	r1, [r7, #10]
 800237a:	4b52      	ldr	r3, [pc, #328]	; (80024c4 <HAL_I2C_Master_Receive+0x1e4>)
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fee4 	bl	8003150 <I2C_TransferConfig>
 8002388:	e06d      	b.n	8002466 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002398:	b2da      	uxtb	r2, r3
 800239a:	8979      	ldrh	r1, [r7, #10]
 800239c:	4b49      	ldr	r3, [pc, #292]	; (80024c4 <HAL_I2C_Master_Receive+0x1e4>)
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 fed3 	bl	8003150 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80023aa:	e05c      	b.n	8002466 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	6a39      	ldr	r1, [r7, #32]
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 fdfb 	bl	8002fac <I2C_WaitOnRXNEFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e07c      	b.n	80024ba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d034      	beq.n	8002466 <HAL_I2C_Master_Receive+0x186>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002400:	2b00      	cmp	r3, #0
 8002402:	d130      	bne.n	8002466 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	2200      	movs	r2, #0
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fd10 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e04d      	b.n	80024ba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002422:	b29b      	uxth	r3, r3
 8002424:	2bff      	cmp	r3, #255	; 0xff
 8002426:	d90e      	bls.n	8002446 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	22ff      	movs	r2, #255	; 0xff
 800242c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002432:	b2da      	uxtb	r2, r3
 8002434:	8979      	ldrh	r1, [r7, #10]
 8002436:	2300      	movs	r3, #0
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fe86 	bl	8003150 <I2C_TransferConfig>
 8002444:	e00f      	b.n	8002466 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	b2da      	uxtb	r2, r3
 8002456:	8979      	ldrh	r1, [r7, #10]
 8002458:	2300      	movs	r3, #0
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 fe75 	bl	8003150 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d19d      	bne.n	80023ac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	6a39      	ldr	r1, [r7, #32]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fd5d 	bl	8002f34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e01a      	b.n	80024ba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2220      	movs	r2, #32
 800248a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6859      	ldr	r1, [r3, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <HAL_I2C_Master_Receive+0x1e8>)
 8002498:	400b      	ands	r3, r1
 800249a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	80002400 	.word	0x80002400
 80024c8:	fe00e800 	.word	0xfe00e800

080024cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	68f9      	ldr	r1, [r7, #12]
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	4798      	blx	r3
  }
}
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d010      	beq.n	8002546 <HAL_I2C_ER_IRQHandler+0x46>
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	09db      	lsrs	r3, r3, #7
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002544:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	0a9b      	lsrs	r3, r3, #10
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d010      	beq.n	8002574 <HAL_I2C_ER_IRQHandler+0x74>
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	09db      	lsrs	r3, r3, #7
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f043 0208 	orr.w	r2, r3, #8
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002572:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	0a5b      	lsrs	r3, r3, #9
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d010      	beq.n	80025a2 <HAL_I2C_ER_IRQHandler+0xa2>
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	09db      	lsrs	r3, r3, #7
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002590:	f043 0202 	orr.w	r2, r3, #2
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 030b 	and.w	r3, r3, #11
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80025b2:	68f9      	ldr	r1, [r7, #12]
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 fb35 	bl	8002c24 <I2C_ITError>
  }
}
 80025ba:	bf00      	nop
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	70fb      	strb	r3, [r7, #3]
 80025f6:	4613      	mov	r3, r2
 80025f8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b086      	sub	sp, #24
 8002646:	af00      	add	r7, sp, #0
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002652:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <I2C_Slave_ISR_IT+0x24>
 8002662:	2302      	movs	r3, #2
 8002664:	e0f0      	b.n	8002848 <I2C_Slave_ISR_IT+0x206>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d04d      	beq.n	8002716 <I2C_Slave_ISR_IT+0xd4>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d047      	beq.n	8002716 <I2C_Slave_ISR_IT+0xd4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d128      	bne.n	80026e2 <I2C_Slave_ISR_IT+0xa0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b28      	cmp	r3, #40	; 0x28
 800269a:	d108      	bne.n	80026ae <I2C_Slave_ISR_IT+0x6c>
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026a2:	d104      	bne.n	80026ae <I2C_Slave_ISR_IT+0x6c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80026a4:	6979      	ldr	r1, [r7, #20]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 fa68 	bl	8002b7c <I2C_ITListenCplt>
 80026ac:	e032      	b.n	8002714 <I2C_Slave_ISR_IT+0xd2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b29      	cmp	r3, #41	; 0x29
 80026b8:	d10e      	bne.n	80026d8 <I2C_Slave_ISR_IT+0x96>
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026c0:	d00a      	beq.n	80026d8 <I2C_Slave_ISR_IT+0x96>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2210      	movs	r2, #16
 80026c8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fb6a 	bl	8002da4 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f93f 	bl	8002954 <I2C_ITSlaveSeqCplt>
 80026d6:	e01d      	b.n	8002714 <I2C_Slave_ISR_IT+0xd2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2210      	movs	r2, #16
 80026de:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80026e0:	e09a      	b.n	8002818 <I2C_Slave_ISR_IT+0x1d6>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2210      	movs	r2, #16
 80026e8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f043 0204 	orr.w	r2, r3, #4
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d004      	beq.n	8002706 <I2C_Slave_ISR_IT+0xc4>
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002702:	f040 8089 	bne.w	8002818 <I2C_Slave_ISR_IT+0x1d6>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	4619      	mov	r1, r3
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 fa89 	bl	8002c24 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002712:	e081      	b.n	8002818 <I2C_Slave_ISR_IT+0x1d6>
 8002714:	e080      	b.n	8002818 <I2C_Slave_ISR_IT+0x1d6>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d034      	beq.n	800278c <I2C_Slave_ISR_IT+0x14a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	089b      	lsrs	r3, r3, #2
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d02e      	beq.n	800278c <I2C_Slave_ISR_IT+0x14a>
  {
    if (hi2c->XferCount > 0U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002732:	b29b      	uxth	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01c      	beq.n	8002772 <I2C_Slave_ISR_IT+0x130>
    {
      /* Remove RXNE flag on temporary variable as read done */
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f023 0304 	bic.w	r3, r3, #4
 800273e:	617b      	str	r3, [r7, #20]

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d14f      	bne.n	800281c <I2C_Slave_ISR_IT+0x1da>
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002782:	d04b      	beq.n	800281c <I2C_Slave_ISR_IT+0x1da>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 f8e5 	bl	8002954 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800278a:	e047      	b.n	800281c <I2C_Slave_ISR_IT+0x1da>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	08db      	lsrs	r3, r3, #3
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <I2C_Slave_ISR_IT+0x16c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	08db      	lsrs	r3, r3, #3
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d004      	beq.n	80027ae <I2C_Slave_ISR_IT+0x16c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80027a4:	6979      	ldr	r1, [r7, #20]
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f852 	bl	8002850 <I2C_ITAddrCplt>
 80027ac:	e037      	b.n	800281e <I2C_Slave_ISR_IT+0x1dc>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d031      	beq.n	800281e <I2C_Slave_ISR_IT+0x1dc>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	085b      	lsrs	r3, r3, #1
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d02b      	beq.n	800281e <I2C_Slave_ISR_IT+0x1dc>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d018      	beq.n	8002802 <I2C_Slave_ISR_IT+0x1c0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	781a      	ldrb	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	851a      	strh	r2, [r3, #40]	; 0x28
 8002800:	e00d      	b.n	800281e <I2C_Slave_ISR_IT+0x1dc>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002808:	d002      	beq.n	8002810 <I2C_Slave_ISR_IT+0x1ce>
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d106      	bne.n	800281e <I2C_Slave_ISR_IT+0x1dc>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f89f 	bl	8002954 <I2C_ITSlaveSeqCplt>
 8002816:	e002      	b.n	800281e <I2C_Slave_ISR_IT+0x1dc>
    if (hi2c->XferCount == 0U)
 8002818:	bf00      	nop
 800281a:	e000      	b.n	800281e <I2C_Slave_ISR_IT+0x1dc>
    if ((hi2c->XferCount == 0U) && \
 800281c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d009      	beq.n	800283e <I2C_Slave_ISR_IT+0x1fc>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <I2C_Slave_ISR_IT+0x1fc>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002836:	6979      	ldr	r1, [r7, #20]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f8c9 	bl	80029d0 <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002866:	2b28      	cmp	r3, #40	; 0x28
 8002868:	d168      	bne.n	800293c <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	0c1b      	lsrs	r3, r3, #16
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	0c1b      	lsrs	r3, r3, #16
 8002882:	b29b      	uxth	r3, r3
 8002884:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002888:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	b29b      	uxth	r3, r3
 8002892:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002896:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80028a4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d137      	bne.n	800291e <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80028ae:	897b      	ldrh	r3, [r7, #10]
 80028b0:	09db      	lsrs	r3, r3, #7
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	89bb      	ldrh	r3, [r7, #12]
 80028b6:	4053      	eors	r3, r2
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	f003 0306 	and.w	r3, r3, #6
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d11c      	bne.n	80028fc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80028c2:	897b      	ldrh	r3, [r7, #10]
 80028c4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d139      	bne.n	800294c <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2208      	movs	r2, #8
 80028e4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80028ee:	89ba      	ldrh	r2, [r7, #12]
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	4619      	mov	r1, r3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff fe78 	bl	80025ea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80028fa:	e027      	b.n	800294c <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 80028fc:	893b      	ldrh	r3, [r7, #8]
 80028fe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002900:	2104      	movs	r1, #4
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fc52 	bl	80031ac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002910:	89ba      	ldrh	r2, [r7, #12]
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff fe67 	bl	80025ea <HAL_I2C_AddrCallback>
}
 800291c:	e016      	b.n	800294c <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800291e:	2104      	movs	r1, #4
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 fc43 	bl	80031ac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800292e:	89ba      	ldrh	r2, [r7, #12]
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	4619      	mov	r1, r3
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff fe58 	bl	80025ea <HAL_I2C_AddrCallback>
}
 800293a:	e007      	b.n	800294c <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2208      	movs	r2, #8
 8002942:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800294c:	bf00      	nop
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b29      	cmp	r3, #41	; 0x29
 800296e:	d112      	bne.n	8002996 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2228      	movs	r2, #40	; 0x28
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2221      	movs	r2, #33	; 0x21
 800297c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800297e:	2101      	movs	r1, #1
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fc13 	bl	80031ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff fe17 	bl	80025c2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002994:	e017      	b.n	80029c6 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b2a      	cmp	r3, #42	; 0x2a
 80029a0:	d111      	bne.n	80029c6 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2228      	movs	r2, #40	; 0x28
 80029a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2222      	movs	r2, #34	; 0x22
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80029b0:	2102      	movs	r1, #2
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fbfa 	bl	80031ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff fe08 	bl	80025d6 <HAL_I2C_SlaveRxCpltCallback>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2220      	movs	r2, #32
 80029ec:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80029ee:	2107      	movs	r1, #7
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fbdb 	bl	80031ac <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a04:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b58      	ldr	r3, [pc, #352]	; (8002b74 <I2C_ITSlaveCplt+0x1a4>)
 8002a12:	400b      	ands	r3, r1
 8002a14:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f9c4 	bl	8002da4 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	0b9b      	lsrs	r3, r3, #14
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00b      	beq.n	8002a40 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d018      	beq.n	8002a62 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a3e:	e010      	b.n	8002a62 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	0bdb      	lsrs	r3, r3, #15
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d006      	beq.n	8002a62 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	089b      	lsrs	r3, r3, #2
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d020      	beq.n	8002ab0 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f023 0304 	bic.w	r3, r3, #4
 8002a74:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00c      	beq.n	8002ab0 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d005      	beq.n	8002ac6 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	f043 0204 	orr.w	r2, r3, #4
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d010      	beq.n	8002b04 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f89b 	bl	8002c24 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b28      	cmp	r3, #40	; 0x28
 8002af8:	d138      	bne.n	8002b6c <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002afa:	68f9      	ldr	r1, [r7, #12]
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f83d 	bl	8002b7c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b02:	e033      	b.n	8002b6c <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b0c:	d011      	beq.n	8002b32 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff ff20 	bl	8002954 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a18      	ldr	r2, [pc, #96]	; (8002b78 <I2C_ITSlaveCplt+0x1a8>)
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff fd6b 	bl	8002606 <HAL_I2C_ListenCpltCallback>
}
 8002b30:	e01c      	b.n	8002b6c <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b22      	cmp	r3, #34	; 0x22
 8002b3c:	d10b      	bne.n	8002b56 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff fd41 	bl	80025d6 <HAL_I2C_SlaveRxCpltCallback>
}
 8002b54:	e00a      	b.n	8002b6c <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff fd2b 	bl	80025c2 <HAL_I2C_SlaveTxCpltCallback>
}
 8002b6c:	bf00      	nop
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	fe00e800 	.word	0xfe00e800
 8002b78:	ffff0000 	.word	0xffff0000

08002b7c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a25      	ldr	r2, [pc, #148]	; (8002c20 <I2C_ITListenCplt+0xa4>)
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2220      	movs	r2, #32
 8002b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	089b      	lsrs	r3, r3, #2
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d022      	beq.n	8002bfa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d012      	beq.n	8002bfa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	f043 0204 	orr.w	r2, r3, #4
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002bfa:	2107      	movs	r1, #7
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fad5 	bl	80031ac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2210      	movs	r2, #16
 8002c08:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff fcf7 	bl	8002606 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	ffff0000 	.word	0xffff0000

08002c24 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c34:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a55      	ldr	r2, [pc, #340]	; (8002d98 <I2C_ITError+0x174>)
 8002c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	2b28      	cmp	r3, #40	; 0x28
 8002c5a:	d005      	beq.n	8002c68 <I2C_ITError+0x44>
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b29      	cmp	r3, #41	; 0x29
 8002c60:	d002      	beq.n	8002c68 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	2b2a      	cmp	r3, #42	; 0x2a
 8002c66:	d10e      	bne.n	8002c86 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c68:	2103      	movs	r1, #3
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fa9e 	bl	80031ac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2228      	movs	r2, #40	; 0x28
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a46      	ldr	r2, [pc, #280]	; (8002d9c <I2C_ITError+0x178>)
 8002c82:	635a      	str	r2, [r3, #52]	; 0x34
 8002c84:	e013      	b.n	8002cae <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c86:	2107      	movs	r1, #7
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fa8f 	bl	80031ac <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b60      	cmp	r3, #96	; 0x60
 8002c98:	d003      	beq.n	8002ca2 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cbc:	d123      	bne.n	8002d06 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ccc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d05c      	beq.n	8002d90 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	4a31      	ldr	r2, [pc, #196]	; (8002da0 <I2C_ITError+0x17c>)
 8002cdc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe fafd 	bl	80012ea <HAL_DMA_Abort_IT>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d04c      	beq.n	8002d90 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d00:	4610      	mov	r0, r2
 8002d02:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d04:	e044      	b.n	8002d90 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d14:	d123      	bne.n	8002d5e <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d24:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d030      	beq.n	8002d90 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d32:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <I2C_ITError+0x17c>)
 8002d34:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe fad1 	bl	80012ea <HAL_DMA_Abort_IT>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d020      	beq.n	8002d90 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4798      	blx	r3
}
 8002d5c:	e018      	b.n	8002d90 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b60      	cmp	r3, #96	; 0x60
 8002d68:	d10b      	bne.n	8002d82 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff fc57 	bl	800262e <HAL_I2C_AbortCpltCallback>
}
 8002d80:	e006      	b.n	8002d90 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff fc45 	bl	800261a <HAL_I2C_ErrorCallback>
}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	ffff0000 	.word	0xffff0000
 8002d9c:	08002643 	.word	0x08002643
 8002da0:	08002ded 	.word	0x08002ded

08002da4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d103      	bne.n	8002dc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d007      	beq.n	8002de0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699a      	ldr	r2, [r3, #24]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	619a      	str	r2, [r3, #24]
  }
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfe:	2200      	movs	r2, #0
 8002e00:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e06:	2200      	movs	r2, #0
 8002e08:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b60      	cmp	r3, #96	; 0x60
 8002e14:	d107      	bne.n	8002e26 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f7ff fc05 	bl	800262e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e24:	e002      	b.n	8002e2c <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f7ff fbf7 	bl	800261a <HAL_I2C_ErrorCallback>
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e44:	e022      	b.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d01e      	beq.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4e:	f7fe f90d 	bl	800106c <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d302      	bcc.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d113      	bne.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e00f      	b.n	8002eac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	4013      	ands	r3, r2
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d0cd      	beq.n	8002e46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ec0:	e02c      	b.n	8002f1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f8dc 	bl	8003084 <I2C_IsAcknowledgeFailed>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e02a      	b.n	8002f2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d01e      	beq.n	8002f1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ede:	f7fe f8c5 	bl	800106c <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d302      	bcc.n	8002ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d113      	bne.n	8002f1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e007      	b.n	8002f2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d1cb      	bne.n	8002ec2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f40:	e028      	b.n	8002f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f89c 	bl	8003084 <I2C_IsAcknowledgeFailed>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e026      	b.n	8002fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f56:	f7fe f889 	bl	800106c <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d302      	bcc.n	8002f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d113      	bne.n	8002f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	f043 0220 	orr.w	r2, r3, #32
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e007      	b.n	8002fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d1cf      	bne.n	8002f42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fb8:	e055      	b.n	8003066 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f860 	bl	8003084 <I2C_IsAcknowledgeFailed>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e053      	b.n	8003076 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 0320 	and.w	r3, r3, #32
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d129      	bne.n	8003030 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d105      	bne.n	8002ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e03f      	b.n	8003076 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800300a:	400b      	ands	r3, r1
 800300c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e022      	b.n	8003076 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003030:	f7fe f81c 	bl	800106c <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	429a      	cmp	r2, r3
 800303e:	d302      	bcc.n	8003046 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10f      	bne.n	8003066 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	f043 0220 	orr.w	r2, r3, #32
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e007      	b.n	8003076 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b04      	cmp	r3, #4
 8003072:	d1a2      	bne.n	8002fba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	fe00e800 	.word	0xfe00e800

08003084 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b10      	cmp	r3, #16
 800309c:	d151      	bne.n	8003142 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800309e:	e022      	b.n	80030e6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a6:	d01e      	beq.n	80030e6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a8:	f7fd ffe0 	bl	800106c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d302      	bcc.n	80030be <I2C_IsAcknowledgeFailed+0x3a>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d113      	bne.n	80030e6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	f043 0220 	orr.w	r2, r3, #32
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e02e      	b.n	8003144 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d1d5      	bne.n	80030a0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2210      	movs	r2, #16
 80030fa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2220      	movs	r2, #32
 8003102:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f7ff fe4d 	bl	8002da4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b0d      	ldr	r3, [pc, #52]	; (800314c <I2C_IsAcknowledgeFailed+0xc8>)
 8003116:	400b      	ands	r3, r1
 8003118:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	f043 0204 	orr.w	r2, r3, #4
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	fe00e800 	.word	0xfe00e800

08003150 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	607b      	str	r3, [r7, #4]
 800315a:	460b      	mov	r3, r1
 800315c:	817b      	strh	r3, [r7, #10]
 800315e:	4613      	mov	r3, r2
 8003160:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	0d5b      	lsrs	r3, r3, #21
 800316c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003170:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <I2C_TransferConfig+0x58>)
 8003172:	430b      	orrs	r3, r1
 8003174:	43db      	mvns	r3, r3
 8003176:	ea02 0103 	and.w	r1, r2, r3
 800317a:	897b      	ldrh	r3, [r7, #10]
 800317c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003180:	7a7b      	ldrb	r3, [r7, #9]
 8003182:	041b      	lsls	r3, r3, #16
 8003184:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	431a      	orrs	r2, r3
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	431a      	orrs	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800319a:	bf00      	nop
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	03ff63ff 	.word	0x03ff63ff

080031ac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80031bc:	887b      	ldrh	r3, [r7, #2]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00f      	beq.n	80031e6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80031cc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031da:	2b28      	cmp	r3, #40	; 0x28
 80031dc:	d003      	beq.n	80031e6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80031e4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80031e6:	887b      	ldrh	r3, [r7, #2]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00f      	beq.n	8003210 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80031f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003204:	2b28      	cmp	r3, #40	; 0x28
 8003206:	d003      	beq.n	8003210 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800320e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003210:	887b      	ldrh	r3, [r7, #2]
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003220:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8003222:	887b      	ldrh	r3, [r7, #2]
 8003224:	f003 0311 	and.w	r3, r3, #17
 8003228:	2b11      	cmp	r3, #17
 800322a:	d103      	bne.n	8003234 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003232:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8003234:	887b      	ldrh	r3, [r7, #2]
 8003236:	f003 0312 	and.w	r3, r3, #18
 800323a:	2b12      	cmp	r3, #18
 800323c:	d103      	bne.n	8003246 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f043 0320 	orr.w	r3, r3, #32
 8003244:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8003246:	887b      	ldrh	r3, [r7, #2]
 8003248:	f003 0312 	and.w	r3, r3, #18
 800324c:	2b12      	cmp	r3, #18
 800324e:	d103      	bne.n	8003258 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003256:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6819      	ldr	r1, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	43da      	mvns	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	400a      	ands	r2, r1
 8003268:	601a      	str	r2, [r3, #0]
}
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b20      	cmp	r3, #32
 800328a:	d138      	bne.n	80032fe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003296:	2302      	movs	r3, #2
 8003298:	e032      	b.n	8003300 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2224      	movs	r2, #36	; 0x24
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0201 	bic.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0201 	orr.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
  }
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b20      	cmp	r3, #32
 8003320:	d139      	bne.n	8003396 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800332c:	2302      	movs	r3, #2
 800332e:	e033      	b.n	8003398 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	; 0x24
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800335e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0201 	orr.w	r2, r2, #1
 8003380:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	e000      	b.n	8003398 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003396:	2302      	movs	r3, #2
  }
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033a6:	b08f      	sub	sp, #60	; 0x3c
 80033a8:	af0a      	add	r7, sp, #40	; 0x28
 80033aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e10a      	b.n	80035cc <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f004 f982 	bl	80076d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2203      	movs	r2, #3
 80033d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f002 ff21 	bl	8006224 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	687e      	ldr	r6, [r7, #4]
 80033ea:	466d      	mov	r5, sp
 80033ec:	f106 0410 	add.w	r4, r6, #16
 80033f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003400:	1d33      	adds	r3, r6, #4
 8003402:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003404:	6838      	ldr	r0, [r7, #0]
 8003406:	f002 feb5 	bl	8006174 <USB_CoreInit>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0d7      	b.n	80035cc <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2100      	movs	r1, #0
 8003422:	4618      	mov	r0, r3
 8003424:	f002 ff0f 	bl	8006246 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003428:	2300      	movs	r3, #0
 800342a:	73fb      	strb	r3, [r7, #15]
 800342c:	e04a      	b.n	80034c4 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	333d      	adds	r3, #61	; 0x3d
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003442:	7bfa      	ldrb	r2, [r7, #15]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	333c      	adds	r3, #60	; 0x3c
 8003452:	7bfa      	ldrb	r2, [r7, #15]
 8003454:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003456:	7bfa      	ldrb	r2, [r7, #15]
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	b298      	uxth	r0, r3
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	3342      	adds	r3, #66	; 0x42
 800346a:	4602      	mov	r2, r0
 800346c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800346e:	7bfa      	ldrb	r2, [r7, #15]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	333f      	adds	r3, #63	; 0x3f
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003482:	7bfa      	ldrb	r2, [r7, #15]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	3344      	adds	r3, #68	; 0x44
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003496:	7bfa      	ldrb	r2, [r7, #15]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	3348      	adds	r3, #72	; 0x48
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034aa:	7bfa      	ldrb	r2, [r7, #15]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	3350      	adds	r3, #80	; 0x50
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	3301      	adds	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
 80034c4:	7bfa      	ldrb	r2, [r7, #15]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d3af      	bcc.n	800342e <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ce:	2300      	movs	r3, #0
 80034d0:	73fb      	strb	r3, [r7, #15]
 80034d2:	e044      	b.n	800355e <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034d4:	7bfa      	ldrb	r2, [r7, #15]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80034e6:	2200      	movs	r2, #0
 80034e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80034fc:	7bfa      	ldrb	r2, [r7, #15]
 80034fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003542:	7bfa      	ldrb	r2, [r7, #15]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	3301      	adds	r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
 800355e:	7bfa      	ldrb	r2, [r7, #15]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	d3b5      	bcc.n	80034d4 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	687e      	ldr	r6, [r7, #4]
 8003570:	466d      	mov	r5, sp
 8003572:	f106 0410 	add.w	r4, r6, #16
 8003576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800357a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800357c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800357e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003582:	e885 0003 	stmia.w	r5, {r0, r1}
 8003586:	1d33      	adds	r3, r6, #4
 8003588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800358a:	6838      	ldr	r0, [r7, #0]
 800358c:	f002 fe86 	bl	800629c <USB_DevInit>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2202      	movs	r2, #2
 800359a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e014      	b.n	80035cc <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d102      	bne.n	80035c0 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f80a 	bl	80035d4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f003 f846 	bl	8006656 <USB_DevDisconnect>

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_PCDEx_ActivateLPM+0x44>)
 8003604:	4313      	orrs	r3, r2
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	10000003 	.word	0x10000003

0800361c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a04      	ldr	r2, [pc, #16]	; (8003638 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362a:	6013      	str	r3, [r2, #0]
}
 800362c:	bf00      	nop
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40007000 	.word	0x40007000

0800363c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8003644:	2300      	movs	r3, #0
 8003646:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e25c      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 8087 	beq.w	800376e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003660:	4b96      	ldr	r3, [pc, #600]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 030c 	and.w	r3, r3, #12
 8003668:	2b04      	cmp	r3, #4
 800366a:	d00c      	beq.n	8003686 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800366c:	4b93      	ldr	r3, [pc, #588]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b08      	cmp	r3, #8
 8003676:	d112      	bne.n	800369e <HAL_RCC_OscConfig+0x62>
 8003678:	4b90      	ldr	r3, [pc, #576]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003684:	d10b      	bne.n	800369e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003686:	4b8d      	ldr	r3, [pc, #564]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d06c      	beq.n	800376c <HAL_RCC_OscConfig+0x130>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d168      	bne.n	800376c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e236      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a6:	d106      	bne.n	80036b6 <HAL_RCC_OscConfig+0x7a>
 80036a8:	4b84      	ldr	r3, [pc, #528]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a83      	ldr	r2, [pc, #524]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 80036ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	e02e      	b.n	8003714 <HAL_RCC_OscConfig+0xd8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x9c>
 80036be:	4b7f      	ldr	r3, [pc, #508]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a7e      	ldr	r2, [pc, #504]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 80036c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	4b7c      	ldr	r3, [pc, #496]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a7b      	ldr	r2, [pc, #492]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 80036d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e01d      	b.n	8003714 <HAL_RCC_OscConfig+0xd8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e0:	d10c      	bne.n	80036fc <HAL_RCC_OscConfig+0xc0>
 80036e2:	4b76      	ldr	r3, [pc, #472]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a75      	ldr	r2, [pc, #468]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 80036e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	4b73      	ldr	r3, [pc, #460]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a72      	ldr	r2, [pc, #456]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	e00b      	b.n	8003714 <HAL_RCC_OscConfig+0xd8>
 80036fc:	4b6f      	ldr	r3, [pc, #444]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a6e      	ldr	r2, [pc, #440]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 8003702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b6c      	ldr	r3, [pc, #432]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a6b      	ldr	r2, [pc, #428]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 800370e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d013      	beq.n	8003744 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fd fca6 	bl	800106c <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003724:	f7fd fca2 	bl	800106c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e1ea      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	4b61      	ldr	r3, [pc, #388]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0xe8>
 8003742:	e014      	b.n	800376e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fd fc92 	bl	800106c <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800374c:	f7fd fc8e 	bl	800106c <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	; 0x64
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e1d6      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375e:	4b57      	ldr	r3, [pc, #348]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x110>
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d069      	beq.n	800384e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800377a:	4b50      	ldr	r3, [pc, #320]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00b      	beq.n	800379e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003786:	4b4d      	ldr	r3, [pc, #308]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b08      	cmp	r3, #8
 8003790:	d11c      	bne.n	80037cc <HAL_RCC_OscConfig+0x190>
 8003792:	4b4a      	ldr	r3, [pc, #296]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d116      	bne.n	80037cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379e:	4b47      	ldr	r3, [pc, #284]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_RCC_OscConfig+0x17a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d001      	beq.n	80037b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e1aa      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b6:	4b41      	ldr	r3, [pc, #260]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	493d      	ldr	r1, [pc, #244]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ca:	e040      	b.n	800384e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d023      	beq.n	800381c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d4:	4b39      	ldr	r3, [pc, #228]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a38      	ldr	r2, [pc, #224]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fd fc44 	bl	800106c <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e8:	f7fd fc40 	bl	800106c <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e188      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fa:	4b30      	ldr	r3, [pc, #192]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003806:	4b2d      	ldr	r3, [pc, #180]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4929      	ldr	r1, [pc, #164]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]
 800381a:	e018      	b.n	800384e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800381c:	4b27      	ldr	r3, [pc, #156]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a26      	ldr	r2, [pc, #152]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 8003822:	f023 0301 	bic.w	r3, r3, #1
 8003826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fd fc20 	bl	800106c <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003830:	f7fd fc1c 	bl	800106c <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e164      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003842:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d038      	beq.n	80038cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d019      	beq.n	8003896 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003862:	4b16      	ldr	r3, [pc, #88]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 8003864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003866:	4a15      	ldr	r2, [pc, #84]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386e:	f7fd fbfd 	bl	800106c <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003876:	f7fd fbf9 	bl	800106c <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e141      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 800388a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f0      	beq.n	8003876 <HAL_RCC_OscConfig+0x23a>
 8003894:	e01a      	b.n	80038cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003896:	4b09      	ldr	r3, [pc, #36]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 8003898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389a:	4a08      	ldr	r2, [pc, #32]	; (80038bc <HAL_RCC_OscConfig+0x280>)
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a2:	f7fd fbe3 	bl	800106c <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a8:	e00a      	b.n	80038c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038aa:	f7fd fbdf 	bl	800106c <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d903      	bls.n	80038c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e127      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d0>
 80038bc:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c0:	4b94      	ldr	r3, [pc, #592]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 80038c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1ee      	bne.n	80038aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80a4 	beq.w	8003a22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038da:	4b8e      	ldr	r3, [pc, #568]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10d      	bne.n	8003902 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e6:	4b8b      	ldr	r3, [pc, #556]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	4a8a      	ldr	r2, [pc, #552]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 80038ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f0:	6413      	str	r3, [r2, #64]	; 0x40
 80038f2:	4b88      	ldr	r3, [pc, #544]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038fe:	2301      	movs	r3, #1
 8003900:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003902:	4b85      	ldr	r3, [pc, #532]	; (8003b18 <HAL_RCC_OscConfig+0x4dc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d118      	bne.n	8003940 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800390e:	4b82      	ldr	r3, [pc, #520]	; (8003b18 <HAL_RCC_OscConfig+0x4dc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a81      	ldr	r2, [pc, #516]	; (8003b18 <HAL_RCC_OscConfig+0x4dc>)
 8003914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391a:	f7fd fba7 	bl	800106c <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003922:	f7fd fba3 	bl	800106c <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b64      	cmp	r3, #100	; 0x64
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e0eb      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003934:	4b78      	ldr	r3, [pc, #480]	; (8003b18 <HAL_RCC_OscConfig+0x4dc>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d106      	bne.n	8003956 <HAL_RCC_OscConfig+0x31a>
 8003948:	4b72      	ldr	r3, [pc, #456]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	4a71      	ldr	r2, [pc, #452]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6713      	str	r3, [r2, #112]	; 0x70
 8003954:	e02d      	b.n	80039b2 <HAL_RCC_OscConfig+0x376>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10c      	bne.n	8003978 <HAL_RCC_OscConfig+0x33c>
 800395e:	4b6d      	ldr	r3, [pc, #436]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	4a6c      	ldr	r2, [pc, #432]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	6713      	str	r3, [r2, #112]	; 0x70
 800396a:	4b6a      	ldr	r3, [pc, #424]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	4a69      	ldr	r2, [pc, #420]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003970:	f023 0304 	bic.w	r3, r3, #4
 8003974:	6713      	str	r3, [r2, #112]	; 0x70
 8003976:	e01c      	b.n	80039b2 <HAL_RCC_OscConfig+0x376>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b05      	cmp	r3, #5
 800397e:	d10c      	bne.n	800399a <HAL_RCC_OscConfig+0x35e>
 8003980:	4b64      	ldr	r3, [pc, #400]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	4a63      	ldr	r2, [pc, #396]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003986:	f043 0304 	orr.w	r3, r3, #4
 800398a:	6713      	str	r3, [r2, #112]	; 0x70
 800398c:	4b61      	ldr	r3, [pc, #388]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	4a60      	ldr	r2, [pc, #384]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6713      	str	r3, [r2, #112]	; 0x70
 8003998:	e00b      	b.n	80039b2 <HAL_RCC_OscConfig+0x376>
 800399a:	4b5e      	ldr	r3, [pc, #376]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	4a5d      	ldr	r2, [pc, #372]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 80039a0:	f023 0301 	bic.w	r3, r3, #1
 80039a4:	6713      	str	r3, [r2, #112]	; 0x70
 80039a6:	4b5b      	ldr	r3, [pc, #364]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	4a5a      	ldr	r2, [pc, #360]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 80039ac:	f023 0304 	bic.w	r3, r3, #4
 80039b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d015      	beq.n	80039e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ba:	f7fd fb57 	bl	800106c <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c0:	e00a      	b.n	80039d8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c2:	f7fd fb53 	bl	800106c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e099      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d8:	4b4e      	ldr	r3, [pc, #312]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0ee      	beq.n	80039c2 <HAL_RCC_OscConfig+0x386>
 80039e4:	e014      	b.n	8003a10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e6:	f7fd fb41 	bl	800106c <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ec:	e00a      	b.n	8003a04 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ee:	f7fd fb3d 	bl	800106c <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e083      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a04:	4b43      	ldr	r3, [pc, #268]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ee      	bne.n	80039ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a10:	7dfb      	ldrb	r3, [r7, #23]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d105      	bne.n	8003a22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a16:	4b3f      	ldr	r3, [pc, #252]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	4a3e      	ldr	r2, [pc, #248]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d06f      	beq.n	8003b0a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a2a:	4b3a      	ldr	r3, [pc, #232]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d067      	beq.n	8003b06 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d149      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3e:	4b35      	ldr	r3, [pc, #212]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a34      	ldr	r2, [pc, #208]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003a44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4a:	f7fd fb0f 	bl	800106c <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a52:	f7fd fb0b 	bl	800106c <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e053      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a64:	4b2b      	ldr	r3, [pc, #172]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f0      	bne.n	8003a52 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69da      	ldr	r2, [r3, #28]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	019b      	lsls	r3, r3, #6
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	085b      	lsrs	r3, r3, #1
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	041b      	lsls	r3, r3, #16
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	061b      	lsls	r3, r3, #24
 8003a94:	4313      	orrs	r3, r2
 8003a96:	4a1f      	ldr	r2, [pc, #124]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003a98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a9c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a1c      	ldr	r2, [pc, #112]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aaa:	f7fd fadf 	bl	800106c <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab2:	f7fd fadb 	bl	800106c <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e023      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac4:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x476>
 8003ad0:	e01b      	b.n	8003b0a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a0f      	ldr	r2, [pc, #60]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003ad8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fd fac5 	bl	800106c <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae6:	f7fd fac1 	bl	800106c <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e009      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_RCC_OscConfig+0x4d8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x4aa>
 8003b04:	e001      	b.n	8003b0a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40007000 	.word	0x40007000

08003b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0ce      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b34:	4b69      	ldr	r3, [pc, #420]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d910      	bls.n	8003b64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b66      	ldr	r3, [pc, #408]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 020f 	bic.w	r2, r3, #15
 8003b4a:	4964      	ldr	r1, [pc, #400]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b62      	ldr	r3, [pc, #392]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0b6      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d020      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b7c:	4b58      	ldr	r3, [pc, #352]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4a57      	ldr	r2, [pc, #348]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b94:	4b52      	ldr	r3, [pc, #328]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4a51      	ldr	r2, [pc, #324]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba0:	4b4f      	ldr	r3, [pc, #316]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	494c      	ldr	r1, [pc, #304]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d040      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d107      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	4b46      	ldr	r3, [pc, #280]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d115      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e07d      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d107      	bne.n	8003bee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bde:	4b40      	ldr	r3, [pc, #256]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e071      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bee:	4b3c      	ldr	r3, [pc, #240]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e069      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bfe:	4b38      	ldr	r3, [pc, #224]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f023 0203 	bic.w	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4935      	ldr	r1, [pc, #212]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c10:	f7fd fa2c 	bl	800106c <HAL_GetTick>
 8003c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c18:	f7fd fa28 	bl	800106c <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e051      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 020c 	and.w	r2, r3, #12
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d1eb      	bne.n	8003c18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c40:	4b26      	ldr	r3, [pc, #152]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d210      	bcs.n	8003c70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b23      	ldr	r3, [pc, #140]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 020f 	bic.w	r2, r3, #15
 8003c56:	4921      	ldr	r1, [pc, #132]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5e:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e030      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c7c:	4b18      	ldr	r3, [pc, #96]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4915      	ldr	r1, [pc, #84]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	490d      	ldr	r1, [pc, #52]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cae:	f000 f81d 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8003cb2:	4601      	mov	r1, r0
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	4a09      	ldr	r2, [pc, #36]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc0:	5cd3      	ldrb	r3, [r2, r3]
 8003cc2:	fa21 f303 	lsr.w	r3, r1, r3
 8003cc6:	4a08      	ldr	r2, [pc, #32]	; (8003ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8003cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f7fd f98a 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40023c00 	.word	0x40023c00
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	0800b320 	.word	0x0800b320
 8003ce8:	2000000c 	.word	0x2000000c

08003cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d02:	4b63      	ldr	r3, [pc, #396]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d007      	beq.n	8003d1e <HAL_RCC_GetSysClockFreq+0x32>
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d008      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0x38>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f040 80b4 	bne.w	8003e80 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d18:	4b5e      	ldr	r3, [pc, #376]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d1a:	60bb      	str	r3, [r7, #8]
       break;
 8003d1c:	e0b3      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d1e:	4b5e      	ldr	r3, [pc, #376]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003d20:	60bb      	str	r3, [r7, #8]
      break;
 8003d22:	e0b0      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d24:	4b5a      	ldr	r3, [pc, #360]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d2c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d2e:	4b58      	ldr	r3, [pc, #352]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d04a      	beq.n	8003dd0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d3a:	4b55      	ldr	r3, [pc, #340]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	099b      	lsrs	r3, r3, #6
 8003d40:	f04f 0400 	mov.w	r4, #0
 8003d44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	ea03 0501 	and.w	r5, r3, r1
 8003d50:	ea04 0602 	and.w	r6, r4, r2
 8003d54:	4629      	mov	r1, r5
 8003d56:	4632      	mov	r2, r6
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	f04f 0400 	mov.w	r4, #0
 8003d60:	0154      	lsls	r4, r2, #5
 8003d62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d66:	014b      	lsls	r3, r1, #5
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4622      	mov	r2, r4
 8003d6c:	1b49      	subs	r1, r1, r5
 8003d6e:	eb62 0206 	sbc.w	r2, r2, r6
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	f04f 0400 	mov.w	r4, #0
 8003d7a:	0194      	lsls	r4, r2, #6
 8003d7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d80:	018b      	lsls	r3, r1, #6
 8003d82:	1a5b      	subs	r3, r3, r1
 8003d84:	eb64 0402 	sbc.w	r4, r4, r2
 8003d88:	f04f 0100 	mov.w	r1, #0
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	00e2      	lsls	r2, r4, #3
 8003d92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d96:	00d9      	lsls	r1, r3, #3
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4614      	mov	r4, r2
 8003d9c:	195b      	adds	r3, r3, r5
 8003d9e:	eb44 0406 	adc.w	r4, r4, r6
 8003da2:	f04f 0100 	mov.w	r1, #0
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	0262      	lsls	r2, r4, #9
 8003dac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003db0:	0259      	lsls	r1, r3, #9
 8003db2:	460b      	mov	r3, r1
 8003db4:	4614      	mov	r4, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	4621      	mov	r1, r4
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f04f 0400 	mov.w	r4, #0
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4623      	mov	r3, r4
 8003dc4:	f7fc ff80 	bl	8000cc8 <__aeabi_uldivmod>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	460c      	mov	r4, r1
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	e049      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd0:	4b2f      	ldr	r3, [pc, #188]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	f04f 0400 	mov.w	r4, #0
 8003dda:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	ea03 0501 	and.w	r5, r3, r1
 8003de6:	ea04 0602 	and.w	r6, r4, r2
 8003dea:	4629      	mov	r1, r5
 8003dec:	4632      	mov	r2, r6
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	f04f 0400 	mov.w	r4, #0
 8003df6:	0154      	lsls	r4, r2, #5
 8003df8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dfc:	014b      	lsls	r3, r1, #5
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4622      	mov	r2, r4
 8003e02:	1b49      	subs	r1, r1, r5
 8003e04:	eb62 0206 	sbc.w	r2, r2, r6
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	f04f 0400 	mov.w	r4, #0
 8003e10:	0194      	lsls	r4, r2, #6
 8003e12:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e16:	018b      	lsls	r3, r1, #6
 8003e18:	1a5b      	subs	r3, r3, r1
 8003e1a:	eb64 0402 	sbc.w	r4, r4, r2
 8003e1e:	f04f 0100 	mov.w	r1, #0
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	00e2      	lsls	r2, r4, #3
 8003e28:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e2c:	00d9      	lsls	r1, r3, #3
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4614      	mov	r4, r2
 8003e32:	195b      	adds	r3, r3, r5
 8003e34:	eb44 0406 	adc.w	r4, r4, r6
 8003e38:	f04f 0100 	mov.w	r1, #0
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	02a2      	lsls	r2, r4, #10
 8003e42:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e46:	0299      	lsls	r1, r3, #10
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4614      	mov	r4, r2
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	4621      	mov	r1, r4
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f04f 0400 	mov.w	r4, #0
 8003e56:	461a      	mov	r2, r3
 8003e58:	4623      	mov	r3, r4
 8003e5a:	f7fc ff35 	bl	8000cc8 <__aeabi_uldivmod>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	460c      	mov	r4, r1
 8003e62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003e64:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	3301      	adds	r3, #1
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7c:	60bb      	str	r3, [r7, #8]
      break;
 8003e7e:	e002      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e80:	4b04      	ldr	r3, [pc, #16]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e82:	60bb      	str	r3, [r7, #8]
      break;
 8003e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e86:	68bb      	ldr	r3, [r7, #8]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e90:	40023800 	.word	0x40023800
 8003e94:	00f42400 	.word	0x00f42400
 8003e98:	007a1200 	.word	0x007a1200

08003e9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	2000000c 	.word	0x2000000c

08003eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003eb8:	f7ff fff0 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ebc:	4601      	mov	r1, r0
 8003ebe:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	0a9b      	lsrs	r3, r3, #10
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	4a03      	ldr	r2, [pc, #12]	; (8003ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eca:	5cd3      	ldrb	r3, [r2, r3]
 8003ecc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	0800b330 	.word	0x0800b330

08003edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ee0:	f7ff ffdc 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ee4:	4601      	mov	r1, r0
 8003ee6:	4b05      	ldr	r3, [pc, #20]	; (8003efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	0b5b      	lsrs	r3, r3, #13
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	4a03      	ldr	r2, [pc, #12]	; (8003f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef2:	5cd3      	ldrb	r3, [r2, r3]
 8003ef4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40023800 	.word	0x40023800
 8003f00:	0800b330 	.word	0x0800b330

08003f04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b088      	sub	sp, #32
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d012      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f2c:	4b69      	ldr	r3, [pc, #420]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	4a68      	ldr	r2, [pc, #416]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f36:	6093      	str	r3, [r2, #8]
 8003f38:	4b66      	ldr	r3, [pc, #408]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f40:	4964      	ldr	r1, [pc, #400]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d017      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f5e:	4b5d      	ldr	r3, [pc, #372]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6c:	4959      	ldr	r1, [pc, #356]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d017      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f9a:	4b4e      	ldr	r3, [pc, #312]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	494a      	ldr	r1, [pc, #296]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fb8:	d101      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 808b 	beq.w	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fe8:	4b3a      	ldr	r3, [pc, #232]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	4a39      	ldr	r2, [pc, #228]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff4:	4b37      	ldr	r3, [pc, #220]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004000:	4b35      	ldr	r3, [pc, #212]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a34      	ldr	r2, [pc, #208]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800400c:	f7fd f82e 	bl	800106c <HAL_GetTick>
 8004010:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004014:	f7fd f82a 	bl	800106c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b64      	cmp	r3, #100	; 0x64
 8004020:	d901      	bls.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e355      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004026:	4b2c      	ldr	r3, [pc, #176]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004032:	4b28      	ldr	r3, [pc, #160]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d035      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	429a      	cmp	r2, r3
 800404e:	d02e      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004050:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004058:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800405a:	4b1e      	ldr	r3, [pc, #120]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405e:	4a1d      	ldr	r2, [pc, #116]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004064:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004066:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406a:	4a1a      	ldr	r2, [pc, #104]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004070:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004072:	4a18      	ldr	r2, [pc, #96]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004078:	4b16      	ldr	r3, [pc, #88]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b01      	cmp	r3, #1
 8004082:	d114      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fc fff2 	bl	800106c <HAL_GetTick>
 8004088:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408a:	e00a      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800408c:	f7fc ffee 	bl	800106c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f241 3288 	movw	r2, #5000	; 0x1388
 800409a:	4293      	cmp	r3, r2
 800409c:	d901      	bls.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e317      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a2:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0ee      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ba:	d111      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040c8:	4b04      	ldr	r3, [pc, #16]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040ca:	400b      	ands	r3, r1
 80040cc:	4901      	ldr	r1, [pc, #4]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	608b      	str	r3, [r1, #8]
 80040d2:	e00b      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80040d4:	40023800 	.word	0x40023800
 80040d8:	40007000 	.word	0x40007000
 80040dc:	0ffffcff 	.word	0x0ffffcff
 80040e0:	4bb0      	ldr	r3, [pc, #704]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4aaf      	ldr	r2, [pc, #700]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040ea:	6093      	str	r3, [r2, #8]
 80040ec:	4bad      	ldr	r3, [pc, #692]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f8:	49aa      	ldr	r1, [pc, #680]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0310 	and.w	r3, r3, #16
 8004106:	2b00      	cmp	r3, #0
 8004108:	d010      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800410a:	4ba6      	ldr	r3, [pc, #664]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800410c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004110:	4aa4      	ldr	r2, [pc, #656]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004116:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800411a:	4ba2      	ldr	r3, [pc, #648]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800411c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	499f      	ldr	r1, [pc, #636]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004138:	4b9a      	ldr	r3, [pc, #616]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004146:	4997      	ldr	r1, [pc, #604]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800415a:	4b92      	ldr	r3, [pc, #584]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004168:	498e      	ldr	r1, [pc, #568]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800417c:	4b89      	ldr	r3, [pc, #548]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004182:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800418a:	4986      	ldr	r1, [pc, #536]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800419e:	4b81      	ldr	r3, [pc, #516]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ac:	497d      	ldr	r1, [pc, #500]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041c0:	4b78      	ldr	r3, [pc, #480]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c6:	f023 0203 	bic.w	r2, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ce:	4975      	ldr	r1, [pc, #468]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041e2:	4b70      	ldr	r3, [pc, #448]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e8:	f023 020c 	bic.w	r2, r3, #12
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f0:	496c      	ldr	r1, [pc, #432]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004204:	4b67      	ldr	r3, [pc, #412]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004212:	4964      	ldr	r1, [pc, #400]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004226:	4b5f      	ldr	r3, [pc, #380]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004234:	495b      	ldr	r1, [pc, #364]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004248:	4b56      	ldr	r3, [pc, #344]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004256:	4953      	ldr	r1, [pc, #332]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800426a:	4b4e      	ldr	r3, [pc, #312]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004270:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004278:	494a      	ldr	r1, [pc, #296]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800428c:	4b45      	ldr	r3, [pc, #276]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004292:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429a:	4942      	ldr	r1, [pc, #264]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80042ae:	4b3d      	ldr	r3, [pc, #244]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042bc:	4939      	ldr	r1, [pc, #228]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042d0:	4b34      	ldr	r3, [pc, #208]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042de:	4931      	ldr	r1, [pc, #196]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d011      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042f2:	4b2c      	ldr	r3, [pc, #176]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80042f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004300:	4928      	ldr	r1, [pc, #160]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800430c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004310:	d101      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004312:	2301      	movs	r3, #1
 8004314:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004322:	2301      	movs	r3, #1
 8004324:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004332:	4b1c      	ldr	r3, [pc, #112]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004338:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004340:	4918      	ldr	r1, [pc, #96]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00b      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004354:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004364:	490f      	ldr	r1, [pc, #60]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d005      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800437a:	f040 80d8 	bne.w	800452e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800437e:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a08      	ldr	r2, [pc, #32]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004384:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800438a:	f7fc fe6f 	bl	800106c <HAL_GetTick>
 800438e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004390:	e00a      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004392:	f7fc fe6b 	bl	800106c <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b64      	cmp	r3, #100	; 0x64
 800439e:	d903      	bls.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e196      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80043a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043a8:	4b6c      	ldr	r3, [pc, #432]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1ee      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d021      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d11d      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043c8:	4b64      	ldr	r3, [pc, #400]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ce:	0c1b      	lsrs	r3, r3, #16
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043d6:	4b61      	ldr	r3, [pc, #388]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043dc:	0e1b      	lsrs	r3, r3, #24
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	019a      	lsls	r2, r3, #6
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	041b      	lsls	r3, r3, #16
 80043ee:	431a      	orrs	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	061b      	lsls	r3, r3, #24
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	071b      	lsls	r3, r3, #28
 80043fc:	4957      	ldr	r1, [pc, #348]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d004      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004418:	d00a      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004422:	2b00      	cmp	r3, #0
 8004424:	d02e      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800442e:	d129      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004430:	4b4a      	ldr	r3, [pc, #296]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004436:	0c1b      	lsrs	r3, r3, #16
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800443e:	4b47      	ldr	r3, [pc, #284]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004444:	0f1b      	lsrs	r3, r3, #28
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	019a      	lsls	r2, r3, #6
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	041b      	lsls	r3, r3, #16
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	061b      	lsls	r3, r3, #24
 800445e:	431a      	orrs	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	071b      	lsls	r3, r3, #28
 8004464:	493d      	ldr	r1, [pc, #244]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800446c:	4b3b      	ldr	r3, [pc, #236]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800446e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004472:	f023 021f 	bic.w	r2, r3, #31
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	3b01      	subs	r3, #1
 800447c:	4937      	ldr	r1, [pc, #220]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01d      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004490:	4b32      	ldr	r3, [pc, #200]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004496:	0e1b      	lsrs	r3, r3, #24
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800449e:	4b2f      	ldr	r3, [pc, #188]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80044a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044a4:	0f1b      	lsrs	r3, r3, #28
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	019a      	lsls	r2, r3, #6
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	041b      	lsls	r3, r3, #16
 80044b8:	431a      	orrs	r2, r3
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	061b      	lsls	r3, r3, #24
 80044be:	431a      	orrs	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	071b      	lsls	r3, r3, #28
 80044c4:	4925      	ldr	r1, [pc, #148]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d011      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	019a      	lsls	r2, r3, #6
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	041b      	lsls	r3, r3, #16
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	061b      	lsls	r3, r3, #24
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	071b      	lsls	r3, r3, #28
 80044f4:	4919      	ldr	r1, [pc, #100]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044fc:	4b17      	ldr	r3, [pc, #92]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a16      	ldr	r2, [pc, #88]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004502:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004508:	f7fc fdb0 	bl	800106c <HAL_GetTick>
 800450c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004510:	f7fc fdac 	bl	800106c <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b64      	cmp	r3, #100	; 0x64
 800451c:	d901      	bls.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e0d7      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004522:	4b0e      	ldr	r3, [pc, #56]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f0      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b01      	cmp	r3, #1
 8004532:	f040 80cd 	bne.w	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004536:	4b09      	ldr	r3, [pc, #36]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a08      	ldr	r2, [pc, #32]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800453c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004542:	f7fc fd93 	bl	800106c <HAL_GetTick>
 8004546:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004548:	e00a      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800454a:	f7fc fd8f 	bl	800106c <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b64      	cmp	r3, #100	; 0x64
 8004556:	d903      	bls.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e0ba      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800455c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004560:	4b5e      	ldr	r3, [pc, #376]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800456c:	d0ed      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800458a:	2b00      	cmp	r3, #0
 800458c:	d02e      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d12a      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004596:	4b51      	ldr	r3, [pc, #324]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045a4:	4b4d      	ldr	r3, [pc, #308]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045aa:	0f1b      	lsrs	r3, r3, #28
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	019a      	lsls	r2, r3, #6
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	041b      	lsls	r3, r3, #16
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	061b      	lsls	r3, r3, #24
 80045c4:	431a      	orrs	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	071b      	lsls	r3, r3, #28
 80045ca:	4944      	ldr	r1, [pc, #272]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045d2:	4b42      	ldr	r3, [pc, #264]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	3b01      	subs	r3, #1
 80045e2:	021b      	lsls	r3, r3, #8
 80045e4:	493d      	ldr	r1, [pc, #244]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d022      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004600:	d11d      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004602:	4b36      	ldr	r3, [pc, #216]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	0e1b      	lsrs	r3, r3, #24
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004610:	4b32      	ldr	r3, [pc, #200]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	0f1b      	lsrs	r3, r3, #28
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	019a      	lsls	r2, r3, #6
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	041b      	lsls	r3, r3, #16
 800462a:	431a      	orrs	r2, r3
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	061b      	lsls	r3, r3, #24
 8004630:	431a      	orrs	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	071b      	lsls	r3, r3, #28
 8004636:	4929      	ldr	r1, [pc, #164]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d028      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800464a:	4b24      	ldr	r3, [pc, #144]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	0e1b      	lsrs	r3, r3, #24
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004658:	4b20      	ldr	r3, [pc, #128]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465e:	0c1b      	lsrs	r3, r3, #16
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	019a      	lsls	r2, r3, #6
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	041b      	lsls	r3, r3, #16
 8004670:	431a      	orrs	r2, r3
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	061b      	lsls	r3, r3, #24
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	071b      	lsls	r3, r3, #28
 800467e:	4917      	ldr	r1, [pc, #92]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004686:	4b15      	ldr	r3, [pc, #84]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800468c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	4911      	ldr	r1, [pc, #68]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800469c:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a0e      	ldr	r2, [pc, #56]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80046a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a8:	f7fc fce0 	bl	800106c <HAL_GetTick>
 80046ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046b0:	f7fc fcdc 	bl	800106c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	; 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e007      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046c2:	4b06      	ldr	r3, [pc, #24]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ce:	d1ef      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40023800 	.word	0x40023800

080046e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e01d      	b.n	800472e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f002 fee2 	bl	80074d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f000 fab8 	bl	8004c94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2201      	movs	r2, #1
 8004748:	6839      	ldr	r1, [r7, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fda0 	bl	8005290 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <HAL_TIM_PWM_Start+0x7c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_TIM_PWM_Start+0x2c>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <HAL_TIM_PWM_Start+0x80>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d101      	bne.n	8004768 <HAL_TIM_PWM_Start+0x30>
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <HAL_TIM_PWM_Start+0x32>
 8004768:	2300      	movs	r3, #0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d007      	beq.n	800477e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800477c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <HAL_TIM_PWM_Start+0x84>)
 8004786:	4013      	ands	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b06      	cmp	r3, #6
 800478e:	d00b      	beq.n	80047a8 <HAL_TIM_PWM_Start+0x70>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004796:	d007      	beq.n	80047a8 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40010400 	.word	0x40010400
 80047bc:	00010007 	.word	0x00010007

080047c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d122      	bne.n	800481c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d11b      	bne.n	800481c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0202 	mvn.w	r2, #2
 80047ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fa28 	bl	8004c58 <HAL_TIM_IC_CaptureCallback>
 8004808:	e005      	b.n	8004816 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fa1a 	bl	8004c44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fa2b 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b04      	cmp	r3, #4
 8004828:	d122      	bne.n	8004870 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b04      	cmp	r3, #4
 8004836:	d11b      	bne.n	8004870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0204 	mvn.w	r2, #4
 8004840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f9fe 	bl	8004c58 <HAL_TIM_IC_CaptureCallback>
 800485c:	e005      	b.n	800486a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f9f0 	bl	8004c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fa01 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b08      	cmp	r3, #8
 800487c:	d122      	bne.n	80048c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b08      	cmp	r3, #8
 800488a:	d11b      	bne.n	80048c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0208 	mvn.w	r2, #8
 8004894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2204      	movs	r2, #4
 800489a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f9d4 	bl	8004c58 <HAL_TIM_IC_CaptureCallback>
 80048b0:	e005      	b.n	80048be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f9c6 	bl	8004c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f9d7 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	2b10      	cmp	r3, #16
 80048d0:	d122      	bne.n	8004918 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d11b      	bne.n	8004918 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f06f 0210 	mvn.w	r2, #16
 80048e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2208      	movs	r2, #8
 80048ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f9aa 	bl	8004c58 <HAL_TIM_IC_CaptureCallback>
 8004904:	e005      	b.n	8004912 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f99c 	bl	8004c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f9ad 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b01      	cmp	r3, #1
 8004924:	d10e      	bne.n	8004944 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b01      	cmp	r3, #1
 8004932:	d107      	bne.n	8004944 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0201 	mvn.w	r2, #1
 800493c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f976 	bl	8004c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b80      	cmp	r3, #128	; 0x80
 8004950:	d10e      	bne.n	8004970 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495c:	2b80      	cmp	r3, #128	; 0x80
 800495e:	d107      	bne.n	8004970 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fd1c 	bl	80053a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800497e:	d10e      	bne.n	800499e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498a:	2b80      	cmp	r3, #128	; 0x80
 800498c:	d107      	bne.n	800499e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fd0f 	bl	80053bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a8:	2b40      	cmp	r3, #64	; 0x40
 80049aa:	d10e      	bne.n	80049ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b6:	2b40      	cmp	r3, #64	; 0x40
 80049b8:	d107      	bne.n	80049ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f95b 	bl	8004c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d10e      	bne.n	80049f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d107      	bne.n	80049f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f06f 0220 	mvn.w	r2, #32
 80049ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fccf 	bl	8005394 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e105      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x226>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2202      	movs	r2, #2
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b14      	cmp	r3, #20
 8004a2e:	f200 80f0 	bhi.w	8004c12 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004a32:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a38:	08004a8d 	.word	0x08004a8d
 8004a3c:	08004c13 	.word	0x08004c13
 8004a40:	08004c13 	.word	0x08004c13
 8004a44:	08004c13 	.word	0x08004c13
 8004a48:	08004acd 	.word	0x08004acd
 8004a4c:	08004c13 	.word	0x08004c13
 8004a50:	08004c13 	.word	0x08004c13
 8004a54:	08004c13 	.word	0x08004c13
 8004a58:	08004b0f 	.word	0x08004b0f
 8004a5c:	08004c13 	.word	0x08004c13
 8004a60:	08004c13 	.word	0x08004c13
 8004a64:	08004c13 	.word	0x08004c13
 8004a68:	08004b4f 	.word	0x08004b4f
 8004a6c:	08004c13 	.word	0x08004c13
 8004a70:	08004c13 	.word	0x08004c13
 8004a74:	08004c13 	.word	0x08004c13
 8004a78:	08004b91 	.word	0x08004b91
 8004a7c:	08004c13 	.word	0x08004c13
 8004a80:	08004c13 	.word	0x08004c13
 8004a84:	08004c13 	.word	0x08004c13
 8004a88:	08004bd1 	.word	0x08004bd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f99e 	bl	8004dd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0208 	orr.w	r2, r2, #8
 8004aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0204 	bic.w	r2, r2, #4
 8004ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6999      	ldr	r1, [r3, #24]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	619a      	str	r2, [r3, #24]
      break;
 8004aca:	e0a3      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 f9f0 	bl	8004eb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6999      	ldr	r1, [r3, #24]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	021a      	lsls	r2, r3, #8
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	619a      	str	r2, [r3, #24]
      break;
 8004b0c:	e082      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fa47 	bl	8004fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0208 	orr.w	r2, r2, #8
 8004b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0204 	bic.w	r2, r2, #4
 8004b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69d9      	ldr	r1, [r3, #28]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	61da      	str	r2, [r3, #28]
      break;
 8004b4c:	e062      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fa9d 	bl	8005094 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69d9      	ldr	r1, [r3, #28]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	021a      	lsls	r2, r3, #8
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	61da      	str	r2, [r3, #28]
      break;
 8004b8e:	e041      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fad4 	bl	8005144 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0208 	orr.w	r2, r2, #8
 8004baa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0204 	bic.w	r2, r2, #4
 8004bba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bce:	e021      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fb06 	bl	80051e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bfa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	021a      	lsls	r2, r3, #8
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c10:	e000      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004c12:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop

08004c30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a40      	ldr	r2, [pc, #256]	; (8004da8 <TIM_Base_SetConfig+0x114>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d013      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb2:	d00f      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a3d      	ldr	r2, [pc, #244]	; (8004dac <TIM_Base_SetConfig+0x118>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00b      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a3c      	ldr	r2, [pc, #240]	; (8004db0 <TIM_Base_SetConfig+0x11c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d007      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a3b      	ldr	r2, [pc, #236]	; (8004db4 <TIM_Base_SetConfig+0x120>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d003      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a3a      	ldr	r2, [pc, #232]	; (8004db8 <TIM_Base_SetConfig+0x124>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d108      	bne.n	8004ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a2f      	ldr	r2, [pc, #188]	; (8004da8 <TIM_Base_SetConfig+0x114>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d02b      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf4:	d027      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a2c      	ldr	r2, [pc, #176]	; (8004dac <TIM_Base_SetConfig+0x118>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d023      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a2b      	ldr	r2, [pc, #172]	; (8004db0 <TIM_Base_SetConfig+0x11c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d01f      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a2a      	ldr	r2, [pc, #168]	; (8004db4 <TIM_Base_SetConfig+0x120>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d01b      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a29      	ldr	r2, [pc, #164]	; (8004db8 <TIM_Base_SetConfig+0x124>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d017      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a28      	ldr	r2, [pc, #160]	; (8004dbc <TIM_Base_SetConfig+0x128>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d013      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a27      	ldr	r2, [pc, #156]	; (8004dc0 <TIM_Base_SetConfig+0x12c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00f      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a26      	ldr	r2, [pc, #152]	; (8004dc4 <TIM_Base_SetConfig+0x130>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00b      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a25      	ldr	r2, [pc, #148]	; (8004dc8 <TIM_Base_SetConfig+0x134>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d007      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a24      	ldr	r2, [pc, #144]	; (8004dcc <TIM_Base_SetConfig+0x138>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d003      	beq.n	8004d46 <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a23      	ldr	r2, [pc, #140]	; (8004dd0 <TIM_Base_SetConfig+0x13c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d108      	bne.n	8004d58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a0a      	ldr	r2, [pc, #40]	; (8004da8 <TIM_Base_SetConfig+0x114>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d003      	beq.n	8004d8c <TIM_Base_SetConfig+0xf8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a0c      	ldr	r2, [pc, #48]	; (8004db8 <TIM_Base_SetConfig+0x124>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d103      	bne.n	8004d94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	615a      	str	r2, [r3, #20]
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40010000 	.word	0x40010000
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40000800 	.word	0x40000800
 8004db4:	40000c00 	.word	0x40000c00
 8004db8:	40010400 	.word	0x40010400
 8004dbc:	40014000 	.word	0x40014000
 8004dc0:	40014400 	.word	0x40014400
 8004dc4:	40014800 	.word	0x40014800
 8004dc8:	40001800 	.word	0x40001800
 8004dcc:	40001c00 	.word	0x40001c00
 8004dd0:	40002000 	.word	0x40002000

08004dd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f023 0201 	bic.w	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4b2b      	ldr	r3, [pc, #172]	; (8004eac <TIM_OC1_SetConfig+0xd8>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0303 	bic.w	r3, r3, #3
 8004e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f023 0302 	bic.w	r3, r3, #2
 8004e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a21      	ldr	r2, [pc, #132]	; (8004eb0 <TIM_OC1_SetConfig+0xdc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_OC1_SetConfig+0x64>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a20      	ldr	r2, [pc, #128]	; (8004eb4 <TIM_OC1_SetConfig+0xe0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d10c      	bne.n	8004e52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f023 0308 	bic.w	r3, r3, #8
 8004e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f023 0304 	bic.w	r3, r3, #4
 8004e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a16      	ldr	r2, [pc, #88]	; (8004eb0 <TIM_OC1_SetConfig+0xdc>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d003      	beq.n	8004e62 <TIM_OC1_SetConfig+0x8e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a15      	ldr	r2, [pc, #84]	; (8004eb4 <TIM_OC1_SetConfig+0xe0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d111      	bne.n	8004e86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	621a      	str	r2, [r3, #32]
}
 8004ea0:	bf00      	nop
 8004ea2:	371c      	adds	r7, #28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	fffeff8f 	.word	0xfffeff8f
 8004eb0:	40010000 	.word	0x40010000
 8004eb4:	40010400 	.word	0x40010400

08004eb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	f023 0210 	bic.w	r2, r3, #16
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4b2e      	ldr	r3, [pc, #184]	; (8004f9c <TIM_OC2_SetConfig+0xe4>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f023 0320 	bic.w	r3, r3, #32
 8004f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a23      	ldr	r2, [pc, #140]	; (8004fa0 <TIM_OC2_SetConfig+0xe8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_OC2_SetConfig+0x68>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a22      	ldr	r2, [pc, #136]	; (8004fa4 <TIM_OC2_SetConfig+0xec>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10d      	bne.n	8004f3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <TIM_OC2_SetConfig+0xe8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_OC2_SetConfig+0x94>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a17      	ldr	r2, [pc, #92]	; (8004fa4 <TIM_OC2_SetConfig+0xec>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d113      	bne.n	8004f74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	621a      	str	r2, [r3, #32]
}
 8004f8e:	bf00      	nop
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	feff8fff 	.word	0xfeff8fff
 8004fa0:	40010000 	.word	0x40010000
 8004fa4:	40010400 	.word	0x40010400

08004fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4b2d      	ldr	r3, [pc, #180]	; (8005088 <TIM_OC3_SetConfig+0xe0>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a22      	ldr	r2, [pc, #136]	; (800508c <TIM_OC3_SetConfig+0xe4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d003      	beq.n	800500e <TIM_OC3_SetConfig+0x66>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a21      	ldr	r2, [pc, #132]	; (8005090 <TIM_OC3_SetConfig+0xe8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d10d      	bne.n	800502a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a17      	ldr	r2, [pc, #92]	; (800508c <TIM_OC3_SetConfig+0xe4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_OC3_SetConfig+0x92>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a16      	ldr	r2, [pc, #88]	; (8005090 <TIM_OC3_SetConfig+0xe8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d113      	bne.n	8005062 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	621a      	str	r2, [r3, #32]
}
 800507c:	bf00      	nop
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	fffeff8f 	.word	0xfffeff8f
 800508c:	40010000 	.word	0x40010000
 8005090:	40010400 	.word	0x40010400

08005094 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4b1e      	ldr	r3, [pc, #120]	; (8005138 <TIM_OC4_SetConfig+0xa4>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	021b      	lsls	r3, r3, #8
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	031b      	lsls	r3, r3, #12
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a13      	ldr	r2, [pc, #76]	; (800513c <TIM_OC4_SetConfig+0xa8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_OC4_SetConfig+0x68>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a12      	ldr	r2, [pc, #72]	; (8005140 <TIM_OC4_SetConfig+0xac>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d109      	bne.n	8005110 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	019b      	lsls	r3, r3, #6
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	feff8fff 	.word	0xfeff8fff
 800513c:	40010000 	.word	0x40010000
 8005140:	40010400 	.word	0x40010400

08005144 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4b1b      	ldr	r3, [pc, #108]	; (80051dc <TIM_OC5_SetConfig+0x98>)
 8005170:	4013      	ands	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005184:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a12      	ldr	r2, [pc, #72]	; (80051e0 <TIM_OC5_SetConfig+0x9c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d003      	beq.n	80051a2 <TIM_OC5_SetConfig+0x5e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a11      	ldr	r2, [pc, #68]	; (80051e4 <TIM_OC5_SetConfig+0xa0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d109      	bne.n	80051b6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	621a      	str	r2, [r3, #32]
}
 80051d0:	bf00      	nop
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	fffeff8f 	.word	0xfffeff8f
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40010400 	.word	0x40010400

080051e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <TIM_OC6_SetConfig+0x9c>)
 8005214:	4013      	ands	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	021b      	lsls	r3, r3, #8
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	4313      	orrs	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800522a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	051b      	lsls	r3, r3, #20
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	4313      	orrs	r3, r2
 8005236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a13      	ldr	r2, [pc, #76]	; (8005288 <TIM_OC6_SetConfig+0xa0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_OC6_SetConfig+0x60>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a12      	ldr	r2, [pc, #72]	; (800528c <TIM_OC6_SetConfig+0xa4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d109      	bne.n	800525c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800524e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	029b      	lsls	r3, r3, #10
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	feff8fff 	.word	0xfeff8fff
 8005288:	40010000 	.word	0x40010000
 800528c:	40010400 	.word	0x40010400

08005290 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 031f 	and.w	r3, r3, #31
 80052a2:	2201      	movs	r2, #1
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a1a      	ldr	r2, [r3, #32]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	43db      	mvns	r3, r3
 80052b2:	401a      	ands	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a1a      	ldr	r2, [r3, #32]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	fa01 f303 	lsl.w	r3, r1, r3
 80052c8:	431a      	orrs	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	621a      	str	r2, [r3, #32]
}
 80052ce:	bf00      	nop
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d101      	bne.n	80052f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052f0:	2302      	movs	r3, #2
 80052f2:	e045      	b.n	8005380 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1c      	ldr	r2, [pc, #112]	; (800538c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d004      	beq.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1b      	ldr	r2, [pc, #108]	; (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d108      	bne.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800532e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005340:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005352:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	4313      	orrs	r3, r2
 800535c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	40010000 	.word	0x40010000
 8005390:	40010400 	.word	0x40010400

08005394 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e040      	b.n	8005464 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f002 f8f4 	bl	80075e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2224      	movs	r2, #36	; 0x24
 80053fc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0201 	bic.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f9fe 	bl	8005810 <UART_SetConfig>
 8005414:	4603      	mov	r3, r0
 8005416:	2b01      	cmp	r3, #1
 8005418:	d101      	bne.n	800541e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e022      	b.n	8005464 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fc96 	bl	8005d58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800543a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800544a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0201 	orr.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fd1d 	bl	8005e9c <UART_CheckIdleState>
 8005462:	4603      	mov	r3, r0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	4613      	mov	r3, r2
 8005478:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800547e:	2b20      	cmp	r3, #32
 8005480:	f040 808a 	bne.w	8005598 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_UART_Receive_IT+0x24>
 800548a:	88fb      	ldrh	r3, [r7, #6]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e082      	b.n	800559a <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_UART_Receive_IT+0x36>
 800549e:	2302      	movs	r3, #2
 80054a0:	e07b      	b.n	800559a <HAL_UART_Receive_IT+0x12e>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	88fa      	ldrh	r2, [r7, #6]
 80054b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	88fa      	ldrh	r2, [r7, #6]
 80054bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ce:	d10e      	bne.n	80054ee <HAL_UART_Receive_IT+0x82>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d105      	bne.n	80054e4 <HAL_UART_Receive_IT+0x78>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80054de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054e2:	e02d      	b.n	8005540 <HAL_UART_Receive_IT+0xd4>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	22ff      	movs	r2, #255	; 0xff
 80054e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054ec:	e028      	b.n	8005540 <HAL_UART_Receive_IT+0xd4>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10d      	bne.n	8005512 <HAL_UART_Receive_IT+0xa6>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d104      	bne.n	8005508 <HAL_UART_Receive_IT+0x9c>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	22ff      	movs	r2, #255	; 0xff
 8005502:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005506:	e01b      	b.n	8005540 <HAL_UART_Receive_IT+0xd4>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	227f      	movs	r2, #127	; 0x7f
 800550c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005510:	e016      	b.n	8005540 <HAL_UART_Receive_IT+0xd4>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800551a:	d10d      	bne.n	8005538 <HAL_UART_Receive_IT+0xcc>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d104      	bne.n	800552e <HAL_UART_Receive_IT+0xc2>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	227f      	movs	r2, #127	; 0x7f
 8005528:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800552c:	e008      	b.n	8005540 <HAL_UART_Receive_IT+0xd4>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	223f      	movs	r2, #63	; 0x3f
 8005532:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005536:	e003      	b.n	8005540 <HAL_UART_Receive_IT+0xd4>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2222      	movs	r2, #34	; 0x22
 800554a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0201 	orr.w	r2, r2, #1
 800555a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005564:	d107      	bne.n	8005576 <HAL_UART_Receive_IT+0x10a>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d103      	bne.n	8005576 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4a0d      	ldr	r2, [pc, #52]	; (80055a8 <HAL_UART_Receive_IT+0x13c>)
 8005572:	661a      	str	r2, [r3, #96]	; 0x60
 8005574:	e002      	b.n	800557c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4a0c      	ldr	r2, [pc, #48]	; (80055ac <HAL_UART_Receive_IT+0x140>)
 800557a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005592:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	e000      	b.n	800559a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8005598:	2302      	movs	r3, #2
  }
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	080060cf 	.word	0x080060cf
 80055ac:	08006029 	.word	0x08006029

080055b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f003 030f 	and.w	r3, r3, #15
 80055d6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d113      	bne.n	8005606 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00e      	beq.n	8005606 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d009      	beq.n	8005606 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 80eb 	beq.w	80057d2 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	4798      	blx	r3
      }
      return;
 8005604:	e0e5      	b.n	80057d2 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 80c0 	beq.w	800578e <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d105      	bne.n	8005624 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 80b5 	beq.w	800578e <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00e      	beq.n	800564c <HAL_UART_IRQHandler+0x9c>
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005634:	2b00      	cmp	r3, #0
 8005636:	d009      	beq.n	800564c <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2201      	movs	r2, #1
 800563e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005644:	f043 0201 	orr.w	r2, r3, #1
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00e      	beq.n	8005674 <HAL_UART_IRQHandler+0xc4>
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d009      	beq.n	8005674 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2202      	movs	r2, #2
 8005666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800566c:	f043 0204 	orr.w	r2, r3, #4
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	f003 0304 	and.w	r3, r3, #4
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00e      	beq.n	800569c <HAL_UART_IRQHandler+0xec>
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d009      	beq.n	800569c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2204      	movs	r2, #4
 800568e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005694:	f043 0202 	orr.w	r2, r3, #2
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d013      	beq.n	80056ce <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d104      	bne.n	80056ba <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d009      	beq.n	80056ce <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2208      	movs	r2, #8
 80056c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056c6:	f043 0208 	orr.w	r2, r3, #8
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d07f      	beq.n	80057d6 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00c      	beq.n	80056fa <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056fe:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570a:	2b40      	cmp	r3, #64	; 0x40
 800570c:	d004      	beq.n	8005718 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005714:	2b00      	cmp	r3, #0
 8005716:	d031      	beq.n	800577c <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fc36 	bl	8005f8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005728:	2b40      	cmp	r3, #64	; 0x40
 800572a:	d123      	bne.n	8005774 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800573a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005740:	2b00      	cmp	r3, #0
 8005742:	d013      	beq.n	800576c <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005748:	4a26      	ldr	r2, [pc, #152]	; (80057e4 <HAL_UART_IRQHandler+0x234>)
 800574a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005750:	4618      	mov	r0, r3
 8005752:	f7fb fdca 	bl	80012ea <HAL_DMA_Abort_IT>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d016      	beq.n	800578a <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005766:	4610      	mov	r0, r2
 8005768:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800576a:	e00e      	b.n	800578a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f845 	bl	80057fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005772:	e00a      	b.n	800578a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f841 	bl	80057fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800577a:	e006      	b.n	800578a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f83d 	bl	80057fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005788:	e025      	b.n	80057d6 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800578a:	bf00      	nop
    return;
 800578c:	e023      	b.n	80057d6 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00d      	beq.n	80057b4 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d008      	beq.n	80057b4 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d017      	beq.n	80057da <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	4798      	blx	r3
    }
    return;
 80057b2:	e012      	b.n	80057da <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00e      	beq.n	80057dc <HAL_UART_IRQHandler+0x22c>
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d009      	beq.n	80057dc <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fc14 	bl	8005ff6 <UART_EndTransmit_IT>
    return;
 80057ce:	bf00      	nop
 80057d0:	e004      	b.n	80057dc <HAL_UART_IRQHandler+0x22c>
      return;
 80057d2:	bf00      	nop
 80057d4:	e002      	b.n	80057dc <HAL_UART_IRQHandler+0x22c>
    return;
 80057d6:	bf00      	nop
 80057d8:	e000      	b.n	80057dc <HAL_UART_IRQHandler+0x22c>
    return;
 80057da:	bf00      	nop
  }

}
 80057dc:	3720      	adds	r7, #32
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	08005fcb 	.word	0x08005fcb

080057e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b088      	sub	sp, #32
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005818:	2300      	movs	r3, #0
 800581a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	4313      	orrs	r3, r2
 8005836:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	4bb1      	ldr	r3, [pc, #708]	; (8005b04 <UART_SetConfig+0x2f4>)
 8005840:	4013      	ands	r3, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6812      	ldr	r2, [r2, #0]
 8005846:	6939      	ldr	r1, [r7, #16]
 8005848:	430b      	orrs	r3, r1
 800584a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	430a      	orrs	r2, r1
 8005884:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a9f      	ldr	r2, [pc, #636]	; (8005b08 <UART_SetConfig+0x2f8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d121      	bne.n	80058d4 <UART_SetConfig+0xc4>
 8005890:	4b9e      	ldr	r3, [pc, #632]	; (8005b0c <UART_SetConfig+0x2fc>)
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	2b03      	cmp	r3, #3
 800589c:	d816      	bhi.n	80058cc <UART_SetConfig+0xbc>
 800589e:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <UART_SetConfig+0x94>)
 80058a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a4:	080058b5 	.word	0x080058b5
 80058a8:	080058c1 	.word	0x080058c1
 80058ac:	080058bb 	.word	0x080058bb
 80058b0:	080058c7 	.word	0x080058c7
 80058b4:	2301      	movs	r3, #1
 80058b6:	77fb      	strb	r3, [r7, #31]
 80058b8:	e151      	b.n	8005b5e <UART_SetConfig+0x34e>
 80058ba:	2302      	movs	r3, #2
 80058bc:	77fb      	strb	r3, [r7, #31]
 80058be:	e14e      	b.n	8005b5e <UART_SetConfig+0x34e>
 80058c0:	2304      	movs	r3, #4
 80058c2:	77fb      	strb	r3, [r7, #31]
 80058c4:	e14b      	b.n	8005b5e <UART_SetConfig+0x34e>
 80058c6:	2308      	movs	r3, #8
 80058c8:	77fb      	strb	r3, [r7, #31]
 80058ca:	e148      	b.n	8005b5e <UART_SetConfig+0x34e>
 80058cc:	2310      	movs	r3, #16
 80058ce:	77fb      	strb	r3, [r7, #31]
 80058d0:	bf00      	nop
 80058d2:	e144      	b.n	8005b5e <UART_SetConfig+0x34e>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a8d      	ldr	r2, [pc, #564]	; (8005b10 <UART_SetConfig+0x300>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d134      	bne.n	8005948 <UART_SetConfig+0x138>
 80058de:	4b8b      	ldr	r3, [pc, #556]	; (8005b0c <UART_SetConfig+0x2fc>)
 80058e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e4:	f003 030c 	and.w	r3, r3, #12
 80058e8:	2b0c      	cmp	r3, #12
 80058ea:	d829      	bhi.n	8005940 <UART_SetConfig+0x130>
 80058ec:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <UART_SetConfig+0xe4>)
 80058ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f2:	bf00      	nop
 80058f4:	08005929 	.word	0x08005929
 80058f8:	08005941 	.word	0x08005941
 80058fc:	08005941 	.word	0x08005941
 8005900:	08005941 	.word	0x08005941
 8005904:	08005935 	.word	0x08005935
 8005908:	08005941 	.word	0x08005941
 800590c:	08005941 	.word	0x08005941
 8005910:	08005941 	.word	0x08005941
 8005914:	0800592f 	.word	0x0800592f
 8005918:	08005941 	.word	0x08005941
 800591c:	08005941 	.word	0x08005941
 8005920:	08005941 	.word	0x08005941
 8005924:	0800593b 	.word	0x0800593b
 8005928:	2300      	movs	r3, #0
 800592a:	77fb      	strb	r3, [r7, #31]
 800592c:	e117      	b.n	8005b5e <UART_SetConfig+0x34e>
 800592e:	2302      	movs	r3, #2
 8005930:	77fb      	strb	r3, [r7, #31]
 8005932:	e114      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005934:	2304      	movs	r3, #4
 8005936:	77fb      	strb	r3, [r7, #31]
 8005938:	e111      	b.n	8005b5e <UART_SetConfig+0x34e>
 800593a:	2308      	movs	r3, #8
 800593c:	77fb      	strb	r3, [r7, #31]
 800593e:	e10e      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005940:	2310      	movs	r3, #16
 8005942:	77fb      	strb	r3, [r7, #31]
 8005944:	bf00      	nop
 8005946:	e10a      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a71      	ldr	r2, [pc, #452]	; (8005b14 <UART_SetConfig+0x304>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d120      	bne.n	8005994 <UART_SetConfig+0x184>
 8005952:	4b6e      	ldr	r3, [pc, #440]	; (8005b0c <UART_SetConfig+0x2fc>)
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005958:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800595c:	2b10      	cmp	r3, #16
 800595e:	d00f      	beq.n	8005980 <UART_SetConfig+0x170>
 8005960:	2b10      	cmp	r3, #16
 8005962:	d802      	bhi.n	800596a <UART_SetConfig+0x15a>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d005      	beq.n	8005974 <UART_SetConfig+0x164>
 8005968:	e010      	b.n	800598c <UART_SetConfig+0x17c>
 800596a:	2b20      	cmp	r3, #32
 800596c:	d005      	beq.n	800597a <UART_SetConfig+0x16a>
 800596e:	2b30      	cmp	r3, #48	; 0x30
 8005970:	d009      	beq.n	8005986 <UART_SetConfig+0x176>
 8005972:	e00b      	b.n	800598c <UART_SetConfig+0x17c>
 8005974:	2300      	movs	r3, #0
 8005976:	77fb      	strb	r3, [r7, #31]
 8005978:	e0f1      	b.n	8005b5e <UART_SetConfig+0x34e>
 800597a:	2302      	movs	r3, #2
 800597c:	77fb      	strb	r3, [r7, #31]
 800597e:	e0ee      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005980:	2304      	movs	r3, #4
 8005982:	77fb      	strb	r3, [r7, #31]
 8005984:	e0eb      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005986:	2308      	movs	r3, #8
 8005988:	77fb      	strb	r3, [r7, #31]
 800598a:	e0e8      	b.n	8005b5e <UART_SetConfig+0x34e>
 800598c:	2310      	movs	r3, #16
 800598e:	77fb      	strb	r3, [r7, #31]
 8005990:	bf00      	nop
 8005992:	e0e4      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a5f      	ldr	r2, [pc, #380]	; (8005b18 <UART_SetConfig+0x308>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d120      	bne.n	80059e0 <UART_SetConfig+0x1d0>
 800599e:	4b5b      	ldr	r3, [pc, #364]	; (8005b0c <UART_SetConfig+0x2fc>)
 80059a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d00f      	beq.n	80059cc <UART_SetConfig+0x1bc>
 80059ac:	2b40      	cmp	r3, #64	; 0x40
 80059ae:	d802      	bhi.n	80059b6 <UART_SetConfig+0x1a6>
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <UART_SetConfig+0x1b0>
 80059b4:	e010      	b.n	80059d8 <UART_SetConfig+0x1c8>
 80059b6:	2b80      	cmp	r3, #128	; 0x80
 80059b8:	d005      	beq.n	80059c6 <UART_SetConfig+0x1b6>
 80059ba:	2bc0      	cmp	r3, #192	; 0xc0
 80059bc:	d009      	beq.n	80059d2 <UART_SetConfig+0x1c2>
 80059be:	e00b      	b.n	80059d8 <UART_SetConfig+0x1c8>
 80059c0:	2300      	movs	r3, #0
 80059c2:	77fb      	strb	r3, [r7, #31]
 80059c4:	e0cb      	b.n	8005b5e <UART_SetConfig+0x34e>
 80059c6:	2302      	movs	r3, #2
 80059c8:	77fb      	strb	r3, [r7, #31]
 80059ca:	e0c8      	b.n	8005b5e <UART_SetConfig+0x34e>
 80059cc:	2304      	movs	r3, #4
 80059ce:	77fb      	strb	r3, [r7, #31]
 80059d0:	e0c5      	b.n	8005b5e <UART_SetConfig+0x34e>
 80059d2:	2308      	movs	r3, #8
 80059d4:	77fb      	strb	r3, [r7, #31]
 80059d6:	e0c2      	b.n	8005b5e <UART_SetConfig+0x34e>
 80059d8:	2310      	movs	r3, #16
 80059da:	77fb      	strb	r3, [r7, #31]
 80059dc:	bf00      	nop
 80059de:	e0be      	b.n	8005b5e <UART_SetConfig+0x34e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a4d      	ldr	r2, [pc, #308]	; (8005b1c <UART_SetConfig+0x30c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d124      	bne.n	8005a34 <UART_SetConfig+0x224>
 80059ea:	4b48      	ldr	r3, [pc, #288]	; (8005b0c <UART_SetConfig+0x2fc>)
 80059ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f8:	d012      	beq.n	8005a20 <UART_SetConfig+0x210>
 80059fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059fe:	d802      	bhi.n	8005a06 <UART_SetConfig+0x1f6>
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d007      	beq.n	8005a14 <UART_SetConfig+0x204>
 8005a04:	e012      	b.n	8005a2c <UART_SetConfig+0x21c>
 8005a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a0a:	d006      	beq.n	8005a1a <UART_SetConfig+0x20a>
 8005a0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a10:	d009      	beq.n	8005a26 <UART_SetConfig+0x216>
 8005a12:	e00b      	b.n	8005a2c <UART_SetConfig+0x21c>
 8005a14:	2300      	movs	r3, #0
 8005a16:	77fb      	strb	r3, [r7, #31]
 8005a18:	e0a1      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	77fb      	strb	r3, [r7, #31]
 8005a1e:	e09e      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005a20:	2304      	movs	r3, #4
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e09b      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005a26:	2308      	movs	r3, #8
 8005a28:	77fb      	strb	r3, [r7, #31]
 8005a2a:	e098      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005a2c:	2310      	movs	r3, #16
 8005a2e:	77fb      	strb	r3, [r7, #31]
 8005a30:	bf00      	nop
 8005a32:	e094      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a39      	ldr	r2, [pc, #228]	; (8005b20 <UART_SetConfig+0x310>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d124      	bne.n	8005a88 <UART_SetConfig+0x278>
 8005a3e:	4b33      	ldr	r3, [pc, #204]	; (8005b0c <UART_SetConfig+0x2fc>)
 8005a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a4c:	d012      	beq.n	8005a74 <UART_SetConfig+0x264>
 8005a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a52:	d802      	bhi.n	8005a5a <UART_SetConfig+0x24a>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d007      	beq.n	8005a68 <UART_SetConfig+0x258>
 8005a58:	e012      	b.n	8005a80 <UART_SetConfig+0x270>
 8005a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5e:	d006      	beq.n	8005a6e <UART_SetConfig+0x25e>
 8005a60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a64:	d009      	beq.n	8005a7a <UART_SetConfig+0x26a>
 8005a66:	e00b      	b.n	8005a80 <UART_SetConfig+0x270>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e077      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	77fb      	strb	r3, [r7, #31]
 8005a72:	e074      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005a74:	2304      	movs	r3, #4
 8005a76:	77fb      	strb	r3, [r7, #31]
 8005a78:	e071      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	77fb      	strb	r3, [r7, #31]
 8005a7e:	e06e      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005a80:	2310      	movs	r3, #16
 8005a82:	77fb      	strb	r3, [r7, #31]
 8005a84:	bf00      	nop
 8005a86:	e06a      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a25      	ldr	r2, [pc, #148]	; (8005b24 <UART_SetConfig+0x314>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d124      	bne.n	8005adc <UART_SetConfig+0x2cc>
 8005a92:	4b1e      	ldr	r3, [pc, #120]	; (8005b0c <UART_SetConfig+0x2fc>)
 8005a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a98:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa0:	d012      	beq.n	8005ac8 <UART_SetConfig+0x2b8>
 8005aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa6:	d802      	bhi.n	8005aae <UART_SetConfig+0x29e>
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d007      	beq.n	8005abc <UART_SetConfig+0x2ac>
 8005aac:	e012      	b.n	8005ad4 <UART_SetConfig+0x2c4>
 8005aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab2:	d006      	beq.n	8005ac2 <UART_SetConfig+0x2b2>
 8005ab4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ab8:	d009      	beq.n	8005ace <UART_SetConfig+0x2be>
 8005aba:	e00b      	b.n	8005ad4 <UART_SetConfig+0x2c4>
 8005abc:	2300      	movs	r3, #0
 8005abe:	77fb      	strb	r3, [r7, #31]
 8005ac0:	e04d      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	77fb      	strb	r3, [r7, #31]
 8005ac6:	e04a      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	77fb      	strb	r3, [r7, #31]
 8005acc:	e047      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005ace:	2308      	movs	r3, #8
 8005ad0:	77fb      	strb	r3, [r7, #31]
 8005ad2:	e044      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	77fb      	strb	r3, [r7, #31]
 8005ad8:	bf00      	nop
 8005ada:	e040      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a11      	ldr	r2, [pc, #68]	; (8005b28 <UART_SetConfig+0x318>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d139      	bne.n	8005b5a <UART_SetConfig+0x34a>
 8005ae6:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <UART_SetConfig+0x2fc>)
 8005ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005af4:	d027      	beq.n	8005b46 <UART_SetConfig+0x336>
 8005af6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005afa:	d817      	bhi.n	8005b2c <UART_SetConfig+0x31c>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d01c      	beq.n	8005b3a <UART_SetConfig+0x32a>
 8005b00:	e027      	b.n	8005b52 <UART_SetConfig+0x342>
 8005b02:	bf00      	nop
 8005b04:	efff69f3 	.word	0xefff69f3
 8005b08:	40011000 	.word	0x40011000
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	40004400 	.word	0x40004400
 8005b14:	40004800 	.word	0x40004800
 8005b18:	40004c00 	.word	0x40004c00
 8005b1c:	40005000 	.word	0x40005000
 8005b20:	40011400 	.word	0x40011400
 8005b24:	40007800 	.word	0x40007800
 8005b28:	40007c00 	.word	0x40007c00
 8005b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b30:	d006      	beq.n	8005b40 <UART_SetConfig+0x330>
 8005b32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b36:	d009      	beq.n	8005b4c <UART_SetConfig+0x33c>
 8005b38:	e00b      	b.n	8005b52 <UART_SetConfig+0x342>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	77fb      	strb	r3, [r7, #31]
 8005b3e:	e00e      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005b40:	2302      	movs	r3, #2
 8005b42:	77fb      	strb	r3, [r7, #31]
 8005b44:	e00b      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005b46:	2304      	movs	r3, #4
 8005b48:	77fb      	strb	r3, [r7, #31]
 8005b4a:	e008      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005b4c:	2308      	movs	r3, #8
 8005b4e:	77fb      	strb	r3, [r7, #31]
 8005b50:	e005      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005b52:	2310      	movs	r3, #16
 8005b54:	77fb      	strb	r3, [r7, #31]
 8005b56:	bf00      	nop
 8005b58:	e001      	b.n	8005b5e <UART_SetConfig+0x34e>
 8005b5a:	2310      	movs	r3, #16
 8005b5c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b66:	d17c      	bne.n	8005c62 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8005b68:	7ffb      	ldrb	r3, [r7, #31]
 8005b6a:	2b08      	cmp	r3, #8
 8005b6c:	d859      	bhi.n	8005c22 <UART_SetConfig+0x412>
 8005b6e:	a201      	add	r2, pc, #4	; (adr r2, 8005b74 <UART_SetConfig+0x364>)
 8005b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b74:	08005b99 	.word	0x08005b99
 8005b78:	08005bb7 	.word	0x08005bb7
 8005b7c:	08005bd5 	.word	0x08005bd5
 8005b80:	08005c23 	.word	0x08005c23
 8005b84:	08005bed 	.word	0x08005bed
 8005b88:	08005c23 	.word	0x08005c23
 8005b8c:	08005c23 	.word	0x08005c23
 8005b90:	08005c23 	.word	0x08005c23
 8005b94:	08005c0b 	.word	0x08005c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005b98:	f7fe f98c 	bl	8003eb4 <HAL_RCC_GetPCLK1Freq>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	005a      	lsls	r2, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	085b      	lsrs	r3, r3, #1
 8005ba6:	441a      	add	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	61bb      	str	r3, [r7, #24]
        break;
 8005bb4:	e038      	b.n	8005c28 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005bb6:	f7fe f991 	bl	8003edc <HAL_RCC_GetPCLK2Freq>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	005a      	lsls	r2, r3, #1
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	085b      	lsrs	r3, r3, #1
 8005bc4:	441a      	add	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	61bb      	str	r3, [r7, #24]
        break;
 8005bd2:	e029      	b.n	8005c28 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	085a      	lsrs	r2, r3, #1
 8005bda:	4b5d      	ldr	r3, [pc, #372]	; (8005d50 <UART_SetConfig+0x540>)
 8005bdc:	4413      	add	r3, r2
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6852      	ldr	r2, [r2, #4]
 8005be2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	61bb      	str	r3, [r7, #24]
        break;
 8005bea:	e01d      	b.n	8005c28 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005bec:	f7fe f87e 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	005a      	lsls	r2, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	085b      	lsrs	r3, r3, #1
 8005bfa:	441a      	add	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	61bb      	str	r3, [r7, #24]
        break;
 8005c08:	e00e      	b.n	8005c28 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	085b      	lsrs	r3, r3, #1
 8005c10:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	61bb      	str	r3, [r7, #24]
        break;
 8005c20:	e002      	b.n	8005c28 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	75fb      	strb	r3, [r7, #23]
        break;
 8005c26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2b0f      	cmp	r3, #15
 8005c2c:	d916      	bls.n	8005c5c <UART_SetConfig+0x44c>
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c34:	d212      	bcs.n	8005c5c <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f023 030f 	bic.w	r3, r3, #15
 8005c3e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	085b      	lsrs	r3, r3, #1
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	89fb      	ldrh	r3, [r7, #14]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	89fa      	ldrh	r2, [r7, #14]
 8005c58:	60da      	str	r2, [r3, #12]
 8005c5a:	e06e      	b.n	8005d3a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	75fb      	strb	r3, [r7, #23]
 8005c60:	e06b      	b.n	8005d3a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8005c62:	7ffb      	ldrb	r3, [r7, #31]
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	d857      	bhi.n	8005d18 <UART_SetConfig+0x508>
 8005c68:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <UART_SetConfig+0x460>)
 8005c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6e:	bf00      	nop
 8005c70:	08005c95 	.word	0x08005c95
 8005c74:	08005cb1 	.word	0x08005cb1
 8005c78:	08005ccd 	.word	0x08005ccd
 8005c7c:	08005d19 	.word	0x08005d19
 8005c80:	08005ce5 	.word	0x08005ce5
 8005c84:	08005d19 	.word	0x08005d19
 8005c88:	08005d19 	.word	0x08005d19
 8005c8c:	08005d19 	.word	0x08005d19
 8005c90:	08005d01 	.word	0x08005d01
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005c94:	f7fe f90e 	bl	8003eb4 <HAL_RCC_GetPCLK1Freq>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	085b      	lsrs	r3, r3, #1
 8005ca0:	441a      	add	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	61bb      	str	r3, [r7, #24]
        break;
 8005cae:	e036      	b.n	8005d1e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005cb0:	f7fe f914 	bl	8003edc <HAL_RCC_GetPCLK2Freq>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	441a      	add	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	61bb      	str	r3, [r7, #24]
        break;
 8005cca:	e028      	b.n	8005d1e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	085a      	lsrs	r2, r3, #1
 8005cd2:	4b20      	ldr	r3, [pc, #128]	; (8005d54 <UART_SetConfig+0x544>)
 8005cd4:	4413      	add	r3, r2
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6852      	ldr	r2, [r2, #4]
 8005cda:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	61bb      	str	r3, [r7, #24]
        break;
 8005ce2:	e01c      	b.n	8005d1e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005ce4:	f7fe f802 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	085b      	lsrs	r3, r3, #1
 8005cf0:	441a      	add	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	61bb      	str	r3, [r7, #24]
        break;
 8005cfe:	e00e      	b.n	8005d1e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	085b      	lsrs	r3, r3, #1
 8005d06:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	61bb      	str	r3, [r7, #24]
        break;
 8005d16:	e002      	b.n	8005d1e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	75fb      	strb	r3, [r7, #23]
        break;
 8005d1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	2b0f      	cmp	r3, #15
 8005d22:	d908      	bls.n	8005d36 <UART_SetConfig+0x526>
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2a:	d204      	bcs.n	8005d36 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	60da      	str	r2, [r3, #12]
 8005d34:	e001      	b.n	8005d3a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3720      	adds	r7, #32
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	01e84800 	.word	0x01e84800
 8005d54:	00f42400 	.word	0x00f42400

08005d58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	f003 0310 	and.w	r3, r3, #16
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00a      	beq.n	8005e0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01a      	beq.n	8005e6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e56:	d10a      	bne.n	8005e6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	605a      	str	r2, [r3, #4]
  }
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005eaa:	f7fb f8df 	bl	800106c <HAL_GetTick>
 8005eae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d10e      	bne.n	8005edc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ebe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f814 	bl	8005efa <UART_WaitOnFlagUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e00a      	b.n	8005ef2 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	60f8      	str	r0, [r7, #12]
 8005f02:	60b9      	str	r1, [r7, #8]
 8005f04:	603b      	str	r3, [r7, #0]
 8005f06:	4613      	mov	r3, r2
 8005f08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f0a:	e02a      	b.n	8005f62 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f12:	d026      	beq.n	8005f62 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f14:	f7fb f8aa 	bl	800106c <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d302      	bcc.n	8005f2a <UART_WaitOnFlagUntilTimeout+0x30>
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d11b      	bne.n	8005f62 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f38:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 0201 	bic.w	r2, r2, #1
 8005f48:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2220      	movs	r2, #32
 8005f54:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e00f      	b.n	8005f82 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69da      	ldr	r2, [r3, #28]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	bf0c      	ite	eq
 8005f72:	2301      	moveq	r3, #1
 8005f74:	2300      	movne	r3, #0
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	461a      	mov	r2, r3
 8005f7a:	79fb      	ldrb	r3, [r7, #7]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d0c5      	beq.n	8005f0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fa0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0201 	bic.w	r2, r2, #1
 8005fb0:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f7ff fc07 	bl	80057fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fee:	bf00      	nop
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b082      	sub	sp, #8
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800600c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2220      	movs	r2, #32
 8006012:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff fbe4 	bl	80057e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006036:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800603c:	2b22      	cmp	r3, #34	; 0x22
 800603e:	d13a      	bne.n	80060b6 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006048:	89bb      	ldrh	r3, [r7, #12]
 800604a:	b2d9      	uxtb	r1, r3
 800604c:	89fb      	ldrh	r3, [r7, #14]
 800604e:	b2da      	uxtb	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006054:	400a      	ands	r2, r1
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d121      	bne.n	80060c6 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006090:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0201 	bic.w	r2, r2, #1
 80060a0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2220      	movs	r2, #32
 80060a6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 ff04 	bl	8006ebc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060b4:	e007      	b.n	80060c6 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	699a      	ldr	r2, [r3, #24]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0208 	orr.w	r2, r2, #8
 80060c4:	619a      	str	r2, [r3, #24]
}
 80060c6:	bf00      	nop
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060dc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060e2:	2b22      	cmp	r3, #34	; 0x22
 80060e4:	d13a      	bne.n	800615c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80060f4:	89ba      	ldrh	r2, [r7, #12]
 80060f6:	89fb      	ldrh	r3, [r7, #14]
 80060f8:	4013      	ands	r3, r2
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006104:	1c9a      	adds	r2, r3, #2
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006110:	b29b      	uxth	r3, r3
 8006112:	3b01      	subs	r3, #1
 8006114:	b29a      	uxth	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d121      	bne.n	800616c <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006136:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0201 	bic.w	r2, r2, #1
 8006146:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2220      	movs	r2, #32
 800614c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 feb1 	bl	8006ebc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800615a:	e007      	b.n	800616c <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0208 	orr.w	r2, r2, #8
 800616a:	619a      	str	r2, [r3, #24]
}
 800616c:	bf00      	nop
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006174:	b084      	sub	sp, #16
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	f107 001c 	add.w	r0, r7, #28
 8006182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	2b01      	cmp	r3, #1
 800618a:	d120      	bne.n	80061ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68da      	ldr	r2, [r3, #12]
 800619c:	4b20      	ldr	r3, [pc, #128]	; (8006220 <USB_CoreInit+0xac>)
 800619e:	4013      	ands	r3, r2
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d105      	bne.n	80061c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fa60 	bl	8006688 <USB_CoreReset>
 80061c8:	4603      	mov	r3, r0
 80061ca:	73fb      	strb	r3, [r7, #15]
 80061cc:	e010      	b.n	80061f0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fa54 	bl	8006688 <USB_CoreReset>
 80061e0:	4603      	mov	r3, r0
 80061e2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d10b      	bne.n	800620e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f043 0206 	orr.w	r2, r3, #6
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f043 0220 	orr.w	r2, r3, #32
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800620e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800621a:	b004      	add	sp, #16
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	ffbdffbf 	.word	0xffbdffbf

08006224 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f023 0201 	bic.w	r2, r3, #1
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	460b      	mov	r3, r1
 8006250:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800625e:	78fb      	ldrb	r3, [r7, #3]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d106      	bne.n	8006272 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	60da      	str	r2, [r3, #12]
 8006270:	e00b      	b.n	800628a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d106      	bne.n	8006286 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	60da      	str	r2, [r3, #12]
 8006284:	e001      	b.n	800628a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e003      	b.n	8006292 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800628a:	2032      	movs	r0, #50	; 0x32
 800628c:	f7fa fefa 	bl	8001084 <HAL_Delay>

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800629c:	b084      	sub	sp, #16
 800629e:	b580      	push	{r7, lr}
 80062a0:	b086      	sub	sp, #24
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80062aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80062b6:	2300      	movs	r3, #0
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	e009      	b.n	80062d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	3340      	adds	r3, #64	; 0x40
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	2200      	movs	r2, #0
 80062c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	3301      	adds	r3, #1
 80062ce:	613b      	str	r3, [r7, #16]
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	2b0e      	cmp	r3, #14
 80062d4:	d9f2      	bls.n	80062bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d112      	bne.n	8006302 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	e005      	b.n	800630e <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006306:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006314:	461a      	mov	r2, r3
 8006316:	2300      	movs	r3, #0
 8006318:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006320:	4619      	mov	r1, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006328:	461a      	mov	r2, r3
 800632a:	680b      	ldr	r3, [r1, #0]
 800632c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006330:	2b01      	cmp	r3, #1
 8006332:	d10c      	bne.n	800634e <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8006334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006336:	2b00      	cmp	r3, #0
 8006338:	d104      	bne.n	8006344 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800633a:	2100      	movs	r1, #0
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f971 	bl	8006624 <USB_SetDevSpeed>
 8006342:	e018      	b.n	8006376 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006344:	2101      	movs	r1, #1
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f96c 	bl	8006624 <USB_SetDevSpeed>
 800634c:	e013      	b.n	8006376 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006350:	2b03      	cmp	r3, #3
 8006352:	d10c      	bne.n	800636e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d104      	bne.n	8006364 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800635a:	2100      	movs	r1, #0
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f961 	bl	8006624 <USB_SetDevSpeed>
 8006362:	e008      	b.n	8006376 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006364:	2101      	movs	r1, #1
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f95c 	bl	8006624 <USB_SetDevSpeed>
 800636c:	e003      	b.n	8006376 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800636e:	2103      	movs	r1, #3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f957 	bl	8006624 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006376:	2110      	movs	r1, #16
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f90b 	bl	8006594 <USB_FlushTxFifo>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f929 	bl	80065e0 <USB_FlushRxFifo>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639e:	461a      	mov	r2, r3
 80063a0:	2300      	movs	r3, #0
 80063a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063aa:	461a      	mov	r2, r3
 80063ac:	2300      	movs	r3, #0
 80063ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b6:	461a      	mov	r2, r3
 80063b8:	2300      	movs	r3, #0
 80063ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063bc:	2300      	movs	r3, #0
 80063be:	613b      	str	r3, [r7, #16]
 80063c0:	e043      	b.n	800644a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063d8:	d118      	bne.n	800640c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10a      	bne.n	80063f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	461a      	mov	r2, r3
 80063ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	e013      	b.n	800641e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006402:	461a      	mov	r2, r3
 8006404:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	e008      	b.n	800641e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006418:	461a      	mov	r2, r3
 800641a:	2300      	movs	r3, #0
 800641c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642a:	461a      	mov	r2, r3
 800642c:	2300      	movs	r3, #0
 800642e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643c:	461a      	mov	r2, r3
 800643e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006442:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	3301      	adds	r3, #1
 8006448:	613b      	str	r3, [r7, #16]
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	429a      	cmp	r2, r3
 8006450:	d3b7      	bcc.n	80063c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006452:	2300      	movs	r3, #0
 8006454:	613b      	str	r3, [r7, #16]
 8006456:	e043      	b.n	80064e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800646a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800646e:	d118      	bne.n	80064a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10a      	bne.n	800648c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006482:	461a      	mov	r2, r3
 8006484:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	e013      	b.n	80064b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006498:	461a      	mov	r2, r3
 800649a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	e008      	b.n	80064b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ae:	461a      	mov	r2, r3
 80064b0:	2300      	movs	r3, #0
 80064b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	461a      	mov	r2, r3
 80064c2:	2300      	movs	r3, #0
 80064c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d2:	461a      	mov	r2, r3
 80064d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	3301      	adds	r3, #1
 80064de:	613b      	str	r3, [r7, #16]
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d3b7      	bcc.n	8006458 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064fa:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80064fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d110      	bne.n	8006524 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006508:	461a      	mov	r2, r3
 800650a:	4b1e      	ldr	r3, [pc, #120]	; (8006584 <USB_DevInit+0x2e8>)
 800650c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651c:	4619      	mov	r1, r3
 800651e:	4b1a      	ldr	r3, [pc, #104]	; (8006588 <USB_DevInit+0x2ec>)
 8006520:	4313      	orrs	r3, r2
 8006522:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006530:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	2b00      	cmp	r3, #0
 8006536:	d105      	bne.n	8006544 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	f043 0210 	orr.w	r2, r3, #16
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699a      	ldr	r2, [r3, #24]
 8006548:	4b10      	ldr	r3, [pc, #64]	; (800658c <USB_DevInit+0x2f0>)
 800654a:	4313      	orrs	r3, r2
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d005      	beq.n	8006562 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	f043 0208 	orr.w	r2, r3, #8
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006564:	2b01      	cmp	r3, #1
 8006566:	d105      	bne.n	8006574 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	699a      	ldr	r2, [r3, #24]
 800656c:	4b08      	ldr	r3, [pc, #32]	; (8006590 <USB_DevInit+0x2f4>)
 800656e:	4313      	orrs	r3, r2
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006574:	7dfb      	ldrb	r3, [r7, #23]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006580:	b004      	add	sp, #16
 8006582:	4770      	bx	lr
 8006584:	00800100 	.word	0x00800100
 8006588:	00010003 	.word	0x00010003
 800658c:	803c3800 	.word	0x803c3800
 8006590:	40000004 	.word	0x40000004

08006594 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	019b      	lsls	r3, r3, #6
 80065a6:	f043 0220 	orr.w	r2, r3, #32
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3301      	adds	r3, #1
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4a09      	ldr	r2, [pc, #36]	; (80065dc <USB_FlushTxFifo+0x48>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d901      	bls.n	80065c0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e006      	b.n	80065ce <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	f003 0320 	and.w	r3, r3, #32
 80065c8:	2b20      	cmp	r3, #32
 80065ca:	d0f0      	beq.n	80065ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	00030d40 	.word	0x00030d40

080065e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2210      	movs	r2, #16
 80065f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3301      	adds	r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4a09      	ldr	r2, [pc, #36]	; (8006620 <USB_FlushRxFifo+0x40>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d901      	bls.n	8006604 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e006      	b.n	8006612 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	f003 0310 	and.w	r3, r3, #16
 800660c:	2b10      	cmp	r3, #16
 800660e:	d0f0      	beq.n	80065f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	00030d40 	.word	0x00030d40

08006624 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	460b      	mov	r3, r1
 800662e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	78fb      	ldrb	r3, [r7, #3]
 800663e:	68f9      	ldr	r1, [r7, #12]
 8006640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006644:	4313      	orrs	r3, r2
 8006646:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b084      	sub	sp, #16
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006670:	f043 0302 	orr.w	r3, r3, #2
 8006674:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006676:	2003      	movs	r0, #3
 8006678:	f7fa fd04 	bl	8001084 <HAL_Delay>

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	3301      	adds	r3, #1
 8006698:	60fb      	str	r3, [r7, #12]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	4a13      	ldr	r2, [pc, #76]	; (80066ec <USB_CoreReset+0x64>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d901      	bls.n	80066a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e01b      	b.n	80066de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	daf2      	bge.n	8006694 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f043 0201 	orr.w	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3301      	adds	r3, #1
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4a09      	ldr	r2, [pc, #36]	; (80066ec <USB_CoreReset+0x64>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d901      	bls.n	80066d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e006      	b.n	80066de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d0f0      	beq.n	80066be <USB_CoreReset+0x36>

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	00030d40 	.word	0x00030d40

080066f0 <BH1750_Init>:
#include "main.h"

I2C_HandleTypeDef hi2c1;

void BH1750_Init()
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af02      	add	r7, sp, #8

	uint8_t power_on=0x01;
 80066f6:	2301      	movs	r3, #1
 80066f8:	71fb      	strb	r3, [r7, #7]
	uint8_t mode=0x10;
 80066fa:	2310      	movs	r3, #16
 80066fc:	71bb      	strb	r3, [r7, #6]


	HAL_I2C_Master_Transmit(&hi2c1, 0x23<<1, &power_on, 1, 0xffff);
 80066fe:	1dfa      	adds	r2, r7, #7
 8006700:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	2301      	movs	r3, #1
 8006708:	2146      	movs	r1, #70	; 0x46
 800670a:	4808      	ldr	r0, [pc, #32]	; (800672c <BH1750_Init+0x3c>)
 800670c:	f7fb fcf4 	bl	80020f8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, 0x23<<1, &mode, 1, 0xffff);
 8006710:	1dba      	adds	r2, r7, #6
 8006712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	2301      	movs	r3, #1
 800671a:	2146      	movs	r1, #70	; 0x46
 800671c:	4803      	ldr	r0, [pc, #12]	; (800672c <BH1750_Init+0x3c>)
 800671e:	f7fb fceb 	bl	80020f8 <HAL_I2C_Master_Transmit>
}
 8006722:	bf00      	nop
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000214 	.word	0x20000214

08006730 <BH1750_Receive>:

float BH1750_Receive(void)
{
 8006730:	b590      	push	{r4, r7, lr}
 8006732:	b085      	sub	sp, #20
 8006734:	af02      	add	r7, sp, #8
	uint8_t Data[2];
	float rslt;

	HAL_I2C_Master_Receive(&hi2c1,  0x23<<1, Data, 2, 0xffff); //zmieniony adres
 8006736:	463a      	mov	r2, r7
 8006738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	2302      	movs	r3, #2
 8006740:	2146      	movs	r1, #70	; 0x46
 8006742:	480f      	ldr	r0, [pc, #60]	; (8006780 <BH1750_Receive+0x50>)
 8006744:	f7fb fdcc 	bl	80022e0 <HAL_I2C_Master_Receive>
	rslt=((Data[0]<<8)| Data[1])/1.2;
 8006748:	783b      	ldrb	r3, [r7, #0]
 800674a:	021b      	lsls	r3, r3, #8
 800674c:	787a      	ldrb	r2, [r7, #1]
 800674e:	4313      	orrs	r3, r2
 8006750:	4618      	mov	r0, r3
 8006752:	f7f9 ff07 	bl	8000564 <__aeabi_i2d>
 8006756:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800675a:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <BH1750_Receive+0x54>)
 800675c:	f7fa f896 	bl	800088c <__aeabi_ddiv>
 8006760:	4603      	mov	r3, r0
 8006762:	460c      	mov	r4, r1
 8006764:	4618      	mov	r0, r3
 8006766:	4621      	mov	r1, r4
 8006768:	f7fa fa5e 	bl	8000c28 <__aeabi_d2f>
 800676c:	4603      	mov	r3, r0
 800676e:	607b      	str	r3, [r7, #4]

	return rslt;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	ee07 3a90 	vmov	s15, r3
}
 8006776:	eeb0 0a67 	vmov.f32	s0, s15
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	bd90      	pop	{r4, r7, pc}
 8006780:	20000214 	.word	0x20000214
 8006784:	3ff33333 	.word	0x3ff33333

08006788 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 800678c:	4b1c      	ldr	r3, [pc, #112]	; (8006800 <MX_ETH_Init+0x78>)
 800678e:	4a1d      	ldr	r2, [pc, #116]	; (8006804 <MX_ETH_Init+0x7c>)
 8006790:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006792:	4b1b      	ldr	r3, [pc, #108]	; (8006800 <MX_ETH_Init+0x78>)
 8006794:	2201      	movs	r2, #1
 8006796:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006798:	4b19      	ldr	r3, [pc, #100]	; (8006800 <MX_ETH_Init+0x78>)
 800679a:	2200      	movs	r2, #0
 800679c:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800679e:	4b18      	ldr	r3, [pc, #96]	; (8006800 <MX_ETH_Init+0x78>)
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	2200      	movs	r2, #0
 80067a4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80067a6:	4b16      	ldr	r3, [pc, #88]	; (8006800 <MX_ETH_Init+0x78>)
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	3301      	adds	r3, #1
 80067ac:	2280      	movs	r2, #128	; 0x80
 80067ae:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80067b0:	4b13      	ldr	r3, [pc, #76]	; (8006800 <MX_ETH_Init+0x78>)
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	3302      	adds	r3, #2
 80067b6:	22e1      	movs	r2, #225	; 0xe1
 80067b8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80067ba:	4b11      	ldr	r3, [pc, #68]	; (8006800 <MX_ETH_Init+0x78>)
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	3303      	adds	r3, #3
 80067c0:	2200      	movs	r2, #0
 80067c2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80067c4:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <MX_ETH_Init+0x78>)
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	3304      	adds	r3, #4
 80067ca:	2200      	movs	r2, #0
 80067cc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80067ce:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <MX_ETH_Init+0x78>)
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	3305      	adds	r3, #5
 80067d4:	2200      	movs	r2, #0
 80067d6:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80067d8:	4b09      	ldr	r3, [pc, #36]	; (8006800 <MX_ETH_Init+0x78>)
 80067da:	2200      	movs	r2, #0
 80067dc:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80067de:	4b08      	ldr	r3, [pc, #32]	; (8006800 <MX_ETH_Init+0x78>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80067e4:	4b06      	ldr	r3, [pc, #24]	; (8006800 <MX_ETH_Init+0x78>)
 80067e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80067ea:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80067ec:	4804      	ldr	r0, [pc, #16]	; (8006800 <MX_ETH_Init+0x78>)
 80067ee:	f7fa fd9f 	bl	8001330 <HAL_ETH_Init>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80067f8:	f000 fd22 	bl	8007240 <Error_Handler>
  }

}
 80067fc:	bf00      	nop
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20000260 	.word	0x20000260
 8006804:	40028000 	.word	0x40028000

08006808 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08e      	sub	sp, #56	; 0x38
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	605a      	str	r2, [r3, #4]
 800681a:	609a      	str	r2, [r3, #8]
 800681c:	60da      	str	r2, [r3, #12]
 800681e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a4e      	ldr	r2, [pc, #312]	; (8006960 <HAL_ETH_MspInit+0x158>)
 8006826:	4293      	cmp	r3, r2
 8006828:	f040 8096 	bne.w	8006958 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800682c:	4b4d      	ldr	r3, [pc, #308]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 800682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006830:	4a4c      	ldr	r2, [pc, #304]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 8006832:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006836:	6313      	str	r3, [r2, #48]	; 0x30
 8006838:	4b4a      	ldr	r3, [pc, #296]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 800683a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006840:	623b      	str	r3, [r7, #32]
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	4b47      	ldr	r3, [pc, #284]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 8006846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006848:	4a46      	ldr	r2, [pc, #280]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 800684a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800684e:	6313      	str	r3, [r2, #48]	; 0x30
 8006850:	4b44      	ldr	r3, [pc, #272]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 8006852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006854:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006858:	61fb      	str	r3, [r7, #28]
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	4b41      	ldr	r3, [pc, #260]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 800685e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006860:	4a40      	ldr	r2, [pc, #256]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 8006862:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006866:	6313      	str	r3, [r2, #48]	; 0x30
 8006868:	4b3e      	ldr	r3, [pc, #248]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 800686a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006874:	4b3b      	ldr	r3, [pc, #236]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 8006876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006878:	4a3a      	ldr	r2, [pc, #232]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 800687a:	f043 0304 	orr.w	r3, r3, #4
 800687e:	6313      	str	r3, [r2, #48]	; 0x30
 8006880:	4b38      	ldr	r3, [pc, #224]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 8006882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	617b      	str	r3, [r7, #20]
 800688a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800688c:	4b35      	ldr	r3, [pc, #212]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 800688e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006890:	4a34      	ldr	r2, [pc, #208]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 8006892:	f043 0301 	orr.w	r3, r3, #1
 8006896:	6313      	str	r3, [r2, #48]	; 0x30
 8006898:	4b32      	ldr	r3, [pc, #200]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 800689a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	613b      	str	r3, [r7, #16]
 80068a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068a4:	4b2f      	ldr	r3, [pc, #188]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	4a2e      	ldr	r2, [pc, #184]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 80068aa:	f043 0302 	orr.w	r3, r3, #2
 80068ae:	6313      	str	r3, [r2, #48]	; 0x30
 80068b0:	4b2c      	ldr	r3, [pc, #176]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 80068b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80068bc:	4b29      	ldr	r3, [pc, #164]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 80068be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c0:	4a28      	ldr	r2, [pc, #160]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 80068c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068c6:	6313      	str	r3, [r2, #48]	; 0x30
 80068c8:	4b26      	ldr	r3, [pc, #152]	; (8006964 <HAL_ETH_MspInit+0x15c>)
 80068ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d0:	60bb      	str	r3, [r7, #8]
 80068d2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80068d4:	2332      	movs	r3, #50	; 0x32
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068d8:	2302      	movs	r3, #2
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068dc:	2300      	movs	r3, #0
 80068de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068e0:	2303      	movs	r3, #3
 80068e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80068e4:	230b      	movs	r3, #11
 80068e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068ec:	4619      	mov	r1, r3
 80068ee:	481e      	ldr	r0, [pc, #120]	; (8006968 <HAL_ETH_MspInit+0x160>)
 80068f0:	f7fb f98a 	bl	8001c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80068f4:	2386      	movs	r3, #134	; 0x86
 80068f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f8:	2302      	movs	r3, #2
 80068fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068fc:	2300      	movs	r3, #0
 80068fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006900:	2303      	movs	r3, #3
 8006902:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006904:	230b      	movs	r3, #11
 8006906:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800690c:	4619      	mov	r1, r3
 800690e:	4817      	ldr	r0, [pc, #92]	; (800696c <HAL_ETH_MspInit+0x164>)
 8006910:	f7fb f97a 	bl	8001c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800691a:	2302      	movs	r3, #2
 800691c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800691e:	2300      	movs	r3, #0
 8006920:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006922:	2303      	movs	r3, #3
 8006924:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006926:	230b      	movs	r3, #11
 8006928:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800692a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800692e:	4619      	mov	r1, r3
 8006930:	480f      	ldr	r0, [pc, #60]	; (8006970 <HAL_ETH_MspInit+0x168>)
 8006932:	f7fb f969 	bl	8001c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006936:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693c:	2302      	movs	r3, #2
 800693e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006940:	2300      	movs	r3, #0
 8006942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006944:	2303      	movs	r3, #3
 8006946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006948:	230b      	movs	r3, #11
 800694a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800694c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006950:	4619      	mov	r1, r3
 8006952:	4808      	ldr	r0, [pc, #32]	; (8006974 <HAL_ETH_MspInit+0x16c>)
 8006954:	f7fb f958 	bl	8001c08 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006958:	bf00      	nop
 800695a:	3738      	adds	r7, #56	; 0x38
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	40028000 	.word	0x40028000
 8006964:	40023800 	.word	0x40023800
 8006968:	40020800 	.word	0x40020800
 800696c:	40020000 	.word	0x40020000
 8006970:	40020400 	.word	0x40020400
 8006974:	40021800 	.word	0x40021800

08006978 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08c      	sub	sp, #48	; 0x30
 800697c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800697e:	f107 031c 	add.w	r3, r7, #28
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	605a      	str	r2, [r3, #4]
 8006988:	609a      	str	r2, [r3, #8]
 800698a:	60da      	str	r2, [r3, #12]
 800698c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800698e:	4b4a      	ldr	r3, [pc, #296]	; (8006ab8 <MX_GPIO_Init+0x140>)
 8006990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006992:	4a49      	ldr	r2, [pc, #292]	; (8006ab8 <MX_GPIO_Init+0x140>)
 8006994:	f043 0304 	orr.w	r3, r3, #4
 8006998:	6313      	str	r3, [r2, #48]	; 0x30
 800699a:	4b47      	ldr	r3, [pc, #284]	; (8006ab8 <MX_GPIO_Init+0x140>)
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	f003 0304 	and.w	r3, r3, #4
 80069a2:	61bb      	str	r3, [r7, #24]
 80069a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80069a6:	4b44      	ldr	r3, [pc, #272]	; (8006ab8 <MX_GPIO_Init+0x140>)
 80069a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069aa:	4a43      	ldr	r2, [pc, #268]	; (8006ab8 <MX_GPIO_Init+0x140>)
 80069ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b0:	6313      	str	r3, [r2, #48]	; 0x30
 80069b2:	4b41      	ldr	r3, [pc, #260]	; (8006ab8 <MX_GPIO_Init+0x140>)
 80069b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80069be:	4b3e      	ldr	r3, [pc, #248]	; (8006ab8 <MX_GPIO_Init+0x140>)
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	4a3d      	ldr	r2, [pc, #244]	; (8006ab8 <MX_GPIO_Init+0x140>)
 80069c4:	f043 0301 	orr.w	r3, r3, #1
 80069c8:	6313      	str	r3, [r2, #48]	; 0x30
 80069ca:	4b3b      	ldr	r3, [pc, #236]	; (8006ab8 <MX_GPIO_Init+0x140>)
 80069cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80069d6:	4b38      	ldr	r3, [pc, #224]	; (8006ab8 <MX_GPIO_Init+0x140>)
 80069d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069da:	4a37      	ldr	r2, [pc, #220]	; (8006ab8 <MX_GPIO_Init+0x140>)
 80069dc:	f043 0302 	orr.w	r3, r3, #2
 80069e0:	6313      	str	r3, [r2, #48]	; 0x30
 80069e2:	4b35      	ldr	r3, [pc, #212]	; (8006ab8 <MX_GPIO_Init+0x140>)
 80069e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80069ee:	4b32      	ldr	r3, [pc, #200]	; (8006ab8 <MX_GPIO_Init+0x140>)
 80069f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f2:	4a31      	ldr	r2, [pc, #196]	; (8006ab8 <MX_GPIO_Init+0x140>)
 80069f4:	f043 0308 	orr.w	r3, r3, #8
 80069f8:	6313      	str	r3, [r2, #48]	; 0x30
 80069fa:	4b2f      	ldr	r3, [pc, #188]	; (8006ab8 <MX_GPIO_Init+0x140>)
 80069fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fe:	f003 0308 	and.w	r3, r3, #8
 8006a02:	60bb      	str	r3, [r7, #8]
 8006a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a06:	4b2c      	ldr	r3, [pc, #176]	; (8006ab8 <MX_GPIO_Init+0x140>)
 8006a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0a:	4a2b      	ldr	r2, [pc, #172]	; (8006ab8 <MX_GPIO_Init+0x140>)
 8006a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a10:	6313      	str	r3, [r2, #48]	; 0x30
 8006a12:	4b29      	ldr	r3, [pc, #164]	; (8006ab8 <MX_GPIO_Init+0x140>)
 8006a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1a:	607b      	str	r3, [r7, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f244 0181 	movw	r1, #16513	; 0x4081
 8006a24:	4825      	ldr	r0, [pc, #148]	; (8006abc <MX_GPIO_Init+0x144>)
 8006a26:	f7fb fa99 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	2140      	movs	r1, #64	; 0x40
 8006a2e:	4824      	ldr	r0, [pc, #144]	; (8006ac0 <MX_GPIO_Init+0x148>)
 8006a30:	f7fb fa94 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8006a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006a3a:	4b22      	ldr	r3, [pc, #136]	; (8006ac4 <MX_GPIO_Init+0x14c>)
 8006a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8006a42:	f107 031c 	add.w	r3, r7, #28
 8006a46:	4619      	mov	r1, r3
 8006a48:	481f      	ldr	r0, [pc, #124]	; (8006ac8 <MX_GPIO_Init+0x150>)
 8006a4a:	f7fb f8dd 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8006a4e:	f244 0381 	movw	r3, #16513	; 0x4081
 8006a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a54:	2301      	movs	r3, #1
 8006a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a60:	f107 031c 	add.w	r3, r7, #28
 8006a64:	4619      	mov	r1, r3
 8006a66:	4815      	ldr	r0, [pc, #84]	; (8006abc <MX_GPIO_Init+0x144>)
 8006a68:	f7fb f8ce 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8006a6c:	2340      	movs	r3, #64	; 0x40
 8006a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a70:	2301      	movs	r3, #1
 8006a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a74:	2300      	movs	r3, #0
 8006a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8006a7c:	f107 031c 	add.w	r3, r7, #28
 8006a80:	4619      	mov	r1, r3
 8006a82:	480f      	ldr	r0, [pc, #60]	; (8006ac0 <MX_GPIO_Init+0x148>)
 8006a84:	f7fb f8c0 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8006a88:	2380      	movs	r3, #128	; 0x80
 8006a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a90:	2300      	movs	r3, #0
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006a94:	f107 031c 	add.w	r3, r7, #28
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4809      	ldr	r0, [pc, #36]	; (8006ac0 <MX_GPIO_Init+0x148>)
 8006a9c:	f7fb f8b4 	bl	8001c08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	2028      	movs	r0, #40	; 0x28
 8006aa6:	f7fa fbea 	bl	800127e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006aaa:	2028      	movs	r0, #40	; 0x28
 8006aac:	f7fa fc03 	bl	80012b6 <HAL_NVIC_EnableIRQ>

}
 8006ab0:	bf00      	nop
 8006ab2:	3730      	adds	r7, #48	; 0x30
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	40023800 	.word	0x40023800
 8006abc:	40020400 	.word	0x40020400
 8006ac0:	40021800 	.word	0x40021800
 8006ac4:	10110000 	.word	0x10110000
 8006ac8:	40020800 	.word	0x40020800

08006acc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8006ad0:	4b1b      	ldr	r3, [pc, #108]	; (8006b40 <MX_I2C1_Init+0x74>)
 8006ad2:	4a1c      	ldr	r2, [pc, #112]	; (8006b44 <MX_I2C1_Init+0x78>)
 8006ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8006ad6:	4b1a      	ldr	r3, [pc, #104]	; (8006b40 <MX_I2C1_Init+0x74>)
 8006ad8:	4a1b      	ldr	r2, [pc, #108]	; (8006b48 <MX_I2C1_Init+0x7c>)
 8006ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006adc:	4b18      	ldr	r3, [pc, #96]	; (8006b40 <MX_I2C1_Init+0x74>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006ae2:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <MX_I2C1_Init+0x74>)
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006ae8:	4b15      	ldr	r3, [pc, #84]	; (8006b40 <MX_I2C1_Init+0x74>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006aee:	4b14      	ldr	r3, [pc, #80]	; (8006b40 <MX_I2C1_Init+0x74>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006af4:	4b12      	ldr	r3, [pc, #72]	; (8006b40 <MX_I2C1_Init+0x74>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006afa:	4b11      	ldr	r3, [pc, #68]	; (8006b40 <MX_I2C1_Init+0x74>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006b00:	4b0f      	ldr	r3, [pc, #60]	; (8006b40 <MX_I2C1_Init+0x74>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006b06:	480e      	ldr	r0, [pc, #56]	; (8006b40 <MX_I2C1_Init+0x74>)
 8006b08:	f7fb fa66 	bl	8001fd8 <HAL_I2C_Init>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006b12:	f000 fb95 	bl	8007240 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006b16:	2100      	movs	r1, #0
 8006b18:	4809      	ldr	r0, [pc, #36]	; (8006b40 <MX_I2C1_Init+0x74>)
 8006b1a:	f7fc fbac 	bl	8003276 <HAL_I2CEx_ConfigAnalogFilter>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006b24:	f000 fb8c 	bl	8007240 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006b28:	2100      	movs	r1, #0
 8006b2a:	4805      	ldr	r0, [pc, #20]	; (8006b40 <MX_I2C1_Init+0x74>)
 8006b2c:	f7fc fbee 	bl	800330c <HAL_I2CEx_ConfigDigitalFilter>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006b36:	f000 fb83 	bl	8007240 <Error_Handler>
  }

}
 8006b3a:	bf00      	nop
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	20000214 	.word	0x20000214
 8006b44:	40005400 	.word	0x40005400
 8006b48:	00808cd2 	.word	0x00808cd2

08006b4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08a      	sub	sp, #40	; 0x28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b54:	f107 0314 	add.w	r3, r7, #20
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	605a      	str	r2, [r3, #4]
 8006b5e:	609a      	str	r2, [r3, #8]
 8006b60:	60da      	str	r2, [r3, #12]
 8006b62:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a1f      	ldr	r2, [pc, #124]	; (8006be8 <HAL_I2C_MspInit+0x9c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d138      	bne.n	8006be0 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b6e:	4b1f      	ldr	r3, [pc, #124]	; (8006bec <HAL_I2C_MspInit+0xa0>)
 8006b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b72:	4a1e      	ldr	r2, [pc, #120]	; (8006bec <HAL_I2C_MspInit+0xa0>)
 8006b74:	f043 0302 	orr.w	r3, r3, #2
 8006b78:	6313      	str	r3, [r2, #48]	; 0x30
 8006b7a:	4b1c      	ldr	r3, [pc, #112]	; (8006bec <HAL_I2C_MspInit+0xa0>)
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	613b      	str	r3, [r7, #16]
 8006b84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006b86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b8c:	2312      	movs	r3, #18
 8006b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b90:	2301      	movs	r3, #1
 8006b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b94:	2303      	movs	r3, #3
 8006b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006b98:	2304      	movs	r3, #4
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b9c:	f107 0314 	add.w	r3, r7, #20
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4813      	ldr	r0, [pc, #76]	; (8006bf0 <HAL_I2C_MspInit+0xa4>)
 8006ba4:	f7fb f830 	bl	8001c08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006ba8:	4b10      	ldr	r3, [pc, #64]	; (8006bec <HAL_I2C_MspInit+0xa0>)
 8006baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bac:	4a0f      	ldr	r2, [pc, #60]	; (8006bec <HAL_I2C_MspInit+0xa0>)
 8006bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8006bb4:	4b0d      	ldr	r3, [pc, #52]	; (8006bec <HAL_I2C_MspInit+0xa0>)
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	201f      	movs	r0, #31
 8006bc6:	f7fa fb5a 	bl	800127e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006bca:	201f      	movs	r0, #31
 8006bcc:	f7fa fb73 	bl	80012b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	2020      	movs	r0, #32
 8006bd6:	f7fa fb52 	bl	800127e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006bda:	2020      	movs	r0, #32
 8006bdc:	f7fa fb6b 	bl	80012b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006be0:	bf00      	nop
 8006be2:	3728      	adds	r7, #40	; 0x28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	40005400 	.word	0x40005400
 8006bec:	40023800 	.word	0x40023800
 8006bf0:	40020400 	.word	0x40020400

08006bf4 <LCD_Init>:
static void Priv_Send_Byte(uint8_t c, uint8_t mode);
static inline void DELAY_MICRSECOND(__IO uint32_t micros);
static void LCD_Write_I2C_LCD(uint8_t bt);

void LCD_Init(void)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	71fb      	strb	r3, [r7, #7]

	//Wybranie trybu czterobitowego dane wysylane cztery razy
	HAL_Delay(100);
 8006bfe:	2064      	movs	r0, #100	; 0x64
 8006c00:	f7fa fa40 	bl	8001084 <HAL_Delay>
	for(i=0;i<3;i++)
 8006c04:	2300      	movs	r3, #0
 8006c06:	71fb      	strb	r3, [r7, #7]
 8006c08:	e008      	b.n	8006c1c <LCD_Init+0x28>
	{
		Priv_Send_Halfbyte(0x03);
 8006c0a:	2003      	movs	r0, #3
 8006c0c:	f000 f8b8 	bl	8006d80 <Priv_Send_Halfbyte>
		HAL_Delay(45);
 8006c10:	202d      	movs	r0, #45	; 0x2d
 8006c12:	f7fa fa37 	bl	8001084 <HAL_Delay>
	for(i=0;i<3;i++)
 8006c16:	79fb      	ldrb	r3, [r7, #7]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	71fb      	strb	r3, [r7, #7]
 8006c1c:	79fb      	ldrb	r3, [r7, #7]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d9f3      	bls.n	8006c0a <LCD_Init+0x16>
	}

	//Wlaczenie trybu czterobitowego
	Priv_Send_Halfbyte(0x02);
 8006c22:	2002      	movs	r0, #2
 8006c24:	f000 f8ac 	bl	8006d80 <Priv_Send_Halfbyte>
	HAL_Delay(100);
 8006c28:	2064      	movs	r0, #100	; 0x64
 8006c2a:	f7fa fa2b 	bl	8001084 <HAL_Delay>

	Priv_Send_Byte(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT,0);
 8006c2e:	2100      	movs	r1, #0
 8006c30:	2028      	movs	r0, #40	; 0x28
 8006c32:	f000 f8d9 	bl	8006de8 <Priv_Send_Byte>
	HAL_Delay(1);
 8006c36:	2001      	movs	r0, #1
 8006c38:	f7fa fa24 	bl	8001084 <HAL_Delay>

	Priv_Send_Byte(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF,0);
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	2008      	movs	r0, #8
 8006c40:	f000 f8d2 	bl	8006de8 <Priv_Send_Byte>
	HAL_Delay(1);
 8006c44:	2001      	movs	r0, #1
 8006c46:	f7fa fa1d 	bl	8001084 <HAL_Delay>

	Priv_Send_Byte(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT,0);
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	2006      	movs	r0, #6
 8006c4e:	f000 f8cb 	bl	8006de8 <Priv_Send_Byte>
	HAL_Delay(1);
 8006c52:	2001      	movs	r0, #1
 8006c54:	f7fa fa16 	bl	8001084 <HAL_Delay>

	Priv_Send_Byte(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK,0);
 8006c58:	2100      	movs	r1, #0
 8006c5a:	200c      	movs	r0, #12
 8006c5c:	f000 f8c4 	bl	8006de8 <Priv_Send_Byte>
	HAL_Delay(1);
 8006c60:	2001      	movs	r0, #1
 8006c62:	f7fa fa0f 	bl	8001084 <HAL_Delay>

	LED_SET();
 8006c66:	4b0f      	ldr	r3, [pc, #60]	; (8006ca4 <LCD_Init+0xb0>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	f043 0308 	orr.w	r3, r3, #8
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	4b0c      	ldr	r3, [pc, #48]	; (8006ca4 <LCD_Init+0xb0>)
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	4b0b      	ldr	r3, [pc, #44]	; (8006ca4 <LCD_Init+0xb0>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 f905 	bl	8006e88 <LCD_Write_I2C_LCD>
	WRITE_SET();
 8006c7e:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <LCD_Init+0xb0>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	f023 0302 	bic.w	r3, r3, #2
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	4b06      	ldr	r3, [pc, #24]	; (8006ca4 <LCD_Init+0xb0>)
 8006c8a:	701a      	strb	r2, [r3, #0]
 8006c8c:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <LCD_Init+0xb0>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 f8f9 	bl	8006e88 <LCD_Write_I2C_LCD>

	LCD_Clear();
 8006c96:	f000 f807 	bl	8006ca8 <LCD_Clear>
}
 8006c9a:	bf00      	nop
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	200002a8 	.word	0x200002a8

08006ca8 <LCD_Clear>:

void LCD_Clear(void)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	af00      	add	r7, sp, #0
	Priv_Send_Byte(0x01,0);
 8006cac:	2100      	movs	r1, #0
 8006cae:	2001      	movs	r0, #1
 8006cb0:	f000 f89a 	bl	8006de8 <Priv_Send_Byte>
	HAL_Delay(1000);
 8006cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cb8:	f7fa f9e4 	bl	8001084 <HAL_Delay>
}
 8006cbc:	bf00      	nop
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <LCD_Send_String>:
//{
//	Priv_Send_Byte(ch,1);
//}

void LCD_Send_String(char* st)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	73fb      	strb	r3, [r7, #15]
	while(st[i] != 0)
 8006ccc:	e00a      	b.n	8006ce4 <LCD_Send_String+0x24>
	{
		Priv_Send_Byte(st[i],1);
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 f885 	bl	8006de8 <Priv_Send_Byte>
		i++;
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]
	while(st[i] != 0)
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	4413      	add	r3, r2
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1ee      	bne.n	8006cce <LCD_Send_String+0xe>
	}
}
 8006cf0:	bf00      	nop
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <LCD_Send_Str_Pos>:

void LCD_Send_Str_Pos(char* st, uint8_t x, uint8_t y)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	70fb      	strb	r3, [r7, #3]
 8006d04:	4613      	mov	r3, r2
 8006d06:	70bb      	strb	r3, [r7, #2]
	LCD_Set_Position(x,y);
 8006d08:	78ba      	ldrb	r2, [r7, #2]
 8006d0a:	78fb      	ldrb	r3, [r7, #3]
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 f807 	bl	8006d22 <LCD_Set_Position>
	LCD_Send_String(st);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7ff ffd3 	bl	8006cc0 <LCD_Send_String>
}
 8006d1a:	bf00      	nop
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <LCD_Set_Position>:

void LCD_Set_Position(uint8_t x, uint8_t y)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b082      	sub	sp, #8
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	4603      	mov	r3, r0
 8006d2a:	460a      	mov	r2, r1
 8006d2c:	71fb      	strb	r3, [r7, #7]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	71bb      	strb	r3, [r7, #6]
    switch(y)
 8006d32:	79bb      	ldrb	r3, [r7, #6]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <LCD_Set_Position+0x1c>
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d00c      	beq.n	8006d56 <LCD_Set_Position+0x34>
        case 1:
        	Priv_Send_Byte((0x40+x)|0x80,0);
            HAL_Delay(1);
            break;
    }
}
 8006d3c:	e01b      	b.n	8006d76 <LCD_Set_Position+0x54>
        	Priv_Send_Byte(x|0x80,0);
 8006d3e:	79fb      	ldrb	r3, [r7, #7]
 8006d40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2100      	movs	r1, #0
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 f84d 	bl	8006de8 <Priv_Send_Byte>
            HAL_Delay(1);
 8006d4e:	2001      	movs	r0, #1
 8006d50:	f7fa f998 	bl	8001084 <HAL_Delay>
            break;
 8006d54:	e00f      	b.n	8006d76 <LCD_Set_Position+0x54>
        	Priv_Send_Byte((0x40+x)|0x80,0);
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	3340      	adds	r3, #64	; 0x40
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	b25b      	sxtb	r3, r3
 8006d5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d62:	b25b      	sxtb	r3, r3
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2100      	movs	r1, #0
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 f83d 	bl	8006de8 <Priv_Send_Byte>
            HAL_Delay(1);
 8006d6e:	2001      	movs	r0, #1
 8006d70:	f7fa f988 	bl	8001084 <HAL_Delay>
            break;
 8006d74:	bf00      	nop
}
 8006d76:	bf00      	nop
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <Priv_Send_Halfbyte>:

static void Priv_Send_Halfbyte(uint8_t c)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	4603      	mov	r3, r0
 8006d88:	71fb      	strb	r3, [r7, #7]
        c<<=4;
 8006d8a:	79fb      	ldrb	r3, [r7, #7]
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	71fb      	strb	r3, [r7, #7]
        ENABLE_SET();
 8006d90:	4b14      	ldr	r3, [pc, #80]	; (8006de4 <Priv_Send_Halfbyte+0x64>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	f043 0304 	orr.w	r3, r3, #4
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	4b12      	ldr	r3, [pc, #72]	; (8006de4 <Priv_Send_Halfbyte+0x64>)
 8006d9c:	701a      	strb	r2, [r3, #0]
 8006d9e:	4b11      	ldr	r3, [pc, #68]	; (8006de4 <Priv_Send_Halfbyte+0x64>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 f870 	bl	8006e88 <LCD_Write_I2C_LCD>
        DELAY_MICRSECOND(50);
 8006da8:	2032      	movs	r0, #50	; 0x32
 8006daa:	f000 f855 	bl	8006e58 <DELAY_MICRSECOND>
        LCD_Write_I2C_LCD(portlcd|c);
 8006dae:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <Priv_Send_Halfbyte+0x64>)
 8006db0:	781a      	ldrb	r2, [r3, #0]
 8006db2:	79fb      	ldrb	r3, [r7, #7]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 f865 	bl	8006e88 <LCD_Write_I2C_LCD>
        ENABLE_RESET();
 8006dbe:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <Priv_Send_Halfbyte+0x64>)
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	f023 0304 	bic.w	r3, r3, #4
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <Priv_Send_Halfbyte+0x64>)
 8006dca:	701a      	strb	r2, [r3, #0]
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <Priv_Send_Halfbyte+0x64>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 f859 	bl	8006e88 <LCD_Write_I2C_LCD>
        DELAY_MICRSECOND(50);
 8006dd6:	2032      	movs	r0, #50	; 0x32
 8006dd8:	f000 f83e 	bl	8006e58 <DELAY_MICRSECOND>
}
 8006ddc:	bf00      	nop
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	200002a8 	.word	0x200002a8

08006de8 <Priv_Send_Byte>:

static void Priv_Send_Byte(uint8_t c, uint8_t mode)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	4603      	mov	r3, r0
 8006df0:	460a      	mov	r2, r1
 8006df2:	71fb      	strb	r3, [r7, #7]
 8006df4:	4613      	mov	r3, r2
 8006df6:	71bb      	strb	r3, [r7, #6]
    uint8_t hc=0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	73fb      	strb	r3, [r7, #15]

    if (mode==0)
 8006dfc:	79bb      	ldrb	r3, [r7, #6]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10c      	bne.n	8006e1c <Priv_Send_Byte+0x34>
    {
       	RS_RESET();
 8006e02:	4b14      	ldr	r3, [pc, #80]	; (8006e54 <Priv_Send_Byte+0x6c>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	f023 0301 	bic.w	r3, r3, #1
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	4b11      	ldr	r3, [pc, #68]	; (8006e54 <Priv_Send_Byte+0x6c>)
 8006e0e:	701a      	strb	r2, [r3, #0]
 8006e10:	4b10      	ldr	r3, [pc, #64]	; (8006e54 <Priv_Send_Byte+0x6c>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 f837 	bl	8006e88 <LCD_Write_I2C_LCD>
 8006e1a:	e00b      	b.n	8006e34 <Priv_Send_Byte+0x4c>
    }
    else
    {
      	RS_SET();
 8006e1c:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <Priv_Send_Byte+0x6c>)
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	f043 0301 	orr.w	r3, r3, #1
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <Priv_Send_Byte+0x6c>)
 8006e28:	701a      	strb	r2, [r3, #0]
 8006e2a:	4b0a      	ldr	r3, [pc, #40]	; (8006e54 <Priv_Send_Byte+0x6c>)
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 f82a 	bl	8006e88 <LCD_Write_I2C_LCD>
    }
    hc=c>>4;
 8006e34:	79fb      	ldrb	r3, [r7, #7]
 8006e36:	091b      	lsrs	r3, r3, #4
 8006e38:	73fb      	strb	r3, [r7, #15]

    Priv_Send_Halfbyte(hc);
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff ff9f 	bl	8006d80 <Priv_Send_Halfbyte>
    Priv_Send_Halfbyte(c);
 8006e42:	79fb      	ldrb	r3, [r7, #7]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7ff ff9b 	bl	8006d80 <Priv_Send_Halfbyte>
}
 8006e4a:	bf00      	nop
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	200002a8 	.word	0x200002a8

08006e58 <DELAY_MICRSECOND>:

static inline void DELAY_MICRSECOND(__IO uint32_t micros)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 5;
 8006e60:	4b07      	ldr	r3, [pc, #28]	; (8006e80 <DELAY_MICRSECOND+0x28>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a07      	ldr	r2, [pc, #28]	; (8006e84 <DELAY_MICRSECOND+0x2c>)
 8006e66:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6a:	0d5b      	lsrs	r3, r3, #21
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	fb02 f303 	mul.w	r3, r2, r3
 8006e72:	607b      	str	r3, [r7, #4]
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	2000000c 	.word	0x2000000c
 8006e84:	6b5fca6b 	.word	0x6b5fca6b

08006e88 <LCD_Write_I2C_LCD>:

static void LCD_Write_I2C_LCD(uint8_t bt)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af02      	add	r7, sp, #8
 8006e8e:	4603      	mov	r3, r0
 8006e90:	71fb      	strb	r3, [r7, #7]
	buf[0] = bt;
 8006e92:	4a08      	ldr	r2, [pc, #32]	; (8006eb4 <LCD_Write_I2C_LCD+0x2c>)
 8006e94:	79fb      	ldrb	r3, [r7, #7]
 8006e96:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)0x4E, buf, 1, 1000);
 8006e98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4a04      	ldr	r2, [pc, #16]	; (8006eb4 <LCD_Write_I2C_LCD+0x2c>)
 8006ea2:	214e      	movs	r1, #78	; 0x4e
 8006ea4:	4804      	ldr	r0, [pc, #16]	; (8006eb8 <LCD_Write_I2C_LCD+0x30>)
 8006ea6:	f7fb f927 	bl	80020f8 <HAL_I2C_Master_Transmit>
}
 8006eaa:	bf00      	nop
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	200001fc 	.word	0x200001fc
 8006eb8:	20000214 	.word	0x20000214

08006ebc <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) //odbior wiadomosci z uarta (wartosc zadana)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
	//odbior zadanej - zamiana na int
	int_zadana = atoi(zadana);
 8006ec4:	4809      	ldr	r0, [pc, #36]	; (8006eec <HAL_UART_RxCpltCallback+0x30>)
 8006ec6:	f000 fc8a 	bl	80077de <atoi>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	4b08      	ldr	r3, [pc, #32]	; (8006ef0 <HAL_UART_RxCpltCallback+0x34>)
 8006ece:	601a      	str	r2, [r3, #0]
	status_odbior = HAL_UART_Receive_IT(&huart3, (uint8_t*)zadana, 4);
 8006ed0:	2204      	movs	r2, #4
 8006ed2:	4906      	ldr	r1, [pc, #24]	; (8006eec <HAL_UART_RxCpltCallback+0x30>)
 8006ed4:	4807      	ldr	r0, [pc, #28]	; (8006ef4 <HAL_UART_RxCpltCallback+0x38>)
 8006ed6:	f7fe fac9 	bl	800546c <HAL_UART_Receive_IT>
 8006eda:	4603      	mov	r3, r0
 8006edc:	461a      	mov	r2, r3
 8006ede:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <HAL_UART_RxCpltCallback+0x3c>)
 8006ee0:	701a      	strb	r2, [r3, #0]
}
 8006ee2:	bf00      	nop
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000310 	.word	0x20000310
 8006ef0:	20000008 	.word	0x20000008
 8006ef4:	20000464 	.word	0x20000464
 8006ef8:	20000318 	.word	0x20000318

08006efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006f00:	f7fa f862 	bl	8000fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006f04:	f000 f90a 	bl	800711c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006f08:	f7ff fd36 	bl	8006978 <MX_GPIO_Init>
  MX_ETH_Init();
 8006f0c:	f7ff fc3c 	bl	8006788 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8006f10:	f000 fb36 	bl	8007580 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8006f14:	f000 fbb0 	bl	8007678 <MX_USB_OTG_FS_PCD_Init>
//  MX_TIM2_Init();
  MX_TIM3_Init();
 8006f18:	f000 fa7e 	bl	8007418 <MX_TIM3_Init>
  MX_I2C1_Init();
 8006f1c:	f7ff fdd6 	bl	8006acc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BH1750_Init();
 8006f20:	f7ff fbe6 	bl	80066f0 <BH1750_Init>

  LCD_Init();
 8006f24:	f7ff fe66 	bl	8006bf4 <LCD_Init>
  HAL_Delay(500);
 8006f28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f2c:	f7fa f8aa 	bl	8001084 <HAL_Delay>
  LCD_Send_Str_Pos("Natezenie",0,0);
 8006f30:	2200      	movs	r2, #0
 8006f32:	2100      	movs	r1, #0
 8006f34:	486d      	ldr	r0, [pc, #436]	; (80070ec <main+0x1f0>)
 8006f36:	f7ff fedf 	bl	8006cf8 <LCD_Send_Str_Pos>
  LCD_Send_Str_Pos("swiatla",0,1);
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	486c      	ldr	r0, [pc, #432]	; (80070f0 <main+0x1f4>)
 8006f40:	f7ff feda 	bl	8006cf8 <LCD_Send_Str_Pos>

  status_odbior = HAL_UART_Receive_IT(&huart3, (uint8_t*)zadana, 4); //przerwanie od uarta
 8006f44:	2204      	movs	r2, #4
 8006f46:	496b      	ldr	r1, [pc, #428]	; (80070f4 <main+0x1f8>)
 8006f48:	486b      	ldr	r0, [pc, #428]	; (80070f8 <main+0x1fc>)
 8006f4a:	f7fe fa8f 	bl	800546c <HAL_UART_Receive_IT>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	461a      	mov	r2, r3
 8006f52:	4b6a      	ldr	r3, [pc, #424]	; (80070fc <main+0x200>)
 8006f54:	701a      	strb	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8006f56:	2100      	movs	r1, #0
 8006f58:	4869      	ldr	r0, [pc, #420]	; (8007100 <main+0x204>)
 8006f5a:	f7fd fbed 	bl	8004738 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, wypelnienie); //ustawia zadane wypelnienei na pwm (poczatkowe -> 0)
 8006f5e:	4b69      	ldr	r3, [pc, #420]	; (8007104 <main+0x208>)
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4b67      	ldr	r3, [pc, #412]	; (8007100 <main+0x204>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BH1750_int=(int)BH1750_Receive();
 8006f68:	f7ff fbe2 	bl	8006730 <BH1750_Receive>
 8006f6c:	eef0 7a40 	vmov.f32	s15, s0
 8006f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f74:	ee17 2a90 	vmov	r2, s15
 8006f78:	4b63      	ldr	r3, [pc, #396]	; (8007108 <main+0x20c>)
 8006f7a:	601a      	str	r2, [r3, #0]

	  sprintf(wyswietl_lcd, "[lx]:%d", BH1750_int);
 8006f7c:	4b62      	ldr	r3, [pc, #392]	; (8007108 <main+0x20c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	461a      	mov	r2, r3
 8006f82:	4962      	ldr	r1, [pc, #392]	; (800710c <main+0x210>)
 8006f84:	4862      	ldr	r0, [pc, #392]	; (8007110 <main+0x214>)
 8006f86:	f001 faa5 	bl	80084d4 <siprintf>
	  LCD_Send_Str_Pos(wyswietl_lcd,7,1);
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	2107      	movs	r1, #7
 8006f8e:	4860      	ldr	r0, [pc, #384]	; (8007110 <main+0x214>)
 8006f90:	f7ff feb2 	bl	8006cf8 <LCD_Send_Str_Pos>
	  //HAL_Delay(500);
	  if (BH1750_int<1000) // aby na ostatnim miejscu 'nie zawieszala' sie ostatnia cyfra (np. przejscie z 120 na 80)
 8006f94:	4b5c      	ldr	r3, [pc, #368]	; (8007108 <main+0x20c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f9c:	da04      	bge.n	8006fa8 <main+0xac>
	  {
		  LCD_Send_Str_Pos(" ",15,1);
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	210f      	movs	r1, #15
 8006fa2:	485c      	ldr	r0, [pc, #368]	; (8007114 <main+0x218>)
 8006fa4:	f7ff fea8 	bl	8006cf8 <LCD_Send_Str_Pos>
	  }
	  if(BH1750_int<100)
 8006fa8:	4b57      	ldr	r3, [pc, #348]	; (8007108 <main+0x20c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b63      	cmp	r3, #99	; 0x63
 8006fae:	dc04      	bgt.n	8006fba <main+0xbe>
	  {
		  LCD_Send_Str_Pos(" ",14,1);
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	210e      	movs	r1, #14
 8006fb4:	4857      	ldr	r0, [pc, #348]	; (8007114 <main+0x218>)
 8006fb6:	f7ff fe9f 	bl	8006cf8 <LCD_Send_Str_Pos>

	  // ^wyswietla wynik na wyswietlaczu // gdy zejdziemy np ze 103 do 84 to wyswietla 843 (zostawia 3 miejsce po przecinku)
	  // mozna dac po prostu zakres powyzej 100 hehe

	  //regulator dwupolozeniowy:
	  if (BH1750_int <= int_zadana && wypelnienie <=1000 && abs(BH1750_int-int_zadana)>10 ) // jezeli wartosc odiberana przez czujnik jest mniejsza od zadanej -> zwieksz swiecenie diody
 8006fba:	4b53      	ldr	r3, [pc, #332]	; (8007108 <main+0x20c>)
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	4b56      	ldr	r3, [pc, #344]	; (8007118 <main+0x21c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	dc19      	bgt.n	8006ffa <main+0xfe>
 8006fc6:	4b4f      	ldr	r3, [pc, #316]	; (8007104 <main+0x208>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fce:	dc14      	bgt.n	8006ffa <main+0xfe>
 8006fd0:	4b4d      	ldr	r3, [pc, #308]	; (8007108 <main+0x20c>)
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	4b50      	ldr	r3, [pc, #320]	; (8007118 <main+0x21c>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	bfb8      	it	lt
 8006fde:	425b      	neglt	r3, r3
 8006fe0:	2b0a      	cmp	r3, #10
 8006fe2:	dd0a      	ble.n	8006ffa <main+0xfe>
	  {
		  wypelnienie +=10;
 8006fe4:	4b47      	ldr	r3, [pc, #284]	; (8007104 <main+0x208>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	330a      	adds	r3, #10
 8006fea:	4a46      	ldr	r2, [pc, #280]	; (8007104 <main+0x208>)
 8006fec:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, wypelnienie);
 8006fee:	4b45      	ldr	r3, [pc, #276]	; (8007104 <main+0x208>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	4b43      	ldr	r3, [pc, #268]	; (8007100 <main+0x204>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	635a      	str	r2, [r3, #52]	; 0x34
 8006ff8:	e077      	b.n	80070ea <main+0x1ee>
	  }
	  else if(BH1750_int <= int_zadana && wypelnienie <=1000 && abs(BH1750_int-int_zadana)<10)
 8006ffa:	4b43      	ldr	r3, [pc, #268]	; (8007108 <main+0x20c>)
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	4b46      	ldr	r3, [pc, #280]	; (8007118 <main+0x21c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	429a      	cmp	r2, r3
 8007004:	dc21      	bgt.n	800704a <main+0x14e>
 8007006:	4b3f      	ldr	r3, [pc, #252]	; (8007104 <main+0x208>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800700e:	dc1c      	bgt.n	800704a <main+0x14e>
 8007010:	4b3d      	ldr	r3, [pc, #244]	; (8007108 <main+0x20c>)
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	4b40      	ldr	r3, [pc, #256]	; (8007118 <main+0x21c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	f113 0f09 	cmn.w	r3, #9
 800701e:	db14      	blt.n	800704a <main+0x14e>
 8007020:	4b39      	ldr	r3, [pc, #228]	; (8007108 <main+0x20c>)
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	4b3c      	ldr	r3, [pc, #240]	; (8007118 <main+0x21c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b09      	cmp	r3, #9
 800702c:	dc0d      	bgt.n	800704a <main+0x14e>
	  {
		  wypelnienie +=1;
 800702e:	4b35      	ldr	r3, [pc, #212]	; (8007104 <main+0x208>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3301      	adds	r3, #1
 8007034:	4a33      	ldr	r2, [pc, #204]	; (8007104 <main+0x208>)
 8007036:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, wypelnienie);
 8007038:	4b32      	ldr	r3, [pc, #200]	; (8007104 <main+0x208>)
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	4b30      	ldr	r3, [pc, #192]	; (8007100 <main+0x204>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(200); // w dokladniejszym manipuluj wolniej
 8007042:	20c8      	movs	r0, #200	; 0xc8
 8007044:	f7fa f81e 	bl	8001084 <HAL_Delay>
 8007048:	e04f      	b.n	80070ea <main+0x1ee>
	  }
	  else if (BH1750_int > int_zadana && wypelnienie > 0 && abs(BH1750_int-int_zadana)>10) // jezeli wieksza - zmniejsz //zabezpieczenie,aby wyp ni spadlo ponizej 0
 800704a:	4b2f      	ldr	r3, [pc, #188]	; (8007108 <main+0x20c>)
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	4b32      	ldr	r3, [pc, #200]	; (8007118 <main+0x21c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	429a      	cmp	r2, r3
 8007054:	dd1f      	ble.n	8007096 <main+0x19a>
 8007056:	4b2b      	ldr	r3, [pc, #172]	; (8007104 <main+0x208>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	dd1b      	ble.n	8007096 <main+0x19a>
 800705e:	4b2a      	ldr	r3, [pc, #168]	; (8007108 <main+0x20c>)
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	4b2d      	ldr	r3, [pc, #180]	; (8007118 <main+0x21c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	bfb8      	it	lt
 800706c:	425b      	neglt	r3, r3
 800706e:	2b0a      	cmp	r3, #10
 8007070:	dd11      	ble.n	8007096 <main+0x19a>
	  {
		  wypelnienie -=10;
 8007072:	4b24      	ldr	r3, [pc, #144]	; (8007104 <main+0x208>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3b0a      	subs	r3, #10
 8007078:	4a22      	ldr	r2, [pc, #136]	; (8007104 <main+0x208>)
 800707a:	6013      	str	r3, [r2, #0]
		  if(wypelnienie<0) //aby wypelnienei nie bylo ujemne - wtedy dioda swieci na maxa
 800707c:	4b21      	ldr	r3, [pc, #132]	; (8007104 <main+0x208>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	da02      	bge.n	800708a <main+0x18e>
		  {
			  wypelnienie =0;
 8007084:	4b1f      	ldr	r3, [pc, #124]	; (8007104 <main+0x208>)
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
		  }
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, wypelnienie); //ustaw zadane wypelnienie na diodzie
 800708a:	4b1e      	ldr	r3, [pc, #120]	; (8007104 <main+0x208>)
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	4b1c      	ldr	r3, [pc, #112]	; (8007100 <main+0x204>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	635a      	str	r2, [r3, #52]	; 0x34
 8007094:	e029      	b.n	80070ea <main+0x1ee>
	  }
	  else if (BH1750_int > int_zadana && wypelnienie > 0 && abs(BH1750_int-int_zadana)<10)
 8007096:	4b1c      	ldr	r3, [pc, #112]	; (8007108 <main+0x20c>)
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	4b1f      	ldr	r3, [pc, #124]	; (8007118 <main+0x21c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	f77f af62 	ble.w	8006f68 <main+0x6c>
 80070a4:	4b17      	ldr	r3, [pc, #92]	; (8007104 <main+0x208>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f77f af5d 	ble.w	8006f68 <main+0x6c>
 80070ae:	4b16      	ldr	r3, [pc, #88]	; (8007108 <main+0x20c>)
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	4b19      	ldr	r3, [pc, #100]	; (8007118 <main+0x21c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	f113 0f09 	cmn.w	r3, #9
 80070bc:	f6ff af54 	blt.w	8006f68 <main+0x6c>
 80070c0:	4b11      	ldr	r3, [pc, #68]	; (8007108 <main+0x20c>)
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	4b14      	ldr	r3, [pc, #80]	; (8007118 <main+0x21c>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b09      	cmp	r3, #9
 80070cc:	f73f af4c 	bgt.w	8006f68 <main+0x6c>
	  {
		  wypelnienie -=1;
 80070d0:	4b0c      	ldr	r3, [pc, #48]	; (8007104 <main+0x208>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3b01      	subs	r3, #1
 80070d6:	4a0b      	ldr	r2, [pc, #44]	; (8007104 <main+0x208>)
 80070d8:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, wypelnienie);
 80070da:	4b0a      	ldr	r3, [pc, #40]	; (8007104 <main+0x208>)
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	4b08      	ldr	r3, [pc, #32]	; (8007100 <main+0x204>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(200); // w dokladniejszym manipuluj wolniej
 80070e4:	20c8      	movs	r0, #200	; 0xc8
 80070e6:	f7f9 ffcd 	bl	8001084 <HAL_Delay>
  {
 80070ea:	e73d      	b.n	8006f68 <main+0x6c>
 80070ec:	0800b300 	.word	0x0800b300
 80070f0:	0800b30c 	.word	0x0800b30c
 80070f4:	20000310 	.word	0x20000310
 80070f8:	20000464 	.word	0x20000464
 80070fc:	20000318 	.word	0x20000318
 8007100:	200003e4 	.word	0x200003e4
 8007104:	20000200 	.word	0x20000200
 8007108:	20000314 	.word	0x20000314
 800710c:	0800b314 	.word	0x0800b314
 8007110:	2000031c 	.word	0x2000031c
 8007114:	0800b31c 	.word	0x0800b31c
 8007118:	20000008 	.word	0x20000008

0800711c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b0b4      	sub	sp, #208	; 0xd0
 8007120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007122:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007126:	2230      	movs	r2, #48	; 0x30
 8007128:	2100      	movs	r1, #0
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fb86 	bl	800783c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007130:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	605a      	str	r2, [r3, #4]
 800713a:	609a      	str	r2, [r3, #8]
 800713c:	60da      	str	r2, [r3, #12]
 800713e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007140:	f107 0308 	add.w	r3, r7, #8
 8007144:	2284      	movs	r2, #132	; 0x84
 8007146:	2100      	movs	r1, #0
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fb77 	bl	800783c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800714e:	f7fc fa65 	bl	800361c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007152:	4b38      	ldr	r3, [pc, #224]	; (8007234 <SystemClock_Config+0x118>)
 8007154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007156:	4a37      	ldr	r2, [pc, #220]	; (8007234 <SystemClock_Config+0x118>)
 8007158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800715c:	6413      	str	r3, [r2, #64]	; 0x40
 800715e:	4b35      	ldr	r3, [pc, #212]	; (8007234 <SystemClock_Config+0x118>)
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007166:	607b      	str	r3, [r7, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800716a:	4b33      	ldr	r3, [pc, #204]	; (8007238 <SystemClock_Config+0x11c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007172:	4a31      	ldr	r2, [pc, #196]	; (8007238 <SystemClock_Config+0x11c>)
 8007174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	4b2f      	ldr	r3, [pc, #188]	; (8007238 <SystemClock_Config+0x11c>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007182:	603b      	str	r3, [r7, #0]
 8007184:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007186:	2301      	movs	r3, #1
 8007188:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800718c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8007190:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007194:	2302      	movs	r3, #2
 8007196:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800719a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800719e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80071a2:	2304      	movs	r3, #4
 80071a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80071a8:	2348      	movs	r3, #72	; 0x48
 80071aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80071ae:	2302      	movs	r3, #2
 80071b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80071b4:	2303      	movs	r3, #3
 80071b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80071ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fc fa3c 	bl	800363c <HAL_RCC_OscConfig>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80071ca:	f000 f839 	bl	8007240 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80071ce:	230f      	movs	r3, #15
 80071d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80071d4:	2302      	movs	r3, #2
 80071d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80071da:	2300      	movs	r3, #0
 80071dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80071e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80071e8:	2300      	movs	r3, #0
 80071ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80071ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80071f2:	2102      	movs	r1, #2
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fc fc91 	bl	8003b1c <HAL_RCC_ClockConfig>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8007200:	f000 f81e 	bl	8007240 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8007204:	4b0d      	ldr	r3, [pc, #52]	; (800723c <SystemClock_Config+0x120>)
 8007206:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8007208:	2300      	movs	r3, #0
 800720a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800720c:	2300      	movs	r3, #0
 800720e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8007210:	2300      	movs	r3, #0
 8007212:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007216:	f107 0308 	add.w	r3, r7, #8
 800721a:	4618      	mov	r0, r3
 800721c:	f7fc fe72 	bl	8003f04 <HAL_RCCEx_PeriphCLKConfig>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8007226:	f000 f80b 	bl	8007240 <Error_Handler>
  }
}
 800722a:	bf00      	nop
 800722c:	37d0      	adds	r7, #208	; 0xd0
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	40023800 	.word	0x40023800
 8007238:	40007000 	.word	0x40007000
 800723c:	00204100 	.word	0x00204100

08007240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007244:	bf00      	nop
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
	...

08007250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007256:	4b0f      	ldr	r3, [pc, #60]	; (8007294 <HAL_MspInit+0x44>)
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	4a0e      	ldr	r2, [pc, #56]	; (8007294 <HAL_MspInit+0x44>)
 800725c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007260:	6413      	str	r3, [r2, #64]	; 0x40
 8007262:	4b0c      	ldr	r3, [pc, #48]	; (8007294 <HAL_MspInit+0x44>)
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800726a:	607b      	str	r3, [r7, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800726e:	4b09      	ldr	r3, [pc, #36]	; (8007294 <HAL_MspInit+0x44>)
 8007270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007272:	4a08      	ldr	r2, [pc, #32]	; (8007294 <HAL_MspInit+0x44>)
 8007274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007278:	6453      	str	r3, [r2, #68]	; 0x44
 800727a:	4b06      	ldr	r3, [pc, #24]	; (8007294 <HAL_MspInit+0x44>)
 800727c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007282:	603b      	str	r3, [r7, #0]
 8007284:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007286:	bf00      	nop
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	40023800 	.word	0x40023800

08007298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800729c:	bf00      	nop
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072a6:	b480      	push	{r7}
 80072a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80072aa:	e7fe      	b.n	80072aa <HardFault_Handler+0x4>

080072ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80072ac:	b480      	push	{r7}
 80072ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80072b0:	e7fe      	b.n	80072b0 <MemManage_Handler+0x4>

080072b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80072b2:	b480      	push	{r7}
 80072b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072b6:	e7fe      	b.n	80072b6 <BusFault_Handler+0x4>

080072b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80072bc:	e7fe      	b.n	80072bc <UsageFault_Handler+0x4>

080072be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80072be:	b480      	push	{r7}
 80072c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80072c2:	bf00      	nop
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80072cc:	b480      	push	{r7}
 80072ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80072d0:	bf00      	nop
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80072da:	b480      	push	{r7}
 80072dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80072de:	bf00      	nop
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80072ec:	f7f9 feaa 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80072f0:	bf00      	nop
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80072f8:	4802      	ldr	r0, [pc, #8]	; (8007304 <TIM2_IRQHandler+0x10>)
 80072fa:	f7fd fa61 	bl	80047c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80072fe:	bf00      	nop
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	20000424 	.word	0x20000424

08007308 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800730c:	4802      	ldr	r0, [pc, #8]	; (8007318 <I2C1_EV_IRQHandler+0x10>)
 800730e:	f7fb f8dd 	bl	80024cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8007312:	bf00      	nop
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20000214 	.word	0x20000214

0800731c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8007320:	4802      	ldr	r0, [pc, #8]	; (800732c <I2C1_ER_IRQHandler+0x10>)
 8007322:	f7fb f8ed 	bl	8002500 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8007326:	bf00      	nop
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000214 	.word	0x20000214

08007330 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007334:	4802      	ldr	r0, [pc, #8]	; (8007340 <USART3_IRQHandler+0x10>)
 8007336:	f7fe f93b 	bl	80055b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800733a:	bf00      	nop
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20000464 	.word	0x20000464

08007344 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007348:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800734c:	f7fa fe20 	bl	8001f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007350:	bf00      	nop
 8007352:	bd80      	pop	{r7, pc}

08007354 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800735c:	4b11      	ldr	r3, [pc, #68]	; (80073a4 <_sbrk+0x50>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d102      	bne.n	800736a <_sbrk+0x16>
		heap_end = &end;
 8007364:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <_sbrk+0x50>)
 8007366:	4a10      	ldr	r2, [pc, #64]	; (80073a8 <_sbrk+0x54>)
 8007368:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800736a:	4b0e      	ldr	r3, [pc, #56]	; (80073a4 <_sbrk+0x50>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007370:	4b0c      	ldr	r3, [pc, #48]	; (80073a4 <_sbrk+0x50>)
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4413      	add	r3, r2
 8007378:	466a      	mov	r2, sp
 800737a:	4293      	cmp	r3, r2
 800737c:	d907      	bls.n	800738e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800737e:	f000 fa33 	bl	80077e8 <__errno>
 8007382:	4602      	mov	r2, r0
 8007384:	230c      	movs	r3, #12
 8007386:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007388:	f04f 33ff 	mov.w	r3, #4294967295
 800738c:	e006      	b.n	800739c <_sbrk+0x48>
	}

	heap_end += incr;
 800738e:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <_sbrk+0x50>)
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4413      	add	r3, r2
 8007396:	4a03      	ldr	r2, [pc, #12]	; (80073a4 <_sbrk+0x50>)
 8007398:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800739a:	68fb      	ldr	r3, [r7, #12]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	20000204 	.word	0x20000204
 80073a8:	200008f0 	.word	0x200008f0

080073ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80073b0:	4b15      	ldr	r3, [pc, #84]	; (8007408 <SystemInit+0x5c>)
 80073b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b6:	4a14      	ldr	r2, [pc, #80]	; (8007408 <SystemInit+0x5c>)
 80073b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80073c0:	4b12      	ldr	r3, [pc, #72]	; (800740c <SystemInit+0x60>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a11      	ldr	r2, [pc, #68]	; (800740c <SystemInit+0x60>)
 80073c6:	f043 0301 	orr.w	r3, r3, #1
 80073ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80073cc:	4b0f      	ldr	r3, [pc, #60]	; (800740c <SystemInit+0x60>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80073d2:	4b0e      	ldr	r3, [pc, #56]	; (800740c <SystemInit+0x60>)
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	490d      	ldr	r1, [pc, #52]	; (800740c <SystemInit+0x60>)
 80073d8:	4b0d      	ldr	r3, [pc, #52]	; (8007410 <SystemInit+0x64>)
 80073da:	4013      	ands	r3, r2
 80073dc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80073de:	4b0b      	ldr	r3, [pc, #44]	; (800740c <SystemInit+0x60>)
 80073e0:	4a0c      	ldr	r2, [pc, #48]	; (8007414 <SystemInit+0x68>)
 80073e2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80073e4:	4b09      	ldr	r3, [pc, #36]	; (800740c <SystemInit+0x60>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a08      	ldr	r2, [pc, #32]	; (800740c <SystemInit+0x60>)
 80073ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80073f0:	4b06      	ldr	r3, [pc, #24]	; (800740c <SystemInit+0x60>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80073f6:	4b04      	ldr	r3, [pc, #16]	; (8007408 <SystemInit+0x5c>)
 80073f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80073fc:	609a      	str	r2, [r3, #8]
#endif
}
 80073fe:	bf00      	nop
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	e000ed00 	.word	0xe000ed00
 800740c:	40023800 	.word	0x40023800
 8007410:	fef6ffff 	.word	0xfef6ffff
 8007414:	24003010 	.word	0x24003010

08007418 <MX_TIM3_Init>:
  }

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b08a      	sub	sp, #40	; 0x28
 800741c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800741e:	f107 031c 	add.w	r3, r7, #28
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	605a      	str	r2, [r3, #4]
 8007428:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800742a:	463b      	mov	r3, r7
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	605a      	str	r2, [r3, #4]
 8007432:	609a      	str	r2, [r3, #8]
 8007434:	60da      	str	r2, [r3, #12]
 8007436:	611a      	str	r2, [r3, #16]
 8007438:	615a      	str	r2, [r3, #20]
 800743a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800743c:	4b22      	ldr	r3, [pc, #136]	; (80074c8 <MX_TIM3_Init+0xb0>)
 800743e:	4a23      	ldr	r2, [pc, #140]	; (80074cc <MX_TIM3_Init+0xb4>)
 8007440:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8007442:	4b21      	ldr	r3, [pc, #132]	; (80074c8 <MX_TIM3_Init+0xb0>)
 8007444:	2247      	movs	r2, #71	; 0x47
 8007446:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007448:	4b1f      	ldr	r3, [pc, #124]	; (80074c8 <MX_TIM3_Init+0xb0>)
 800744a:	2200      	movs	r2, #0
 800744c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800744e:	4b1e      	ldr	r3, [pc, #120]	; (80074c8 <MX_TIM3_Init+0xb0>)
 8007450:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007454:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007456:	4b1c      	ldr	r3, [pc, #112]	; (80074c8 <MX_TIM3_Init+0xb0>)
 8007458:	2200      	movs	r2, #0
 800745a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800745c:	4b1a      	ldr	r3, [pc, #104]	; (80074c8 <MX_TIM3_Init+0xb0>)
 800745e:	2200      	movs	r2, #0
 8007460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007462:	4819      	ldr	r0, [pc, #100]	; (80074c8 <MX_TIM3_Init+0xb0>)
 8007464:	f7fd f93c 	bl	80046e0 <HAL_TIM_PWM_Init>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800746e:	f7ff fee7 	bl	8007240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007472:	2300      	movs	r3, #0
 8007474:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007476:	2300      	movs	r3, #0
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800747a:	f107 031c 	add.w	r3, r7, #28
 800747e:	4619      	mov	r1, r3
 8007480:	4811      	ldr	r0, [pc, #68]	; (80074c8 <MX_TIM3_Init+0xb0>)
 8007482:	f7fd ff2b 	bl	80052dc <HAL_TIMEx_MasterConfigSynchronization>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800748c:	f7ff fed8 	bl	8007240 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007490:	2360      	movs	r3, #96	; 0x60
 8007492:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8007494:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007498:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800749a:	2300      	movs	r3, #0
 800749c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800749e:	2300      	movs	r3, #0
 80074a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80074a2:	463b      	mov	r3, r7
 80074a4:	2200      	movs	r2, #0
 80074a6:	4619      	mov	r1, r3
 80074a8:	4807      	ldr	r0, [pc, #28]	; (80074c8 <MX_TIM3_Init+0xb0>)
 80074aa:	f7fd faa9 	bl	8004a00 <HAL_TIM_PWM_ConfigChannel>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80074b4:	f7ff fec4 	bl	8007240 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80074b8:	4803      	ldr	r0, [pc, #12]	; (80074c8 <MX_TIM3_Init+0xb0>)
 80074ba:	f000 f829 	bl	8007510 <HAL_TIM_MspPostInit>

}
 80074be:	bf00      	nop
 80074c0:	3728      	adds	r7, #40	; 0x28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	200003e4 	.word	0x200003e4
 80074cc:	40000400 	.word	0x40000400

080074d0 <HAL_TIM_PWM_MspInit>:
  /* USER CODE END TIM2_MspInit 1 */
  }
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a0a      	ldr	r2, [pc, #40]	; (8007508 <HAL_TIM_PWM_MspInit+0x38>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d10b      	bne.n	80074fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80074e2:	4b0a      	ldr	r3, [pc, #40]	; (800750c <HAL_TIM_PWM_MspInit+0x3c>)
 80074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e6:	4a09      	ldr	r2, [pc, #36]	; (800750c <HAL_TIM_PWM_MspInit+0x3c>)
 80074e8:	f043 0302 	orr.w	r3, r3, #2
 80074ec:	6413      	str	r3, [r2, #64]	; 0x40
 80074ee:	4b07      	ldr	r3, [pc, #28]	; (800750c <HAL_TIM_PWM_MspInit+0x3c>)
 80074f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80074fa:	bf00      	nop
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	40000400 	.word	0x40000400
 800750c:	40023800 	.word	0x40023800

08007510 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007518:	f107 030c 	add.w	r3, r7, #12
 800751c:	2200      	movs	r2, #0
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	605a      	str	r2, [r3, #4]
 8007522:	609a      	str	r2, [r3, #8]
 8007524:	60da      	str	r2, [r3, #12]
 8007526:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a11      	ldr	r2, [pc, #68]	; (8007574 <HAL_TIM_MspPostInit+0x64>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d11b      	bne.n	800756a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007532:	4b11      	ldr	r3, [pc, #68]	; (8007578 <HAL_TIM_MspPostInit+0x68>)
 8007534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007536:	4a10      	ldr	r2, [pc, #64]	; (8007578 <HAL_TIM_MspPostInit+0x68>)
 8007538:	f043 0301 	orr.w	r3, r3, #1
 800753c:	6313      	str	r3, [r2, #48]	; 0x30
 800753e:	4b0e      	ldr	r3, [pc, #56]	; (8007578 <HAL_TIM_MspPostInit+0x68>)
 8007540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	60bb      	str	r3, [r7, #8]
 8007548:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800754a:	2340      	movs	r3, #64	; 0x40
 800754c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800754e:	2302      	movs	r3, #2
 8007550:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007552:	2300      	movs	r3, #0
 8007554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007556:	2300      	movs	r3, #0
 8007558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800755a:	2302      	movs	r3, #2
 800755c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800755e:	f107 030c 	add.w	r3, r7, #12
 8007562:	4619      	mov	r1, r3
 8007564:	4805      	ldr	r0, [pc, #20]	; (800757c <HAL_TIM_MspPostInit+0x6c>)
 8007566:	f7fa fb4f 	bl	8001c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800756a:	bf00      	nop
 800756c:	3720      	adds	r7, #32
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	40000400 	.word	0x40000400
 8007578:	40023800 	.word	0x40023800
 800757c:	40020000 	.word	0x40020000

08007580 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8007584:	4b14      	ldr	r3, [pc, #80]	; (80075d8 <MX_USART3_UART_Init+0x58>)
 8007586:	4a15      	ldr	r2, [pc, #84]	; (80075dc <MX_USART3_UART_Init+0x5c>)
 8007588:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800758a:	4b13      	ldr	r3, [pc, #76]	; (80075d8 <MX_USART3_UART_Init+0x58>)
 800758c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007590:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007592:	4b11      	ldr	r3, [pc, #68]	; (80075d8 <MX_USART3_UART_Init+0x58>)
 8007594:	2200      	movs	r2, #0
 8007596:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007598:	4b0f      	ldr	r3, [pc, #60]	; (80075d8 <MX_USART3_UART_Init+0x58>)
 800759a:	2200      	movs	r2, #0
 800759c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800759e:	4b0e      	ldr	r3, [pc, #56]	; (80075d8 <MX_USART3_UART_Init+0x58>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80075a4:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <MX_USART3_UART_Init+0x58>)
 80075a6:	220c      	movs	r2, #12
 80075a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075aa:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <MX_USART3_UART_Init+0x58>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80075b0:	4b09      	ldr	r3, [pc, #36]	; (80075d8 <MX_USART3_UART_Init+0x58>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80075b6:	4b08      	ldr	r3, [pc, #32]	; (80075d8 <MX_USART3_UART_Init+0x58>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80075bc:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <MX_USART3_UART_Init+0x58>)
 80075be:	2200      	movs	r2, #0
 80075c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80075c2:	4805      	ldr	r0, [pc, #20]	; (80075d8 <MX_USART3_UART_Init+0x58>)
 80075c4:	f7fd ff04 	bl	80053d0 <HAL_UART_Init>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80075ce:	f7ff fe37 	bl	8007240 <Error_Handler>
  }

}
 80075d2:	bf00      	nop
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20000464 	.word	0x20000464
 80075dc:	40004800 	.word	0x40004800

080075e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b08a      	sub	sp, #40	; 0x28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075e8:	f107 0314 	add.w	r3, r7, #20
 80075ec:	2200      	movs	r2, #0
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	605a      	str	r2, [r3, #4]
 80075f2:	609a      	str	r2, [r3, #8]
 80075f4:	60da      	str	r2, [r3, #12]
 80075f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a1b      	ldr	r2, [pc, #108]	; (800766c <HAL_UART_MspInit+0x8c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d130      	bne.n	8007664 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007602:	4b1b      	ldr	r3, [pc, #108]	; (8007670 <HAL_UART_MspInit+0x90>)
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	4a1a      	ldr	r2, [pc, #104]	; (8007670 <HAL_UART_MspInit+0x90>)
 8007608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800760c:	6413      	str	r3, [r2, #64]	; 0x40
 800760e:	4b18      	ldr	r3, [pc, #96]	; (8007670 <HAL_UART_MspInit+0x90>)
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007616:	613b      	str	r3, [r7, #16]
 8007618:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800761a:	4b15      	ldr	r3, [pc, #84]	; (8007670 <HAL_UART_MspInit+0x90>)
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	4a14      	ldr	r2, [pc, #80]	; (8007670 <HAL_UART_MspInit+0x90>)
 8007620:	f043 0308 	orr.w	r3, r3, #8
 8007624:	6313      	str	r3, [r2, #48]	; 0x30
 8007626:	4b12      	ldr	r3, [pc, #72]	; (8007670 <HAL_UART_MspInit+0x90>)
 8007628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762a:	f003 0308 	and.w	r3, r3, #8
 800762e:	60fb      	str	r3, [r7, #12]
 8007630:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007632:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007638:	2302      	movs	r3, #2
 800763a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800763c:	2300      	movs	r3, #0
 800763e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007640:	2303      	movs	r3, #3
 8007642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007644:	2307      	movs	r3, #7
 8007646:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007648:	f107 0314 	add.w	r3, r7, #20
 800764c:	4619      	mov	r1, r3
 800764e:	4809      	ldr	r0, [pc, #36]	; (8007674 <HAL_UART_MspInit+0x94>)
 8007650:	f7fa fada 	bl	8001c08 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007654:	2200      	movs	r2, #0
 8007656:	2100      	movs	r1, #0
 8007658:	2027      	movs	r0, #39	; 0x27
 800765a:	f7f9 fe10 	bl	800127e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800765e:	2027      	movs	r0, #39	; 0x27
 8007660:	f7f9 fe29 	bl	80012b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8007664:	bf00      	nop
 8007666:	3728      	adds	r7, #40	; 0x28
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	40004800 	.word	0x40004800
 8007670:	40023800 	.word	0x40023800
 8007674:	40020c00 	.word	0x40020c00

08007678 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800767c:	4b14      	ldr	r3, [pc, #80]	; (80076d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800767e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007682:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007684:	4b12      	ldr	r3, [pc, #72]	; (80076d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007686:	2206      	movs	r2, #6
 8007688:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800768a:	4b11      	ldr	r3, [pc, #68]	; (80076d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800768c:	2202      	movs	r2, #2
 800768e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007690:	4b0f      	ldr	r3, [pc, #60]	; (80076d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007692:	2200      	movs	r2, #0
 8007694:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007696:	4b0e      	ldr	r3, [pc, #56]	; (80076d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007698:	2202      	movs	r2, #2
 800769a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800769c:	4b0c      	ldr	r3, [pc, #48]	; (80076d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800769e:	2201      	movs	r2, #1
 80076a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80076a2:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80076a8:	4b09      	ldr	r3, [pc, #36]	; (80076d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80076ae:	4b08      	ldr	r3, [pc, #32]	; (80076d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80076b0:	2201      	movs	r2, #1
 80076b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80076b4:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80076ba:	4805      	ldr	r0, [pc, #20]	; (80076d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80076bc:	f7fb fe72 	bl	80033a4 <HAL_PCD_Init>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d001      	beq.n	80076ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80076c6:	f7ff fdbb 	bl	8007240 <Error_Handler>
  }

}
 80076ca:	bf00      	nop
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	200004e4 	.word	0x200004e4

080076d4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08a      	sub	sp, #40	; 0x28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076dc:	f107 0314 	add.w	r3, r7, #20
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	605a      	str	r2, [r3, #4]
 80076e6:	609a      	str	r2, [r3, #8]
 80076e8:	60da      	str	r2, [r3, #12]
 80076ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076f4:	d141      	bne.n	800777a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076f6:	4b23      	ldr	r3, [pc, #140]	; (8007784 <HAL_PCD_MspInit+0xb0>)
 80076f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fa:	4a22      	ldr	r2, [pc, #136]	; (8007784 <HAL_PCD_MspInit+0xb0>)
 80076fc:	f043 0301 	orr.w	r3, r3, #1
 8007700:	6313      	str	r3, [r2, #48]	; 0x30
 8007702:	4b20      	ldr	r3, [pc, #128]	; (8007784 <HAL_PCD_MspInit+0xb0>)
 8007704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	613b      	str	r3, [r7, #16]
 800770c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800770e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8007712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007714:	2302      	movs	r3, #2
 8007716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007718:	2300      	movs	r3, #0
 800771a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800771c:	2303      	movs	r3, #3
 800771e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007720:	230a      	movs	r3, #10
 8007722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007724:	f107 0314 	add.w	r3, r7, #20
 8007728:	4619      	mov	r1, r3
 800772a:	4817      	ldr	r0, [pc, #92]	; (8007788 <HAL_PCD_MspInit+0xb4>)
 800772c:	f7fa fa6c 	bl	8001c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007736:	2300      	movs	r3, #0
 8007738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800773a:	2300      	movs	r3, #0
 800773c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800773e:	f107 0314 	add.w	r3, r7, #20
 8007742:	4619      	mov	r1, r3
 8007744:	4810      	ldr	r0, [pc, #64]	; (8007788 <HAL_PCD_MspInit+0xb4>)
 8007746:	f7fa fa5f 	bl	8001c08 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800774a:	4b0e      	ldr	r3, [pc, #56]	; (8007784 <HAL_PCD_MspInit+0xb0>)
 800774c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774e:	4a0d      	ldr	r2, [pc, #52]	; (8007784 <HAL_PCD_MspInit+0xb0>)
 8007750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007754:	6353      	str	r3, [r2, #52]	; 0x34
 8007756:	4b0b      	ldr	r3, [pc, #44]	; (8007784 <HAL_PCD_MspInit+0xb0>)
 8007758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4b08      	ldr	r3, [pc, #32]	; (8007784 <HAL_PCD_MspInit+0xb0>)
 8007764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007766:	4a07      	ldr	r2, [pc, #28]	; (8007784 <HAL_PCD_MspInit+0xb0>)
 8007768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800776c:	6453      	str	r3, [r2, #68]	; 0x44
 800776e:	4b05      	ldr	r3, [pc, #20]	; (8007784 <HAL_PCD_MspInit+0xb0>)
 8007770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007776:	60bb      	str	r3, [r7, #8]
 8007778:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800777a:	bf00      	nop
 800777c:	3728      	adds	r7, #40	; 0x28
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	40023800 	.word	0x40023800
 8007788:	40020000 	.word	0x40020000

0800778c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800778c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80077c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007790:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007792:	e003      	b.n	800779c <LoopCopyDataInit>

08007794 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007794:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007796:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007798:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800779a:	3104      	adds	r1, #4

0800779c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800779c:	480b      	ldr	r0, [pc, #44]	; (80077cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800779e:	4b0c      	ldr	r3, [pc, #48]	; (80077d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80077a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80077a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80077a4:	d3f6      	bcc.n	8007794 <CopyDataInit>
  ldr  r2, =_sbss
 80077a6:	4a0b      	ldr	r2, [pc, #44]	; (80077d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80077a8:	e002      	b.n	80077b0 <LoopFillZerobss>

080077aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80077aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80077ac:	f842 3b04 	str.w	r3, [r2], #4

080077b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80077b0:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80077b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80077b4:	d3f9      	bcc.n	80077aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80077b6:	f7ff fdf9 	bl	80073ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80077ba:	f000 f81b 	bl	80077f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80077be:	f7ff fb9d 	bl	8006efc <main>
  bx  lr    
 80077c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80077c4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80077c8:	0800b600 	.word	0x0800b600
  ldr  r0, =_sdata
 80077cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80077d0:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80077d4:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80077d8:	200008ec 	.word	0x200008ec

080077dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80077dc:	e7fe      	b.n	80077dc <ADC_IRQHandler>

080077de <atoi>:
 80077de:	220a      	movs	r2, #10
 80077e0:	2100      	movs	r1, #0
 80077e2:	f001 bd47 	b.w	8009274 <strtol>
	...

080077e8 <__errno>:
 80077e8:	4b01      	ldr	r3, [pc, #4]	; (80077f0 <__errno+0x8>)
 80077ea:	6818      	ldr	r0, [r3, #0]
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	20000010 	.word	0x20000010

080077f4 <__libc_init_array>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	4e0d      	ldr	r6, [pc, #52]	; (800782c <__libc_init_array+0x38>)
 80077f8:	4c0d      	ldr	r4, [pc, #52]	; (8007830 <__libc_init_array+0x3c>)
 80077fa:	1ba4      	subs	r4, r4, r6
 80077fc:	10a4      	asrs	r4, r4, #2
 80077fe:	2500      	movs	r5, #0
 8007800:	42a5      	cmp	r5, r4
 8007802:	d109      	bne.n	8007818 <__libc_init_array+0x24>
 8007804:	4e0b      	ldr	r6, [pc, #44]	; (8007834 <__libc_init_array+0x40>)
 8007806:	4c0c      	ldr	r4, [pc, #48]	; (8007838 <__libc_init_array+0x44>)
 8007808:	f003 fd6c 	bl	800b2e4 <_init>
 800780c:	1ba4      	subs	r4, r4, r6
 800780e:	10a4      	asrs	r4, r4, #2
 8007810:	2500      	movs	r5, #0
 8007812:	42a5      	cmp	r5, r4
 8007814:	d105      	bne.n	8007822 <__libc_init_array+0x2e>
 8007816:	bd70      	pop	{r4, r5, r6, pc}
 8007818:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800781c:	4798      	blx	r3
 800781e:	3501      	adds	r5, #1
 8007820:	e7ee      	b.n	8007800 <__libc_init_array+0xc>
 8007822:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007826:	4798      	blx	r3
 8007828:	3501      	adds	r5, #1
 800782a:	e7f2      	b.n	8007812 <__libc_init_array+0x1e>
 800782c:	0800b5f8 	.word	0x0800b5f8
 8007830:	0800b5f8 	.word	0x0800b5f8
 8007834:	0800b5f8 	.word	0x0800b5f8
 8007838:	0800b5fc 	.word	0x0800b5fc

0800783c <memset>:
 800783c:	4402      	add	r2, r0
 800783e:	4603      	mov	r3, r0
 8007840:	4293      	cmp	r3, r2
 8007842:	d100      	bne.n	8007846 <memset+0xa>
 8007844:	4770      	bx	lr
 8007846:	f803 1b01 	strb.w	r1, [r3], #1
 800784a:	e7f9      	b.n	8007840 <memset+0x4>

0800784c <__cvt>:
 800784c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007850:	ec55 4b10 	vmov	r4, r5, d0
 8007854:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007856:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800785a:	2d00      	cmp	r5, #0
 800785c:	460e      	mov	r6, r1
 800785e:	4691      	mov	r9, r2
 8007860:	4619      	mov	r1, r3
 8007862:	bfb8      	it	lt
 8007864:	4622      	movlt	r2, r4
 8007866:	462b      	mov	r3, r5
 8007868:	f027 0720 	bic.w	r7, r7, #32
 800786c:	bfbb      	ittet	lt
 800786e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007872:	461d      	movlt	r5, r3
 8007874:	2300      	movge	r3, #0
 8007876:	232d      	movlt	r3, #45	; 0x2d
 8007878:	bfb8      	it	lt
 800787a:	4614      	movlt	r4, r2
 800787c:	2f46      	cmp	r7, #70	; 0x46
 800787e:	700b      	strb	r3, [r1, #0]
 8007880:	d004      	beq.n	800788c <__cvt+0x40>
 8007882:	2f45      	cmp	r7, #69	; 0x45
 8007884:	d100      	bne.n	8007888 <__cvt+0x3c>
 8007886:	3601      	adds	r6, #1
 8007888:	2102      	movs	r1, #2
 800788a:	e000      	b.n	800788e <__cvt+0x42>
 800788c:	2103      	movs	r1, #3
 800788e:	ab03      	add	r3, sp, #12
 8007890:	9301      	str	r3, [sp, #4]
 8007892:	ab02      	add	r3, sp, #8
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	4632      	mov	r2, r6
 8007898:	4653      	mov	r3, sl
 800789a:	ec45 4b10 	vmov	d0, r4, r5
 800789e:	f001 fd8b 	bl	80093b8 <_dtoa_r>
 80078a2:	2f47      	cmp	r7, #71	; 0x47
 80078a4:	4680      	mov	r8, r0
 80078a6:	d102      	bne.n	80078ae <__cvt+0x62>
 80078a8:	f019 0f01 	tst.w	r9, #1
 80078ac:	d026      	beq.n	80078fc <__cvt+0xb0>
 80078ae:	2f46      	cmp	r7, #70	; 0x46
 80078b0:	eb08 0906 	add.w	r9, r8, r6
 80078b4:	d111      	bne.n	80078da <__cvt+0x8e>
 80078b6:	f898 3000 	ldrb.w	r3, [r8]
 80078ba:	2b30      	cmp	r3, #48	; 0x30
 80078bc:	d10a      	bne.n	80078d4 <__cvt+0x88>
 80078be:	2200      	movs	r2, #0
 80078c0:	2300      	movs	r3, #0
 80078c2:	4620      	mov	r0, r4
 80078c4:	4629      	mov	r1, r5
 80078c6:	f7f9 f91f 	bl	8000b08 <__aeabi_dcmpeq>
 80078ca:	b918      	cbnz	r0, 80078d4 <__cvt+0x88>
 80078cc:	f1c6 0601 	rsb	r6, r6, #1
 80078d0:	f8ca 6000 	str.w	r6, [sl]
 80078d4:	f8da 3000 	ldr.w	r3, [sl]
 80078d8:	4499      	add	r9, r3
 80078da:	2200      	movs	r2, #0
 80078dc:	2300      	movs	r3, #0
 80078de:	4620      	mov	r0, r4
 80078e0:	4629      	mov	r1, r5
 80078e2:	f7f9 f911 	bl	8000b08 <__aeabi_dcmpeq>
 80078e6:	b938      	cbnz	r0, 80078f8 <__cvt+0xac>
 80078e8:	2230      	movs	r2, #48	; 0x30
 80078ea:	9b03      	ldr	r3, [sp, #12]
 80078ec:	454b      	cmp	r3, r9
 80078ee:	d205      	bcs.n	80078fc <__cvt+0xb0>
 80078f0:	1c59      	adds	r1, r3, #1
 80078f2:	9103      	str	r1, [sp, #12]
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	e7f8      	b.n	80078ea <__cvt+0x9e>
 80078f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80078fc:	9b03      	ldr	r3, [sp, #12]
 80078fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007900:	eba3 0308 	sub.w	r3, r3, r8
 8007904:	4640      	mov	r0, r8
 8007906:	6013      	str	r3, [r2, #0]
 8007908:	b004      	add	sp, #16
 800790a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800790e <__exponent>:
 800790e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007910:	2900      	cmp	r1, #0
 8007912:	4604      	mov	r4, r0
 8007914:	bfba      	itte	lt
 8007916:	4249      	neglt	r1, r1
 8007918:	232d      	movlt	r3, #45	; 0x2d
 800791a:	232b      	movge	r3, #43	; 0x2b
 800791c:	2909      	cmp	r1, #9
 800791e:	f804 2b02 	strb.w	r2, [r4], #2
 8007922:	7043      	strb	r3, [r0, #1]
 8007924:	dd20      	ble.n	8007968 <__exponent+0x5a>
 8007926:	f10d 0307 	add.w	r3, sp, #7
 800792a:	461f      	mov	r7, r3
 800792c:	260a      	movs	r6, #10
 800792e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007932:	fb06 1115 	mls	r1, r6, r5, r1
 8007936:	3130      	adds	r1, #48	; 0x30
 8007938:	2d09      	cmp	r5, #9
 800793a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800793e:	f103 32ff 	add.w	r2, r3, #4294967295
 8007942:	4629      	mov	r1, r5
 8007944:	dc09      	bgt.n	800795a <__exponent+0x4c>
 8007946:	3130      	adds	r1, #48	; 0x30
 8007948:	3b02      	subs	r3, #2
 800794a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800794e:	42bb      	cmp	r3, r7
 8007950:	4622      	mov	r2, r4
 8007952:	d304      	bcc.n	800795e <__exponent+0x50>
 8007954:	1a10      	subs	r0, r2, r0
 8007956:	b003      	add	sp, #12
 8007958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800795a:	4613      	mov	r3, r2
 800795c:	e7e7      	b.n	800792e <__exponent+0x20>
 800795e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007962:	f804 2b01 	strb.w	r2, [r4], #1
 8007966:	e7f2      	b.n	800794e <__exponent+0x40>
 8007968:	2330      	movs	r3, #48	; 0x30
 800796a:	4419      	add	r1, r3
 800796c:	7083      	strb	r3, [r0, #2]
 800796e:	1d02      	adds	r2, r0, #4
 8007970:	70c1      	strb	r1, [r0, #3]
 8007972:	e7ef      	b.n	8007954 <__exponent+0x46>

08007974 <_printf_float>:
 8007974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007978:	b08d      	sub	sp, #52	; 0x34
 800797a:	460c      	mov	r4, r1
 800797c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007980:	4616      	mov	r6, r2
 8007982:	461f      	mov	r7, r3
 8007984:	4605      	mov	r5, r0
 8007986:	f002 fdfb 	bl	800a580 <_localeconv_r>
 800798a:	6803      	ldr	r3, [r0, #0]
 800798c:	9304      	str	r3, [sp, #16]
 800798e:	4618      	mov	r0, r3
 8007990:	f7f8 fc3e 	bl	8000210 <strlen>
 8007994:	2300      	movs	r3, #0
 8007996:	930a      	str	r3, [sp, #40]	; 0x28
 8007998:	f8d8 3000 	ldr.w	r3, [r8]
 800799c:	9005      	str	r0, [sp, #20]
 800799e:	3307      	adds	r3, #7
 80079a0:	f023 0307 	bic.w	r3, r3, #7
 80079a4:	f103 0208 	add.w	r2, r3, #8
 80079a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80079ac:	f8d4 b000 	ldr.w	fp, [r4]
 80079b0:	f8c8 2000 	str.w	r2, [r8]
 80079b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80079bc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80079c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079c4:	9307      	str	r3, [sp, #28]
 80079c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80079ca:	f04f 32ff 	mov.w	r2, #4294967295
 80079ce:	4ba7      	ldr	r3, [pc, #668]	; (8007c6c <_printf_float+0x2f8>)
 80079d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079d4:	f7f9 f8ca 	bl	8000b6c <__aeabi_dcmpun>
 80079d8:	bb70      	cbnz	r0, 8007a38 <_printf_float+0xc4>
 80079da:	f04f 32ff 	mov.w	r2, #4294967295
 80079de:	4ba3      	ldr	r3, [pc, #652]	; (8007c6c <_printf_float+0x2f8>)
 80079e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079e4:	f7f9 f8a4 	bl	8000b30 <__aeabi_dcmple>
 80079e8:	bb30      	cbnz	r0, 8007a38 <_printf_float+0xc4>
 80079ea:	2200      	movs	r2, #0
 80079ec:	2300      	movs	r3, #0
 80079ee:	4640      	mov	r0, r8
 80079f0:	4649      	mov	r1, r9
 80079f2:	f7f9 f893 	bl	8000b1c <__aeabi_dcmplt>
 80079f6:	b110      	cbz	r0, 80079fe <_printf_float+0x8a>
 80079f8:	232d      	movs	r3, #45	; 0x2d
 80079fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079fe:	4a9c      	ldr	r2, [pc, #624]	; (8007c70 <_printf_float+0x2fc>)
 8007a00:	4b9c      	ldr	r3, [pc, #624]	; (8007c74 <_printf_float+0x300>)
 8007a02:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007a06:	bf8c      	ite	hi
 8007a08:	4690      	movhi	r8, r2
 8007a0a:	4698      	movls	r8, r3
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	f02b 0204 	bic.w	r2, fp, #4
 8007a12:	6123      	str	r3, [r4, #16]
 8007a14:	6022      	str	r2, [r4, #0]
 8007a16:	f04f 0900 	mov.w	r9, #0
 8007a1a:	9700      	str	r7, [sp, #0]
 8007a1c:	4633      	mov	r3, r6
 8007a1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a20:	4621      	mov	r1, r4
 8007a22:	4628      	mov	r0, r5
 8007a24:	f000 f9e6 	bl	8007df4 <_printf_common>
 8007a28:	3001      	adds	r0, #1
 8007a2a:	f040 808d 	bne.w	8007b48 <_printf_float+0x1d4>
 8007a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a32:	b00d      	add	sp, #52	; 0x34
 8007a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a38:	4642      	mov	r2, r8
 8007a3a:	464b      	mov	r3, r9
 8007a3c:	4640      	mov	r0, r8
 8007a3e:	4649      	mov	r1, r9
 8007a40:	f7f9 f894 	bl	8000b6c <__aeabi_dcmpun>
 8007a44:	b110      	cbz	r0, 8007a4c <_printf_float+0xd8>
 8007a46:	4a8c      	ldr	r2, [pc, #560]	; (8007c78 <_printf_float+0x304>)
 8007a48:	4b8c      	ldr	r3, [pc, #560]	; (8007c7c <_printf_float+0x308>)
 8007a4a:	e7da      	b.n	8007a02 <_printf_float+0x8e>
 8007a4c:	6861      	ldr	r1, [r4, #4]
 8007a4e:	1c4b      	adds	r3, r1, #1
 8007a50:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007a54:	a80a      	add	r0, sp, #40	; 0x28
 8007a56:	d13e      	bne.n	8007ad6 <_printf_float+0x162>
 8007a58:	2306      	movs	r3, #6
 8007a5a:	6063      	str	r3, [r4, #4]
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007a62:	ab09      	add	r3, sp, #36	; 0x24
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	ec49 8b10 	vmov	d0, r8, r9
 8007a6a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a6e:	6022      	str	r2, [r4, #0]
 8007a70:	f8cd a004 	str.w	sl, [sp, #4]
 8007a74:	6861      	ldr	r1, [r4, #4]
 8007a76:	4628      	mov	r0, r5
 8007a78:	f7ff fee8 	bl	800784c <__cvt>
 8007a7c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007a80:	2b47      	cmp	r3, #71	; 0x47
 8007a82:	4680      	mov	r8, r0
 8007a84:	d109      	bne.n	8007a9a <_printf_float+0x126>
 8007a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a88:	1cd8      	adds	r0, r3, #3
 8007a8a:	db02      	blt.n	8007a92 <_printf_float+0x11e>
 8007a8c:	6862      	ldr	r2, [r4, #4]
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	dd47      	ble.n	8007b22 <_printf_float+0x1ae>
 8007a92:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a96:	fa5f fa8a 	uxtb.w	sl, sl
 8007a9a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007a9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007aa0:	d824      	bhi.n	8007aec <_printf_float+0x178>
 8007aa2:	3901      	subs	r1, #1
 8007aa4:	4652      	mov	r2, sl
 8007aa6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007aaa:	9109      	str	r1, [sp, #36]	; 0x24
 8007aac:	f7ff ff2f 	bl	800790e <__exponent>
 8007ab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ab2:	1813      	adds	r3, r2, r0
 8007ab4:	2a01      	cmp	r2, #1
 8007ab6:	4681      	mov	r9, r0
 8007ab8:	6123      	str	r3, [r4, #16]
 8007aba:	dc02      	bgt.n	8007ac2 <_printf_float+0x14e>
 8007abc:	6822      	ldr	r2, [r4, #0]
 8007abe:	07d1      	lsls	r1, r2, #31
 8007ac0:	d501      	bpl.n	8007ac6 <_printf_float+0x152>
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	6123      	str	r3, [r4, #16]
 8007ac6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d0a5      	beq.n	8007a1a <_printf_float+0xa6>
 8007ace:	232d      	movs	r3, #45	; 0x2d
 8007ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ad4:	e7a1      	b.n	8007a1a <_printf_float+0xa6>
 8007ad6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007ada:	f000 8177 	beq.w	8007dcc <_printf_float+0x458>
 8007ade:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007ae2:	d1bb      	bne.n	8007a5c <_printf_float+0xe8>
 8007ae4:	2900      	cmp	r1, #0
 8007ae6:	d1b9      	bne.n	8007a5c <_printf_float+0xe8>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e7b6      	b.n	8007a5a <_printf_float+0xe6>
 8007aec:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007af0:	d119      	bne.n	8007b26 <_printf_float+0x1b2>
 8007af2:	2900      	cmp	r1, #0
 8007af4:	6863      	ldr	r3, [r4, #4]
 8007af6:	dd0c      	ble.n	8007b12 <_printf_float+0x19e>
 8007af8:	6121      	str	r1, [r4, #16]
 8007afa:	b913      	cbnz	r3, 8007b02 <_printf_float+0x18e>
 8007afc:	6822      	ldr	r2, [r4, #0]
 8007afe:	07d2      	lsls	r2, r2, #31
 8007b00:	d502      	bpl.n	8007b08 <_printf_float+0x194>
 8007b02:	3301      	adds	r3, #1
 8007b04:	440b      	add	r3, r1
 8007b06:	6123      	str	r3, [r4, #16]
 8007b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b0a:	65a3      	str	r3, [r4, #88]	; 0x58
 8007b0c:	f04f 0900 	mov.w	r9, #0
 8007b10:	e7d9      	b.n	8007ac6 <_printf_float+0x152>
 8007b12:	b913      	cbnz	r3, 8007b1a <_printf_float+0x1a6>
 8007b14:	6822      	ldr	r2, [r4, #0]
 8007b16:	07d0      	lsls	r0, r2, #31
 8007b18:	d501      	bpl.n	8007b1e <_printf_float+0x1aa>
 8007b1a:	3302      	adds	r3, #2
 8007b1c:	e7f3      	b.n	8007b06 <_printf_float+0x192>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e7f1      	b.n	8007b06 <_printf_float+0x192>
 8007b22:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007b26:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	db05      	blt.n	8007b3a <_printf_float+0x1c6>
 8007b2e:	6822      	ldr	r2, [r4, #0]
 8007b30:	6123      	str	r3, [r4, #16]
 8007b32:	07d1      	lsls	r1, r2, #31
 8007b34:	d5e8      	bpl.n	8007b08 <_printf_float+0x194>
 8007b36:	3301      	adds	r3, #1
 8007b38:	e7e5      	b.n	8007b06 <_printf_float+0x192>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	bfd4      	ite	le
 8007b3e:	f1c3 0302 	rsble	r3, r3, #2
 8007b42:	2301      	movgt	r3, #1
 8007b44:	4413      	add	r3, r2
 8007b46:	e7de      	b.n	8007b06 <_printf_float+0x192>
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	055a      	lsls	r2, r3, #21
 8007b4c:	d407      	bmi.n	8007b5e <_printf_float+0x1ea>
 8007b4e:	6923      	ldr	r3, [r4, #16]
 8007b50:	4642      	mov	r2, r8
 8007b52:	4631      	mov	r1, r6
 8007b54:	4628      	mov	r0, r5
 8007b56:	47b8      	blx	r7
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d12b      	bne.n	8007bb4 <_printf_float+0x240>
 8007b5c:	e767      	b.n	8007a2e <_printf_float+0xba>
 8007b5e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007b62:	f240 80dc 	bls.w	8007d1e <_printf_float+0x3aa>
 8007b66:	2200      	movs	r2, #0
 8007b68:	2300      	movs	r3, #0
 8007b6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b6e:	f7f8 ffcb 	bl	8000b08 <__aeabi_dcmpeq>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d033      	beq.n	8007bde <_printf_float+0x26a>
 8007b76:	2301      	movs	r3, #1
 8007b78:	4a41      	ldr	r2, [pc, #260]	; (8007c80 <_printf_float+0x30c>)
 8007b7a:	4631      	mov	r1, r6
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	47b8      	blx	r7
 8007b80:	3001      	adds	r0, #1
 8007b82:	f43f af54 	beq.w	8007a2e <_printf_float+0xba>
 8007b86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	db02      	blt.n	8007b94 <_printf_float+0x220>
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	07d8      	lsls	r0, r3, #31
 8007b92:	d50f      	bpl.n	8007bb4 <_printf_float+0x240>
 8007b94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b98:	4631      	mov	r1, r6
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	47b8      	blx	r7
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	f43f af45 	beq.w	8007a2e <_printf_float+0xba>
 8007ba4:	f04f 0800 	mov.w	r8, #0
 8007ba8:	f104 091a 	add.w	r9, r4, #26
 8007bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	4543      	cmp	r3, r8
 8007bb2:	dc09      	bgt.n	8007bc8 <_printf_float+0x254>
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	079b      	lsls	r3, r3, #30
 8007bb8:	f100 8103 	bmi.w	8007dc2 <_printf_float+0x44e>
 8007bbc:	68e0      	ldr	r0, [r4, #12]
 8007bbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bc0:	4298      	cmp	r0, r3
 8007bc2:	bfb8      	it	lt
 8007bc4:	4618      	movlt	r0, r3
 8007bc6:	e734      	b.n	8007a32 <_printf_float+0xbe>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	464a      	mov	r2, r9
 8007bcc:	4631      	mov	r1, r6
 8007bce:	4628      	mov	r0, r5
 8007bd0:	47b8      	blx	r7
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	f43f af2b 	beq.w	8007a2e <_printf_float+0xba>
 8007bd8:	f108 0801 	add.w	r8, r8, #1
 8007bdc:	e7e6      	b.n	8007bac <_printf_float+0x238>
 8007bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	dc2b      	bgt.n	8007c3c <_printf_float+0x2c8>
 8007be4:	2301      	movs	r3, #1
 8007be6:	4a26      	ldr	r2, [pc, #152]	; (8007c80 <_printf_float+0x30c>)
 8007be8:	4631      	mov	r1, r6
 8007bea:	4628      	mov	r0, r5
 8007bec:	47b8      	blx	r7
 8007bee:	3001      	adds	r0, #1
 8007bf0:	f43f af1d 	beq.w	8007a2e <_printf_float+0xba>
 8007bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf6:	b923      	cbnz	r3, 8007c02 <_printf_float+0x28e>
 8007bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bfa:	b913      	cbnz	r3, 8007c02 <_printf_float+0x28e>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	07d9      	lsls	r1, r3, #31
 8007c00:	d5d8      	bpl.n	8007bb4 <_printf_float+0x240>
 8007c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c06:	4631      	mov	r1, r6
 8007c08:	4628      	mov	r0, r5
 8007c0a:	47b8      	blx	r7
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	f43f af0e 	beq.w	8007a2e <_printf_float+0xba>
 8007c12:	f04f 0900 	mov.w	r9, #0
 8007c16:	f104 0a1a 	add.w	sl, r4, #26
 8007c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c1c:	425b      	negs	r3, r3
 8007c1e:	454b      	cmp	r3, r9
 8007c20:	dc01      	bgt.n	8007c26 <_printf_float+0x2b2>
 8007c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c24:	e794      	b.n	8007b50 <_printf_float+0x1dc>
 8007c26:	2301      	movs	r3, #1
 8007c28:	4652      	mov	r2, sl
 8007c2a:	4631      	mov	r1, r6
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	47b8      	blx	r7
 8007c30:	3001      	adds	r0, #1
 8007c32:	f43f aefc 	beq.w	8007a2e <_printf_float+0xba>
 8007c36:	f109 0901 	add.w	r9, r9, #1
 8007c3a:	e7ee      	b.n	8007c1a <_printf_float+0x2a6>
 8007c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c40:	429a      	cmp	r2, r3
 8007c42:	bfa8      	it	ge
 8007c44:	461a      	movge	r2, r3
 8007c46:	2a00      	cmp	r2, #0
 8007c48:	4691      	mov	r9, r2
 8007c4a:	dd07      	ble.n	8007c5c <_printf_float+0x2e8>
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	4631      	mov	r1, r6
 8007c50:	4642      	mov	r2, r8
 8007c52:	4628      	mov	r0, r5
 8007c54:	47b8      	blx	r7
 8007c56:	3001      	adds	r0, #1
 8007c58:	f43f aee9 	beq.w	8007a2e <_printf_float+0xba>
 8007c5c:	f104 031a 	add.w	r3, r4, #26
 8007c60:	f04f 0b00 	mov.w	fp, #0
 8007c64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c68:	9306      	str	r3, [sp, #24]
 8007c6a:	e015      	b.n	8007c98 <_printf_float+0x324>
 8007c6c:	7fefffff 	.word	0x7fefffff
 8007c70:	0800b33c 	.word	0x0800b33c
 8007c74:	0800b338 	.word	0x0800b338
 8007c78:	0800b344 	.word	0x0800b344
 8007c7c:	0800b340 	.word	0x0800b340
 8007c80:	0800b348 	.word	0x0800b348
 8007c84:	2301      	movs	r3, #1
 8007c86:	9a06      	ldr	r2, [sp, #24]
 8007c88:	4631      	mov	r1, r6
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	47b8      	blx	r7
 8007c8e:	3001      	adds	r0, #1
 8007c90:	f43f aecd 	beq.w	8007a2e <_printf_float+0xba>
 8007c94:	f10b 0b01 	add.w	fp, fp, #1
 8007c98:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007c9c:	ebaa 0309 	sub.w	r3, sl, r9
 8007ca0:	455b      	cmp	r3, fp
 8007ca2:	dcef      	bgt.n	8007c84 <_printf_float+0x310>
 8007ca4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	44d0      	add	r8, sl
 8007cac:	db15      	blt.n	8007cda <_printf_float+0x366>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	07da      	lsls	r2, r3, #31
 8007cb2:	d412      	bmi.n	8007cda <_printf_float+0x366>
 8007cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cb8:	eba3 020a 	sub.w	r2, r3, sl
 8007cbc:	eba3 0a01 	sub.w	sl, r3, r1
 8007cc0:	4592      	cmp	sl, r2
 8007cc2:	bfa8      	it	ge
 8007cc4:	4692      	movge	sl, r2
 8007cc6:	f1ba 0f00 	cmp.w	sl, #0
 8007cca:	dc0e      	bgt.n	8007cea <_printf_float+0x376>
 8007ccc:	f04f 0800 	mov.w	r8, #0
 8007cd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cd4:	f104 091a 	add.w	r9, r4, #26
 8007cd8:	e019      	b.n	8007d0e <_printf_float+0x39a>
 8007cda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cde:	4631      	mov	r1, r6
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	47b8      	blx	r7
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d1e5      	bne.n	8007cb4 <_printf_float+0x340>
 8007ce8:	e6a1      	b.n	8007a2e <_printf_float+0xba>
 8007cea:	4653      	mov	r3, sl
 8007cec:	4642      	mov	r2, r8
 8007cee:	4631      	mov	r1, r6
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	47b8      	blx	r7
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d1e9      	bne.n	8007ccc <_printf_float+0x358>
 8007cf8:	e699      	b.n	8007a2e <_printf_float+0xba>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	464a      	mov	r2, r9
 8007cfe:	4631      	mov	r1, r6
 8007d00:	4628      	mov	r0, r5
 8007d02:	47b8      	blx	r7
 8007d04:	3001      	adds	r0, #1
 8007d06:	f43f ae92 	beq.w	8007a2e <_printf_float+0xba>
 8007d0a:	f108 0801 	add.w	r8, r8, #1
 8007d0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d12:	1a9b      	subs	r3, r3, r2
 8007d14:	eba3 030a 	sub.w	r3, r3, sl
 8007d18:	4543      	cmp	r3, r8
 8007d1a:	dcee      	bgt.n	8007cfa <_printf_float+0x386>
 8007d1c:	e74a      	b.n	8007bb4 <_printf_float+0x240>
 8007d1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d20:	2a01      	cmp	r2, #1
 8007d22:	dc01      	bgt.n	8007d28 <_printf_float+0x3b4>
 8007d24:	07db      	lsls	r3, r3, #31
 8007d26:	d53a      	bpl.n	8007d9e <_printf_float+0x42a>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	4642      	mov	r2, r8
 8007d2c:	4631      	mov	r1, r6
 8007d2e:	4628      	mov	r0, r5
 8007d30:	47b8      	blx	r7
 8007d32:	3001      	adds	r0, #1
 8007d34:	f43f ae7b 	beq.w	8007a2e <_printf_float+0xba>
 8007d38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d3c:	4631      	mov	r1, r6
 8007d3e:	4628      	mov	r0, r5
 8007d40:	47b8      	blx	r7
 8007d42:	3001      	adds	r0, #1
 8007d44:	f108 0801 	add.w	r8, r8, #1
 8007d48:	f43f ae71 	beq.w	8007a2e <_printf_float+0xba>
 8007d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f103 3aff 	add.w	sl, r3, #4294967295
 8007d54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f7f8 fed5 	bl	8000b08 <__aeabi_dcmpeq>
 8007d5e:	b9c8      	cbnz	r0, 8007d94 <_printf_float+0x420>
 8007d60:	4653      	mov	r3, sl
 8007d62:	4642      	mov	r2, r8
 8007d64:	4631      	mov	r1, r6
 8007d66:	4628      	mov	r0, r5
 8007d68:	47b8      	blx	r7
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d10e      	bne.n	8007d8c <_printf_float+0x418>
 8007d6e:	e65e      	b.n	8007a2e <_printf_float+0xba>
 8007d70:	2301      	movs	r3, #1
 8007d72:	4652      	mov	r2, sl
 8007d74:	4631      	mov	r1, r6
 8007d76:	4628      	mov	r0, r5
 8007d78:	47b8      	blx	r7
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	f43f ae57 	beq.w	8007a2e <_printf_float+0xba>
 8007d80:	f108 0801 	add.w	r8, r8, #1
 8007d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d86:	3b01      	subs	r3, #1
 8007d88:	4543      	cmp	r3, r8
 8007d8a:	dcf1      	bgt.n	8007d70 <_printf_float+0x3fc>
 8007d8c:	464b      	mov	r3, r9
 8007d8e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d92:	e6de      	b.n	8007b52 <_printf_float+0x1de>
 8007d94:	f04f 0800 	mov.w	r8, #0
 8007d98:	f104 0a1a 	add.w	sl, r4, #26
 8007d9c:	e7f2      	b.n	8007d84 <_printf_float+0x410>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e7df      	b.n	8007d62 <_printf_float+0x3ee>
 8007da2:	2301      	movs	r3, #1
 8007da4:	464a      	mov	r2, r9
 8007da6:	4631      	mov	r1, r6
 8007da8:	4628      	mov	r0, r5
 8007daa:	47b8      	blx	r7
 8007dac:	3001      	adds	r0, #1
 8007dae:	f43f ae3e 	beq.w	8007a2e <_printf_float+0xba>
 8007db2:	f108 0801 	add.w	r8, r8, #1
 8007db6:	68e3      	ldr	r3, [r4, #12]
 8007db8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007dba:	1a9b      	subs	r3, r3, r2
 8007dbc:	4543      	cmp	r3, r8
 8007dbe:	dcf0      	bgt.n	8007da2 <_printf_float+0x42e>
 8007dc0:	e6fc      	b.n	8007bbc <_printf_float+0x248>
 8007dc2:	f04f 0800 	mov.w	r8, #0
 8007dc6:	f104 0919 	add.w	r9, r4, #25
 8007dca:	e7f4      	b.n	8007db6 <_printf_float+0x442>
 8007dcc:	2900      	cmp	r1, #0
 8007dce:	f43f ae8b 	beq.w	8007ae8 <_printf_float+0x174>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007dd8:	ab09      	add	r3, sp, #36	; 0x24
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	ec49 8b10 	vmov	d0, r8, r9
 8007de0:	6022      	str	r2, [r4, #0]
 8007de2:	f8cd a004 	str.w	sl, [sp, #4]
 8007de6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007dea:	4628      	mov	r0, r5
 8007dec:	f7ff fd2e 	bl	800784c <__cvt>
 8007df0:	4680      	mov	r8, r0
 8007df2:	e648      	b.n	8007a86 <_printf_float+0x112>

08007df4 <_printf_common>:
 8007df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007df8:	4691      	mov	r9, r2
 8007dfa:	461f      	mov	r7, r3
 8007dfc:	688a      	ldr	r2, [r1, #8]
 8007dfe:	690b      	ldr	r3, [r1, #16]
 8007e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e04:	4293      	cmp	r3, r2
 8007e06:	bfb8      	it	lt
 8007e08:	4613      	movlt	r3, r2
 8007e0a:	f8c9 3000 	str.w	r3, [r9]
 8007e0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e12:	4606      	mov	r6, r0
 8007e14:	460c      	mov	r4, r1
 8007e16:	b112      	cbz	r2, 8007e1e <_printf_common+0x2a>
 8007e18:	3301      	adds	r3, #1
 8007e1a:	f8c9 3000 	str.w	r3, [r9]
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	0699      	lsls	r1, r3, #26
 8007e22:	bf42      	ittt	mi
 8007e24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e28:	3302      	addmi	r3, #2
 8007e2a:	f8c9 3000 	strmi.w	r3, [r9]
 8007e2e:	6825      	ldr	r5, [r4, #0]
 8007e30:	f015 0506 	ands.w	r5, r5, #6
 8007e34:	d107      	bne.n	8007e46 <_printf_common+0x52>
 8007e36:	f104 0a19 	add.w	sl, r4, #25
 8007e3a:	68e3      	ldr	r3, [r4, #12]
 8007e3c:	f8d9 2000 	ldr.w	r2, [r9]
 8007e40:	1a9b      	subs	r3, r3, r2
 8007e42:	42ab      	cmp	r3, r5
 8007e44:	dc28      	bgt.n	8007e98 <_printf_common+0xa4>
 8007e46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007e4a:	6822      	ldr	r2, [r4, #0]
 8007e4c:	3300      	adds	r3, #0
 8007e4e:	bf18      	it	ne
 8007e50:	2301      	movne	r3, #1
 8007e52:	0692      	lsls	r2, r2, #26
 8007e54:	d42d      	bmi.n	8007eb2 <_printf_common+0xbe>
 8007e56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e5a:	4639      	mov	r1, r7
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	47c0      	blx	r8
 8007e60:	3001      	adds	r0, #1
 8007e62:	d020      	beq.n	8007ea6 <_printf_common+0xb2>
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	68e5      	ldr	r5, [r4, #12]
 8007e68:	f8d9 2000 	ldr.w	r2, [r9]
 8007e6c:	f003 0306 	and.w	r3, r3, #6
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	bf08      	it	eq
 8007e74:	1aad      	subeq	r5, r5, r2
 8007e76:	68a3      	ldr	r3, [r4, #8]
 8007e78:	6922      	ldr	r2, [r4, #16]
 8007e7a:	bf0c      	ite	eq
 8007e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e80:	2500      	movne	r5, #0
 8007e82:	4293      	cmp	r3, r2
 8007e84:	bfc4      	itt	gt
 8007e86:	1a9b      	subgt	r3, r3, r2
 8007e88:	18ed      	addgt	r5, r5, r3
 8007e8a:	f04f 0900 	mov.w	r9, #0
 8007e8e:	341a      	adds	r4, #26
 8007e90:	454d      	cmp	r5, r9
 8007e92:	d11a      	bne.n	8007eca <_printf_common+0xd6>
 8007e94:	2000      	movs	r0, #0
 8007e96:	e008      	b.n	8007eaa <_printf_common+0xb6>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	4652      	mov	r2, sl
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	47c0      	blx	r8
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	d103      	bne.n	8007eae <_printf_common+0xba>
 8007ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eae:	3501      	adds	r5, #1
 8007eb0:	e7c3      	b.n	8007e3a <_printf_common+0x46>
 8007eb2:	18e1      	adds	r1, r4, r3
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	2030      	movs	r0, #48	; 0x30
 8007eb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ebc:	4422      	add	r2, r4
 8007ebe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ec2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ec6:	3302      	adds	r3, #2
 8007ec8:	e7c5      	b.n	8007e56 <_printf_common+0x62>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	4622      	mov	r2, r4
 8007ece:	4639      	mov	r1, r7
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	47c0      	blx	r8
 8007ed4:	3001      	adds	r0, #1
 8007ed6:	d0e6      	beq.n	8007ea6 <_printf_common+0xb2>
 8007ed8:	f109 0901 	add.w	r9, r9, #1
 8007edc:	e7d8      	b.n	8007e90 <_printf_common+0x9c>
	...

08007ee0 <_printf_i>:
 8007ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ee4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ee8:	460c      	mov	r4, r1
 8007eea:	7e09      	ldrb	r1, [r1, #24]
 8007eec:	b085      	sub	sp, #20
 8007eee:	296e      	cmp	r1, #110	; 0x6e
 8007ef0:	4617      	mov	r7, r2
 8007ef2:	4606      	mov	r6, r0
 8007ef4:	4698      	mov	r8, r3
 8007ef6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ef8:	f000 80b3 	beq.w	8008062 <_printf_i+0x182>
 8007efc:	d822      	bhi.n	8007f44 <_printf_i+0x64>
 8007efe:	2963      	cmp	r1, #99	; 0x63
 8007f00:	d036      	beq.n	8007f70 <_printf_i+0x90>
 8007f02:	d80a      	bhi.n	8007f1a <_printf_i+0x3a>
 8007f04:	2900      	cmp	r1, #0
 8007f06:	f000 80b9 	beq.w	800807c <_printf_i+0x19c>
 8007f0a:	2958      	cmp	r1, #88	; 0x58
 8007f0c:	f000 8083 	beq.w	8008016 <_printf_i+0x136>
 8007f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007f18:	e032      	b.n	8007f80 <_printf_i+0xa0>
 8007f1a:	2964      	cmp	r1, #100	; 0x64
 8007f1c:	d001      	beq.n	8007f22 <_printf_i+0x42>
 8007f1e:	2969      	cmp	r1, #105	; 0x69
 8007f20:	d1f6      	bne.n	8007f10 <_printf_i+0x30>
 8007f22:	6820      	ldr	r0, [r4, #0]
 8007f24:	6813      	ldr	r3, [r2, #0]
 8007f26:	0605      	lsls	r5, r0, #24
 8007f28:	f103 0104 	add.w	r1, r3, #4
 8007f2c:	d52a      	bpl.n	8007f84 <_printf_i+0xa4>
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6011      	str	r1, [r2, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	da03      	bge.n	8007f3e <_printf_i+0x5e>
 8007f36:	222d      	movs	r2, #45	; 0x2d
 8007f38:	425b      	negs	r3, r3
 8007f3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007f3e:	486f      	ldr	r0, [pc, #444]	; (80080fc <_printf_i+0x21c>)
 8007f40:	220a      	movs	r2, #10
 8007f42:	e039      	b.n	8007fb8 <_printf_i+0xd8>
 8007f44:	2973      	cmp	r1, #115	; 0x73
 8007f46:	f000 809d 	beq.w	8008084 <_printf_i+0x1a4>
 8007f4a:	d808      	bhi.n	8007f5e <_printf_i+0x7e>
 8007f4c:	296f      	cmp	r1, #111	; 0x6f
 8007f4e:	d020      	beq.n	8007f92 <_printf_i+0xb2>
 8007f50:	2970      	cmp	r1, #112	; 0x70
 8007f52:	d1dd      	bne.n	8007f10 <_printf_i+0x30>
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	f043 0320 	orr.w	r3, r3, #32
 8007f5a:	6023      	str	r3, [r4, #0]
 8007f5c:	e003      	b.n	8007f66 <_printf_i+0x86>
 8007f5e:	2975      	cmp	r1, #117	; 0x75
 8007f60:	d017      	beq.n	8007f92 <_printf_i+0xb2>
 8007f62:	2978      	cmp	r1, #120	; 0x78
 8007f64:	d1d4      	bne.n	8007f10 <_printf_i+0x30>
 8007f66:	2378      	movs	r3, #120	; 0x78
 8007f68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f6c:	4864      	ldr	r0, [pc, #400]	; (8008100 <_printf_i+0x220>)
 8007f6e:	e055      	b.n	800801c <_printf_i+0x13c>
 8007f70:	6813      	ldr	r3, [r2, #0]
 8007f72:	1d19      	adds	r1, r3, #4
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6011      	str	r1, [r2, #0]
 8007f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f80:	2301      	movs	r3, #1
 8007f82:	e08c      	b.n	800809e <_printf_i+0x1be>
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	6011      	str	r1, [r2, #0]
 8007f88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f8c:	bf18      	it	ne
 8007f8e:	b21b      	sxthne	r3, r3
 8007f90:	e7cf      	b.n	8007f32 <_printf_i+0x52>
 8007f92:	6813      	ldr	r3, [r2, #0]
 8007f94:	6825      	ldr	r5, [r4, #0]
 8007f96:	1d18      	adds	r0, r3, #4
 8007f98:	6010      	str	r0, [r2, #0]
 8007f9a:	0628      	lsls	r0, r5, #24
 8007f9c:	d501      	bpl.n	8007fa2 <_printf_i+0xc2>
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	e002      	b.n	8007fa8 <_printf_i+0xc8>
 8007fa2:	0668      	lsls	r0, r5, #25
 8007fa4:	d5fb      	bpl.n	8007f9e <_printf_i+0xbe>
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	4854      	ldr	r0, [pc, #336]	; (80080fc <_printf_i+0x21c>)
 8007faa:	296f      	cmp	r1, #111	; 0x6f
 8007fac:	bf14      	ite	ne
 8007fae:	220a      	movne	r2, #10
 8007fb0:	2208      	moveq	r2, #8
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fb8:	6865      	ldr	r5, [r4, #4]
 8007fba:	60a5      	str	r5, [r4, #8]
 8007fbc:	2d00      	cmp	r5, #0
 8007fbe:	f2c0 8095 	blt.w	80080ec <_printf_i+0x20c>
 8007fc2:	6821      	ldr	r1, [r4, #0]
 8007fc4:	f021 0104 	bic.w	r1, r1, #4
 8007fc8:	6021      	str	r1, [r4, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d13d      	bne.n	800804a <_printf_i+0x16a>
 8007fce:	2d00      	cmp	r5, #0
 8007fd0:	f040 808e 	bne.w	80080f0 <_printf_i+0x210>
 8007fd4:	4665      	mov	r5, ip
 8007fd6:	2a08      	cmp	r2, #8
 8007fd8:	d10b      	bne.n	8007ff2 <_printf_i+0x112>
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	07db      	lsls	r3, r3, #31
 8007fde:	d508      	bpl.n	8007ff2 <_printf_i+0x112>
 8007fe0:	6923      	ldr	r3, [r4, #16]
 8007fe2:	6862      	ldr	r2, [r4, #4]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	bfde      	ittt	le
 8007fe8:	2330      	movle	r3, #48	; 0x30
 8007fea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ff2:	ebac 0305 	sub.w	r3, ip, r5
 8007ff6:	6123      	str	r3, [r4, #16]
 8007ff8:	f8cd 8000 	str.w	r8, [sp]
 8007ffc:	463b      	mov	r3, r7
 8007ffe:	aa03      	add	r2, sp, #12
 8008000:	4621      	mov	r1, r4
 8008002:	4630      	mov	r0, r6
 8008004:	f7ff fef6 	bl	8007df4 <_printf_common>
 8008008:	3001      	adds	r0, #1
 800800a:	d14d      	bne.n	80080a8 <_printf_i+0x1c8>
 800800c:	f04f 30ff 	mov.w	r0, #4294967295
 8008010:	b005      	add	sp, #20
 8008012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008016:	4839      	ldr	r0, [pc, #228]	; (80080fc <_printf_i+0x21c>)
 8008018:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800801c:	6813      	ldr	r3, [r2, #0]
 800801e:	6821      	ldr	r1, [r4, #0]
 8008020:	1d1d      	adds	r5, r3, #4
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6015      	str	r5, [r2, #0]
 8008026:	060a      	lsls	r2, r1, #24
 8008028:	d50b      	bpl.n	8008042 <_printf_i+0x162>
 800802a:	07ca      	lsls	r2, r1, #31
 800802c:	bf44      	itt	mi
 800802e:	f041 0120 	orrmi.w	r1, r1, #32
 8008032:	6021      	strmi	r1, [r4, #0]
 8008034:	b91b      	cbnz	r3, 800803e <_printf_i+0x15e>
 8008036:	6822      	ldr	r2, [r4, #0]
 8008038:	f022 0220 	bic.w	r2, r2, #32
 800803c:	6022      	str	r2, [r4, #0]
 800803e:	2210      	movs	r2, #16
 8008040:	e7b7      	b.n	8007fb2 <_printf_i+0xd2>
 8008042:	064d      	lsls	r5, r1, #25
 8008044:	bf48      	it	mi
 8008046:	b29b      	uxthmi	r3, r3
 8008048:	e7ef      	b.n	800802a <_printf_i+0x14a>
 800804a:	4665      	mov	r5, ip
 800804c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008050:	fb02 3311 	mls	r3, r2, r1, r3
 8008054:	5cc3      	ldrb	r3, [r0, r3]
 8008056:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800805a:	460b      	mov	r3, r1
 800805c:	2900      	cmp	r1, #0
 800805e:	d1f5      	bne.n	800804c <_printf_i+0x16c>
 8008060:	e7b9      	b.n	8007fd6 <_printf_i+0xf6>
 8008062:	6813      	ldr	r3, [r2, #0]
 8008064:	6825      	ldr	r5, [r4, #0]
 8008066:	6961      	ldr	r1, [r4, #20]
 8008068:	1d18      	adds	r0, r3, #4
 800806a:	6010      	str	r0, [r2, #0]
 800806c:	0628      	lsls	r0, r5, #24
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	d501      	bpl.n	8008076 <_printf_i+0x196>
 8008072:	6019      	str	r1, [r3, #0]
 8008074:	e002      	b.n	800807c <_printf_i+0x19c>
 8008076:	066a      	lsls	r2, r5, #25
 8008078:	d5fb      	bpl.n	8008072 <_printf_i+0x192>
 800807a:	8019      	strh	r1, [r3, #0]
 800807c:	2300      	movs	r3, #0
 800807e:	6123      	str	r3, [r4, #16]
 8008080:	4665      	mov	r5, ip
 8008082:	e7b9      	b.n	8007ff8 <_printf_i+0x118>
 8008084:	6813      	ldr	r3, [r2, #0]
 8008086:	1d19      	adds	r1, r3, #4
 8008088:	6011      	str	r1, [r2, #0]
 800808a:	681d      	ldr	r5, [r3, #0]
 800808c:	6862      	ldr	r2, [r4, #4]
 800808e:	2100      	movs	r1, #0
 8008090:	4628      	mov	r0, r5
 8008092:	f7f8 f8c5 	bl	8000220 <memchr>
 8008096:	b108      	cbz	r0, 800809c <_printf_i+0x1bc>
 8008098:	1b40      	subs	r0, r0, r5
 800809a:	6060      	str	r0, [r4, #4]
 800809c:	6863      	ldr	r3, [r4, #4]
 800809e:	6123      	str	r3, [r4, #16]
 80080a0:	2300      	movs	r3, #0
 80080a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080a6:	e7a7      	b.n	8007ff8 <_printf_i+0x118>
 80080a8:	6923      	ldr	r3, [r4, #16]
 80080aa:	462a      	mov	r2, r5
 80080ac:	4639      	mov	r1, r7
 80080ae:	4630      	mov	r0, r6
 80080b0:	47c0      	blx	r8
 80080b2:	3001      	adds	r0, #1
 80080b4:	d0aa      	beq.n	800800c <_printf_i+0x12c>
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	079b      	lsls	r3, r3, #30
 80080ba:	d413      	bmi.n	80080e4 <_printf_i+0x204>
 80080bc:	68e0      	ldr	r0, [r4, #12]
 80080be:	9b03      	ldr	r3, [sp, #12]
 80080c0:	4298      	cmp	r0, r3
 80080c2:	bfb8      	it	lt
 80080c4:	4618      	movlt	r0, r3
 80080c6:	e7a3      	b.n	8008010 <_printf_i+0x130>
 80080c8:	2301      	movs	r3, #1
 80080ca:	464a      	mov	r2, r9
 80080cc:	4639      	mov	r1, r7
 80080ce:	4630      	mov	r0, r6
 80080d0:	47c0      	blx	r8
 80080d2:	3001      	adds	r0, #1
 80080d4:	d09a      	beq.n	800800c <_printf_i+0x12c>
 80080d6:	3501      	adds	r5, #1
 80080d8:	68e3      	ldr	r3, [r4, #12]
 80080da:	9a03      	ldr	r2, [sp, #12]
 80080dc:	1a9b      	subs	r3, r3, r2
 80080de:	42ab      	cmp	r3, r5
 80080e0:	dcf2      	bgt.n	80080c8 <_printf_i+0x1e8>
 80080e2:	e7eb      	b.n	80080bc <_printf_i+0x1dc>
 80080e4:	2500      	movs	r5, #0
 80080e6:	f104 0919 	add.w	r9, r4, #25
 80080ea:	e7f5      	b.n	80080d8 <_printf_i+0x1f8>
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1ac      	bne.n	800804a <_printf_i+0x16a>
 80080f0:	7803      	ldrb	r3, [r0, #0]
 80080f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080fa:	e76c      	b.n	8007fd6 <_printf_i+0xf6>
 80080fc:	0800b34a 	.word	0x0800b34a
 8008100:	0800b35b 	.word	0x0800b35b

08008104 <_scanf_float>:
 8008104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008108:	469a      	mov	sl, r3
 800810a:	688b      	ldr	r3, [r1, #8]
 800810c:	4616      	mov	r6, r2
 800810e:	1e5a      	subs	r2, r3, #1
 8008110:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008114:	b087      	sub	sp, #28
 8008116:	bf83      	ittte	hi
 8008118:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800811c:	189b      	addhi	r3, r3, r2
 800811e:	9301      	strhi	r3, [sp, #4]
 8008120:	2300      	movls	r3, #0
 8008122:	bf86      	itte	hi
 8008124:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008128:	608b      	strhi	r3, [r1, #8]
 800812a:	9301      	strls	r3, [sp, #4]
 800812c:	680b      	ldr	r3, [r1, #0]
 800812e:	4688      	mov	r8, r1
 8008130:	f04f 0b00 	mov.w	fp, #0
 8008134:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008138:	f848 3b1c 	str.w	r3, [r8], #28
 800813c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008140:	4607      	mov	r7, r0
 8008142:	460c      	mov	r4, r1
 8008144:	4645      	mov	r5, r8
 8008146:	465a      	mov	r2, fp
 8008148:	46d9      	mov	r9, fp
 800814a:	f8cd b008 	str.w	fp, [sp, #8]
 800814e:	68a1      	ldr	r1, [r4, #8]
 8008150:	b181      	cbz	r1, 8008174 <_scanf_float+0x70>
 8008152:	6833      	ldr	r3, [r6, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	2b49      	cmp	r3, #73	; 0x49
 8008158:	d071      	beq.n	800823e <_scanf_float+0x13a>
 800815a:	d84d      	bhi.n	80081f8 <_scanf_float+0xf4>
 800815c:	2b39      	cmp	r3, #57	; 0x39
 800815e:	d840      	bhi.n	80081e2 <_scanf_float+0xde>
 8008160:	2b31      	cmp	r3, #49	; 0x31
 8008162:	f080 8088 	bcs.w	8008276 <_scanf_float+0x172>
 8008166:	2b2d      	cmp	r3, #45	; 0x2d
 8008168:	f000 8090 	beq.w	800828c <_scanf_float+0x188>
 800816c:	d815      	bhi.n	800819a <_scanf_float+0x96>
 800816e:	2b2b      	cmp	r3, #43	; 0x2b
 8008170:	f000 808c 	beq.w	800828c <_scanf_float+0x188>
 8008174:	f1b9 0f00 	cmp.w	r9, #0
 8008178:	d003      	beq.n	8008182 <_scanf_float+0x7e>
 800817a:	6823      	ldr	r3, [r4, #0]
 800817c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	3a01      	subs	r2, #1
 8008184:	2a01      	cmp	r2, #1
 8008186:	f200 80ea 	bhi.w	800835e <_scanf_float+0x25a>
 800818a:	4545      	cmp	r5, r8
 800818c:	f200 80dc 	bhi.w	8008348 <_scanf_float+0x244>
 8008190:	2601      	movs	r6, #1
 8008192:	4630      	mov	r0, r6
 8008194:	b007      	add	sp, #28
 8008196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819a:	2b2e      	cmp	r3, #46	; 0x2e
 800819c:	f000 809f 	beq.w	80082de <_scanf_float+0x1da>
 80081a0:	2b30      	cmp	r3, #48	; 0x30
 80081a2:	d1e7      	bne.n	8008174 <_scanf_float+0x70>
 80081a4:	6820      	ldr	r0, [r4, #0]
 80081a6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80081aa:	d064      	beq.n	8008276 <_scanf_float+0x172>
 80081ac:	9b01      	ldr	r3, [sp, #4]
 80081ae:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80081b2:	6020      	str	r0, [r4, #0]
 80081b4:	f109 0901 	add.w	r9, r9, #1
 80081b8:	b11b      	cbz	r3, 80081c2 <_scanf_float+0xbe>
 80081ba:	3b01      	subs	r3, #1
 80081bc:	3101      	adds	r1, #1
 80081be:	9301      	str	r3, [sp, #4]
 80081c0:	60a1      	str	r1, [r4, #8]
 80081c2:	68a3      	ldr	r3, [r4, #8]
 80081c4:	3b01      	subs	r3, #1
 80081c6:	60a3      	str	r3, [r4, #8]
 80081c8:	6923      	ldr	r3, [r4, #16]
 80081ca:	3301      	adds	r3, #1
 80081cc:	6123      	str	r3, [r4, #16]
 80081ce:	6873      	ldr	r3, [r6, #4]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	6073      	str	r3, [r6, #4]
 80081d6:	f340 80ac 	ble.w	8008332 <_scanf_float+0x22e>
 80081da:	6833      	ldr	r3, [r6, #0]
 80081dc:	3301      	adds	r3, #1
 80081de:	6033      	str	r3, [r6, #0]
 80081e0:	e7b5      	b.n	800814e <_scanf_float+0x4a>
 80081e2:	2b45      	cmp	r3, #69	; 0x45
 80081e4:	f000 8085 	beq.w	80082f2 <_scanf_float+0x1ee>
 80081e8:	2b46      	cmp	r3, #70	; 0x46
 80081ea:	d06a      	beq.n	80082c2 <_scanf_float+0x1be>
 80081ec:	2b41      	cmp	r3, #65	; 0x41
 80081ee:	d1c1      	bne.n	8008174 <_scanf_float+0x70>
 80081f0:	2a01      	cmp	r2, #1
 80081f2:	d1bf      	bne.n	8008174 <_scanf_float+0x70>
 80081f4:	2202      	movs	r2, #2
 80081f6:	e046      	b.n	8008286 <_scanf_float+0x182>
 80081f8:	2b65      	cmp	r3, #101	; 0x65
 80081fa:	d07a      	beq.n	80082f2 <_scanf_float+0x1ee>
 80081fc:	d818      	bhi.n	8008230 <_scanf_float+0x12c>
 80081fe:	2b54      	cmp	r3, #84	; 0x54
 8008200:	d066      	beq.n	80082d0 <_scanf_float+0x1cc>
 8008202:	d811      	bhi.n	8008228 <_scanf_float+0x124>
 8008204:	2b4e      	cmp	r3, #78	; 0x4e
 8008206:	d1b5      	bne.n	8008174 <_scanf_float+0x70>
 8008208:	2a00      	cmp	r2, #0
 800820a:	d146      	bne.n	800829a <_scanf_float+0x196>
 800820c:	f1b9 0f00 	cmp.w	r9, #0
 8008210:	d145      	bne.n	800829e <_scanf_float+0x19a>
 8008212:	6821      	ldr	r1, [r4, #0]
 8008214:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008218:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800821c:	d13f      	bne.n	800829e <_scanf_float+0x19a>
 800821e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008222:	6021      	str	r1, [r4, #0]
 8008224:	2201      	movs	r2, #1
 8008226:	e02e      	b.n	8008286 <_scanf_float+0x182>
 8008228:	2b59      	cmp	r3, #89	; 0x59
 800822a:	d01e      	beq.n	800826a <_scanf_float+0x166>
 800822c:	2b61      	cmp	r3, #97	; 0x61
 800822e:	e7de      	b.n	80081ee <_scanf_float+0xea>
 8008230:	2b6e      	cmp	r3, #110	; 0x6e
 8008232:	d0e9      	beq.n	8008208 <_scanf_float+0x104>
 8008234:	d815      	bhi.n	8008262 <_scanf_float+0x15e>
 8008236:	2b66      	cmp	r3, #102	; 0x66
 8008238:	d043      	beq.n	80082c2 <_scanf_float+0x1be>
 800823a:	2b69      	cmp	r3, #105	; 0x69
 800823c:	d19a      	bne.n	8008174 <_scanf_float+0x70>
 800823e:	f1bb 0f00 	cmp.w	fp, #0
 8008242:	d138      	bne.n	80082b6 <_scanf_float+0x1b2>
 8008244:	f1b9 0f00 	cmp.w	r9, #0
 8008248:	d197      	bne.n	800817a <_scanf_float+0x76>
 800824a:	6821      	ldr	r1, [r4, #0]
 800824c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008250:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008254:	d195      	bne.n	8008182 <_scanf_float+0x7e>
 8008256:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800825a:	6021      	str	r1, [r4, #0]
 800825c:	f04f 0b01 	mov.w	fp, #1
 8008260:	e011      	b.n	8008286 <_scanf_float+0x182>
 8008262:	2b74      	cmp	r3, #116	; 0x74
 8008264:	d034      	beq.n	80082d0 <_scanf_float+0x1cc>
 8008266:	2b79      	cmp	r3, #121	; 0x79
 8008268:	d184      	bne.n	8008174 <_scanf_float+0x70>
 800826a:	f1bb 0f07 	cmp.w	fp, #7
 800826e:	d181      	bne.n	8008174 <_scanf_float+0x70>
 8008270:	f04f 0b08 	mov.w	fp, #8
 8008274:	e007      	b.n	8008286 <_scanf_float+0x182>
 8008276:	eb12 0f0b 	cmn.w	r2, fp
 800827a:	f47f af7b 	bne.w	8008174 <_scanf_float+0x70>
 800827e:	6821      	ldr	r1, [r4, #0]
 8008280:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8008284:	6021      	str	r1, [r4, #0]
 8008286:	702b      	strb	r3, [r5, #0]
 8008288:	3501      	adds	r5, #1
 800828a:	e79a      	b.n	80081c2 <_scanf_float+0xbe>
 800828c:	6821      	ldr	r1, [r4, #0]
 800828e:	0608      	lsls	r0, r1, #24
 8008290:	f57f af70 	bpl.w	8008174 <_scanf_float+0x70>
 8008294:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008298:	e7f4      	b.n	8008284 <_scanf_float+0x180>
 800829a:	2a02      	cmp	r2, #2
 800829c:	d047      	beq.n	800832e <_scanf_float+0x22a>
 800829e:	f1bb 0f01 	cmp.w	fp, #1
 80082a2:	d003      	beq.n	80082ac <_scanf_float+0x1a8>
 80082a4:	f1bb 0f04 	cmp.w	fp, #4
 80082a8:	f47f af64 	bne.w	8008174 <_scanf_float+0x70>
 80082ac:	f10b 0b01 	add.w	fp, fp, #1
 80082b0:	fa5f fb8b 	uxtb.w	fp, fp
 80082b4:	e7e7      	b.n	8008286 <_scanf_float+0x182>
 80082b6:	f1bb 0f03 	cmp.w	fp, #3
 80082ba:	d0f7      	beq.n	80082ac <_scanf_float+0x1a8>
 80082bc:	f1bb 0f05 	cmp.w	fp, #5
 80082c0:	e7f2      	b.n	80082a8 <_scanf_float+0x1a4>
 80082c2:	f1bb 0f02 	cmp.w	fp, #2
 80082c6:	f47f af55 	bne.w	8008174 <_scanf_float+0x70>
 80082ca:	f04f 0b03 	mov.w	fp, #3
 80082ce:	e7da      	b.n	8008286 <_scanf_float+0x182>
 80082d0:	f1bb 0f06 	cmp.w	fp, #6
 80082d4:	f47f af4e 	bne.w	8008174 <_scanf_float+0x70>
 80082d8:	f04f 0b07 	mov.w	fp, #7
 80082dc:	e7d3      	b.n	8008286 <_scanf_float+0x182>
 80082de:	6821      	ldr	r1, [r4, #0]
 80082e0:	0588      	lsls	r0, r1, #22
 80082e2:	f57f af47 	bpl.w	8008174 <_scanf_float+0x70>
 80082e6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80082ea:	6021      	str	r1, [r4, #0]
 80082ec:	f8cd 9008 	str.w	r9, [sp, #8]
 80082f0:	e7c9      	b.n	8008286 <_scanf_float+0x182>
 80082f2:	6821      	ldr	r1, [r4, #0]
 80082f4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80082f8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80082fc:	d006      	beq.n	800830c <_scanf_float+0x208>
 80082fe:	0548      	lsls	r0, r1, #21
 8008300:	f57f af38 	bpl.w	8008174 <_scanf_float+0x70>
 8008304:	f1b9 0f00 	cmp.w	r9, #0
 8008308:	f43f af3b 	beq.w	8008182 <_scanf_float+0x7e>
 800830c:	0588      	lsls	r0, r1, #22
 800830e:	bf58      	it	pl
 8008310:	9802      	ldrpl	r0, [sp, #8]
 8008312:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008316:	bf58      	it	pl
 8008318:	eba9 0000 	subpl.w	r0, r9, r0
 800831c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8008320:	bf58      	it	pl
 8008322:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8008326:	6021      	str	r1, [r4, #0]
 8008328:	f04f 0900 	mov.w	r9, #0
 800832c:	e7ab      	b.n	8008286 <_scanf_float+0x182>
 800832e:	2203      	movs	r2, #3
 8008330:	e7a9      	b.n	8008286 <_scanf_float+0x182>
 8008332:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008336:	9205      	str	r2, [sp, #20]
 8008338:	4631      	mov	r1, r6
 800833a:	4638      	mov	r0, r7
 800833c:	4798      	blx	r3
 800833e:	9a05      	ldr	r2, [sp, #20]
 8008340:	2800      	cmp	r0, #0
 8008342:	f43f af04 	beq.w	800814e <_scanf_float+0x4a>
 8008346:	e715      	b.n	8008174 <_scanf_float+0x70>
 8008348:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800834c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008350:	4632      	mov	r2, r6
 8008352:	4638      	mov	r0, r7
 8008354:	4798      	blx	r3
 8008356:	6923      	ldr	r3, [r4, #16]
 8008358:	3b01      	subs	r3, #1
 800835a:	6123      	str	r3, [r4, #16]
 800835c:	e715      	b.n	800818a <_scanf_float+0x86>
 800835e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008362:	2b06      	cmp	r3, #6
 8008364:	d80a      	bhi.n	800837c <_scanf_float+0x278>
 8008366:	f1bb 0f02 	cmp.w	fp, #2
 800836a:	d968      	bls.n	800843e <_scanf_float+0x33a>
 800836c:	f1ab 0b03 	sub.w	fp, fp, #3
 8008370:	fa5f fb8b 	uxtb.w	fp, fp
 8008374:	eba5 0b0b 	sub.w	fp, r5, fp
 8008378:	455d      	cmp	r5, fp
 800837a:	d14b      	bne.n	8008414 <_scanf_float+0x310>
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	05da      	lsls	r2, r3, #23
 8008380:	d51f      	bpl.n	80083c2 <_scanf_float+0x2be>
 8008382:	055b      	lsls	r3, r3, #21
 8008384:	d468      	bmi.n	8008458 <_scanf_float+0x354>
 8008386:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800838a:	6923      	ldr	r3, [r4, #16]
 800838c:	2965      	cmp	r1, #101	; 0x65
 800838e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008392:	f105 3bff 	add.w	fp, r5, #4294967295
 8008396:	6123      	str	r3, [r4, #16]
 8008398:	d00d      	beq.n	80083b6 <_scanf_float+0x2b2>
 800839a:	2945      	cmp	r1, #69	; 0x45
 800839c:	d00b      	beq.n	80083b6 <_scanf_float+0x2b2>
 800839e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083a2:	4632      	mov	r2, r6
 80083a4:	4638      	mov	r0, r7
 80083a6:	4798      	blx	r3
 80083a8:	6923      	ldr	r3, [r4, #16]
 80083aa:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80083ae:	3b01      	subs	r3, #1
 80083b0:	f1a5 0b02 	sub.w	fp, r5, #2
 80083b4:	6123      	str	r3, [r4, #16]
 80083b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083ba:	4632      	mov	r2, r6
 80083bc:	4638      	mov	r0, r7
 80083be:	4798      	blx	r3
 80083c0:	465d      	mov	r5, fp
 80083c2:	6826      	ldr	r6, [r4, #0]
 80083c4:	f016 0610 	ands.w	r6, r6, #16
 80083c8:	d17a      	bne.n	80084c0 <_scanf_float+0x3bc>
 80083ca:	702e      	strb	r6, [r5, #0]
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80083d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083d6:	d142      	bne.n	800845e <_scanf_float+0x35a>
 80083d8:	9b02      	ldr	r3, [sp, #8]
 80083da:	eba9 0303 	sub.w	r3, r9, r3
 80083de:	425a      	negs	r2, r3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d149      	bne.n	8008478 <_scanf_float+0x374>
 80083e4:	2200      	movs	r2, #0
 80083e6:	4641      	mov	r1, r8
 80083e8:	4638      	mov	r0, r7
 80083ea:	f000 fea5 	bl	8009138 <_strtod_r>
 80083ee:	6825      	ldr	r5, [r4, #0]
 80083f0:	f8da 3000 	ldr.w	r3, [sl]
 80083f4:	f015 0f02 	tst.w	r5, #2
 80083f8:	f103 0204 	add.w	r2, r3, #4
 80083fc:	ec59 8b10 	vmov	r8, r9, d0
 8008400:	f8ca 2000 	str.w	r2, [sl]
 8008404:	d043      	beq.n	800848e <_scanf_float+0x38a>
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	e9c3 8900 	strd	r8, r9, [r3]
 800840c:	68e3      	ldr	r3, [r4, #12]
 800840e:	3301      	adds	r3, #1
 8008410:	60e3      	str	r3, [r4, #12]
 8008412:	e6be      	b.n	8008192 <_scanf_float+0x8e>
 8008414:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008418:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800841c:	4632      	mov	r2, r6
 800841e:	4638      	mov	r0, r7
 8008420:	4798      	blx	r3
 8008422:	6923      	ldr	r3, [r4, #16]
 8008424:	3b01      	subs	r3, #1
 8008426:	6123      	str	r3, [r4, #16]
 8008428:	e7a6      	b.n	8008378 <_scanf_float+0x274>
 800842a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800842e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008432:	4632      	mov	r2, r6
 8008434:	4638      	mov	r0, r7
 8008436:	4798      	blx	r3
 8008438:	6923      	ldr	r3, [r4, #16]
 800843a:	3b01      	subs	r3, #1
 800843c:	6123      	str	r3, [r4, #16]
 800843e:	4545      	cmp	r5, r8
 8008440:	d8f3      	bhi.n	800842a <_scanf_float+0x326>
 8008442:	e6a5      	b.n	8008190 <_scanf_float+0x8c>
 8008444:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008448:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800844c:	4632      	mov	r2, r6
 800844e:	4638      	mov	r0, r7
 8008450:	4798      	blx	r3
 8008452:	6923      	ldr	r3, [r4, #16]
 8008454:	3b01      	subs	r3, #1
 8008456:	6123      	str	r3, [r4, #16]
 8008458:	4545      	cmp	r5, r8
 800845a:	d8f3      	bhi.n	8008444 <_scanf_float+0x340>
 800845c:	e698      	b.n	8008190 <_scanf_float+0x8c>
 800845e:	9b03      	ldr	r3, [sp, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d0bf      	beq.n	80083e4 <_scanf_float+0x2e0>
 8008464:	9904      	ldr	r1, [sp, #16]
 8008466:	230a      	movs	r3, #10
 8008468:	4632      	mov	r2, r6
 800846a:	3101      	adds	r1, #1
 800846c:	4638      	mov	r0, r7
 800846e:	f000 feef 	bl	8009250 <_strtol_r>
 8008472:	9b03      	ldr	r3, [sp, #12]
 8008474:	9d04      	ldr	r5, [sp, #16]
 8008476:	1ac2      	subs	r2, r0, r3
 8008478:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800847c:	429d      	cmp	r5, r3
 800847e:	bf28      	it	cs
 8008480:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8008484:	490f      	ldr	r1, [pc, #60]	; (80084c4 <_scanf_float+0x3c0>)
 8008486:	4628      	mov	r0, r5
 8008488:	f000 f824 	bl	80084d4 <siprintf>
 800848c:	e7aa      	b.n	80083e4 <_scanf_float+0x2e0>
 800848e:	f015 0504 	ands.w	r5, r5, #4
 8008492:	d1b8      	bne.n	8008406 <_scanf_float+0x302>
 8008494:	681f      	ldr	r7, [r3, #0]
 8008496:	ee10 2a10 	vmov	r2, s0
 800849a:	464b      	mov	r3, r9
 800849c:	ee10 0a10 	vmov	r0, s0
 80084a0:	4649      	mov	r1, r9
 80084a2:	f7f8 fb63 	bl	8000b6c <__aeabi_dcmpun>
 80084a6:	b128      	cbz	r0, 80084b4 <_scanf_float+0x3b0>
 80084a8:	4628      	mov	r0, r5
 80084aa:	f000 f80d 	bl	80084c8 <nanf>
 80084ae:	ed87 0a00 	vstr	s0, [r7]
 80084b2:	e7ab      	b.n	800840c <_scanf_float+0x308>
 80084b4:	4640      	mov	r0, r8
 80084b6:	4649      	mov	r1, r9
 80084b8:	f7f8 fbb6 	bl	8000c28 <__aeabi_d2f>
 80084bc:	6038      	str	r0, [r7, #0]
 80084be:	e7a5      	b.n	800840c <_scanf_float+0x308>
 80084c0:	2600      	movs	r6, #0
 80084c2:	e666      	b.n	8008192 <_scanf_float+0x8e>
 80084c4:	0800b36c 	.word	0x0800b36c

080084c8 <nanf>:
 80084c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80084d0 <nanf+0x8>
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	7fc00000 	.word	0x7fc00000

080084d4 <siprintf>:
 80084d4:	b40e      	push	{r1, r2, r3}
 80084d6:	b500      	push	{lr}
 80084d8:	b09c      	sub	sp, #112	; 0x70
 80084da:	ab1d      	add	r3, sp, #116	; 0x74
 80084dc:	9002      	str	r0, [sp, #8]
 80084de:	9006      	str	r0, [sp, #24]
 80084e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084e4:	4809      	ldr	r0, [pc, #36]	; (800850c <siprintf+0x38>)
 80084e6:	9107      	str	r1, [sp, #28]
 80084e8:	9104      	str	r1, [sp, #16]
 80084ea:	4909      	ldr	r1, [pc, #36]	; (8008510 <siprintf+0x3c>)
 80084ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f0:	9105      	str	r1, [sp, #20]
 80084f2:	6800      	ldr	r0, [r0, #0]
 80084f4:	9301      	str	r3, [sp, #4]
 80084f6:	a902      	add	r1, sp, #8
 80084f8:	f002 fd84 	bl	800b004 <_svfiprintf_r>
 80084fc:	9b02      	ldr	r3, [sp, #8]
 80084fe:	2200      	movs	r2, #0
 8008500:	701a      	strb	r2, [r3, #0]
 8008502:	b01c      	add	sp, #112	; 0x70
 8008504:	f85d eb04 	ldr.w	lr, [sp], #4
 8008508:	b003      	add	sp, #12
 800850a:	4770      	bx	lr
 800850c:	20000010 	.word	0x20000010
 8008510:	ffff0208 	.word	0xffff0208

08008514 <sulp>:
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	4604      	mov	r4, r0
 8008518:	460d      	mov	r5, r1
 800851a:	ec45 4b10 	vmov	d0, r4, r5
 800851e:	4616      	mov	r6, r2
 8008520:	f002 fb2c 	bl	800ab7c <__ulp>
 8008524:	ec51 0b10 	vmov	r0, r1, d0
 8008528:	b17e      	cbz	r6, 800854a <sulp+0x36>
 800852a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800852e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008532:	2b00      	cmp	r3, #0
 8008534:	dd09      	ble.n	800854a <sulp+0x36>
 8008536:	051b      	lsls	r3, r3, #20
 8008538:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800853c:	2400      	movs	r4, #0
 800853e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008542:	4622      	mov	r2, r4
 8008544:	462b      	mov	r3, r5
 8008546:	f7f8 f877 	bl	8000638 <__aeabi_dmul>
 800854a:	bd70      	pop	{r4, r5, r6, pc}
 800854c:	0000      	movs	r0, r0
	...

08008550 <_strtod_l>:
 8008550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008554:	461f      	mov	r7, r3
 8008556:	b0a1      	sub	sp, #132	; 0x84
 8008558:	2300      	movs	r3, #0
 800855a:	4681      	mov	r9, r0
 800855c:	4638      	mov	r0, r7
 800855e:	460e      	mov	r6, r1
 8008560:	9217      	str	r2, [sp, #92]	; 0x5c
 8008562:	931c      	str	r3, [sp, #112]	; 0x70
 8008564:	f002 f809 	bl	800a57a <__localeconv_l>
 8008568:	4680      	mov	r8, r0
 800856a:	6800      	ldr	r0, [r0, #0]
 800856c:	f7f7 fe50 	bl	8000210 <strlen>
 8008570:	f04f 0a00 	mov.w	sl, #0
 8008574:	4604      	mov	r4, r0
 8008576:	f04f 0b00 	mov.w	fp, #0
 800857a:	961b      	str	r6, [sp, #108]	; 0x6c
 800857c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800857e:	781a      	ldrb	r2, [r3, #0]
 8008580:	2a0d      	cmp	r2, #13
 8008582:	d832      	bhi.n	80085ea <_strtod_l+0x9a>
 8008584:	2a09      	cmp	r2, #9
 8008586:	d236      	bcs.n	80085f6 <_strtod_l+0xa6>
 8008588:	2a00      	cmp	r2, #0
 800858a:	d03e      	beq.n	800860a <_strtod_l+0xba>
 800858c:	2300      	movs	r3, #0
 800858e:	930d      	str	r3, [sp, #52]	; 0x34
 8008590:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008592:	782b      	ldrb	r3, [r5, #0]
 8008594:	2b30      	cmp	r3, #48	; 0x30
 8008596:	f040 80ac 	bne.w	80086f2 <_strtod_l+0x1a2>
 800859a:	786b      	ldrb	r3, [r5, #1]
 800859c:	2b58      	cmp	r3, #88	; 0x58
 800859e:	d001      	beq.n	80085a4 <_strtod_l+0x54>
 80085a0:	2b78      	cmp	r3, #120	; 0x78
 80085a2:	d167      	bne.n	8008674 <_strtod_l+0x124>
 80085a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085a6:	9301      	str	r3, [sp, #4]
 80085a8:	ab1c      	add	r3, sp, #112	; 0x70
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	9702      	str	r7, [sp, #8]
 80085ae:	ab1d      	add	r3, sp, #116	; 0x74
 80085b0:	4a88      	ldr	r2, [pc, #544]	; (80087d4 <_strtod_l+0x284>)
 80085b2:	a91b      	add	r1, sp, #108	; 0x6c
 80085b4:	4648      	mov	r0, r9
 80085b6:	f001 fd06 	bl	8009fc6 <__gethex>
 80085ba:	f010 0407 	ands.w	r4, r0, #7
 80085be:	4606      	mov	r6, r0
 80085c0:	d005      	beq.n	80085ce <_strtod_l+0x7e>
 80085c2:	2c06      	cmp	r4, #6
 80085c4:	d12b      	bne.n	800861e <_strtod_l+0xce>
 80085c6:	3501      	adds	r5, #1
 80085c8:	2300      	movs	r3, #0
 80085ca:	951b      	str	r5, [sp, #108]	; 0x6c
 80085cc:	930d      	str	r3, [sp, #52]	; 0x34
 80085ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f040 859a 	bne.w	800910a <_strtod_l+0xbba>
 80085d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085d8:	b1e3      	cbz	r3, 8008614 <_strtod_l+0xc4>
 80085da:	4652      	mov	r2, sl
 80085dc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80085e0:	ec43 2b10 	vmov	d0, r2, r3
 80085e4:	b021      	add	sp, #132	; 0x84
 80085e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ea:	2a2b      	cmp	r2, #43	; 0x2b
 80085ec:	d015      	beq.n	800861a <_strtod_l+0xca>
 80085ee:	2a2d      	cmp	r2, #45	; 0x2d
 80085f0:	d004      	beq.n	80085fc <_strtod_l+0xac>
 80085f2:	2a20      	cmp	r2, #32
 80085f4:	d1ca      	bne.n	800858c <_strtod_l+0x3c>
 80085f6:	3301      	adds	r3, #1
 80085f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80085fa:	e7bf      	b.n	800857c <_strtod_l+0x2c>
 80085fc:	2201      	movs	r2, #1
 80085fe:	920d      	str	r2, [sp, #52]	; 0x34
 8008600:	1c5a      	adds	r2, r3, #1
 8008602:	921b      	str	r2, [sp, #108]	; 0x6c
 8008604:	785b      	ldrb	r3, [r3, #1]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1c2      	bne.n	8008590 <_strtod_l+0x40>
 800860a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800860c:	961b      	str	r6, [sp, #108]	; 0x6c
 800860e:	2b00      	cmp	r3, #0
 8008610:	f040 8579 	bne.w	8009106 <_strtod_l+0xbb6>
 8008614:	4652      	mov	r2, sl
 8008616:	465b      	mov	r3, fp
 8008618:	e7e2      	b.n	80085e0 <_strtod_l+0x90>
 800861a:	2200      	movs	r2, #0
 800861c:	e7ef      	b.n	80085fe <_strtod_l+0xae>
 800861e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008620:	b13a      	cbz	r2, 8008632 <_strtod_l+0xe2>
 8008622:	2135      	movs	r1, #53	; 0x35
 8008624:	a81e      	add	r0, sp, #120	; 0x78
 8008626:	f002 fba1 	bl	800ad6c <__copybits>
 800862a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800862c:	4648      	mov	r0, r9
 800862e:	f002 f80e 	bl	800a64e <_Bfree>
 8008632:	3c01      	subs	r4, #1
 8008634:	2c04      	cmp	r4, #4
 8008636:	d806      	bhi.n	8008646 <_strtod_l+0xf6>
 8008638:	e8df f004 	tbb	[pc, r4]
 800863c:	1714030a 	.word	0x1714030a
 8008640:	0a          	.byte	0x0a
 8008641:	00          	.byte	0x00
 8008642:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008646:	0730      	lsls	r0, r6, #28
 8008648:	d5c1      	bpl.n	80085ce <_strtod_l+0x7e>
 800864a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800864e:	e7be      	b.n	80085ce <_strtod_l+0x7e>
 8008650:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008654:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008656:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800865a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800865e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008662:	e7f0      	b.n	8008646 <_strtod_l+0xf6>
 8008664:	f8df b170 	ldr.w	fp, [pc, #368]	; 80087d8 <_strtod_l+0x288>
 8008668:	e7ed      	b.n	8008646 <_strtod_l+0xf6>
 800866a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800866e:	f04f 3aff 	mov.w	sl, #4294967295
 8008672:	e7e8      	b.n	8008646 <_strtod_l+0xf6>
 8008674:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008676:	1c5a      	adds	r2, r3, #1
 8008678:	921b      	str	r2, [sp, #108]	; 0x6c
 800867a:	785b      	ldrb	r3, [r3, #1]
 800867c:	2b30      	cmp	r3, #48	; 0x30
 800867e:	d0f9      	beq.n	8008674 <_strtod_l+0x124>
 8008680:	2b00      	cmp	r3, #0
 8008682:	d0a4      	beq.n	80085ce <_strtod_l+0x7e>
 8008684:	2301      	movs	r3, #1
 8008686:	2500      	movs	r5, #0
 8008688:	9306      	str	r3, [sp, #24]
 800868a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800868c:	9308      	str	r3, [sp, #32]
 800868e:	9507      	str	r5, [sp, #28]
 8008690:	9505      	str	r5, [sp, #20]
 8008692:	220a      	movs	r2, #10
 8008694:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008696:	7807      	ldrb	r7, [r0, #0]
 8008698:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800869c:	b2d9      	uxtb	r1, r3
 800869e:	2909      	cmp	r1, #9
 80086a0:	d929      	bls.n	80086f6 <_strtod_l+0x1a6>
 80086a2:	4622      	mov	r2, r4
 80086a4:	f8d8 1000 	ldr.w	r1, [r8]
 80086a8:	f002 fdb4 	bl	800b214 <strncmp>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	d031      	beq.n	8008714 <_strtod_l+0x1c4>
 80086b0:	2000      	movs	r0, #0
 80086b2:	9c05      	ldr	r4, [sp, #20]
 80086b4:	9004      	str	r0, [sp, #16]
 80086b6:	463b      	mov	r3, r7
 80086b8:	4602      	mov	r2, r0
 80086ba:	2b65      	cmp	r3, #101	; 0x65
 80086bc:	d001      	beq.n	80086c2 <_strtod_l+0x172>
 80086be:	2b45      	cmp	r3, #69	; 0x45
 80086c0:	d114      	bne.n	80086ec <_strtod_l+0x19c>
 80086c2:	b924      	cbnz	r4, 80086ce <_strtod_l+0x17e>
 80086c4:	b910      	cbnz	r0, 80086cc <_strtod_l+0x17c>
 80086c6:	9b06      	ldr	r3, [sp, #24]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d09e      	beq.n	800860a <_strtod_l+0xba>
 80086cc:	2400      	movs	r4, #0
 80086ce:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80086d0:	1c73      	adds	r3, r6, #1
 80086d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80086d4:	7873      	ldrb	r3, [r6, #1]
 80086d6:	2b2b      	cmp	r3, #43	; 0x2b
 80086d8:	d078      	beq.n	80087cc <_strtod_l+0x27c>
 80086da:	2b2d      	cmp	r3, #45	; 0x2d
 80086dc:	d070      	beq.n	80087c0 <_strtod_l+0x270>
 80086de:	f04f 0c00 	mov.w	ip, #0
 80086e2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80086e6:	2f09      	cmp	r7, #9
 80086e8:	d97c      	bls.n	80087e4 <_strtod_l+0x294>
 80086ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80086ec:	f04f 0e00 	mov.w	lr, #0
 80086f0:	e09a      	b.n	8008828 <_strtod_l+0x2d8>
 80086f2:	2300      	movs	r3, #0
 80086f4:	e7c7      	b.n	8008686 <_strtod_l+0x136>
 80086f6:	9905      	ldr	r1, [sp, #20]
 80086f8:	2908      	cmp	r1, #8
 80086fa:	bfdd      	ittte	le
 80086fc:	9907      	ldrle	r1, [sp, #28]
 80086fe:	fb02 3301 	mlale	r3, r2, r1, r3
 8008702:	9307      	strle	r3, [sp, #28]
 8008704:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008708:	9b05      	ldr	r3, [sp, #20]
 800870a:	3001      	adds	r0, #1
 800870c:	3301      	adds	r3, #1
 800870e:	9305      	str	r3, [sp, #20]
 8008710:	901b      	str	r0, [sp, #108]	; 0x6c
 8008712:	e7bf      	b.n	8008694 <_strtod_l+0x144>
 8008714:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008716:	191a      	adds	r2, r3, r4
 8008718:	921b      	str	r2, [sp, #108]	; 0x6c
 800871a:	9a05      	ldr	r2, [sp, #20]
 800871c:	5d1b      	ldrb	r3, [r3, r4]
 800871e:	2a00      	cmp	r2, #0
 8008720:	d037      	beq.n	8008792 <_strtod_l+0x242>
 8008722:	9c05      	ldr	r4, [sp, #20]
 8008724:	4602      	mov	r2, r0
 8008726:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800872a:	2909      	cmp	r1, #9
 800872c:	d913      	bls.n	8008756 <_strtod_l+0x206>
 800872e:	2101      	movs	r1, #1
 8008730:	9104      	str	r1, [sp, #16]
 8008732:	e7c2      	b.n	80086ba <_strtod_l+0x16a>
 8008734:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	921b      	str	r2, [sp, #108]	; 0x6c
 800873a:	785b      	ldrb	r3, [r3, #1]
 800873c:	3001      	adds	r0, #1
 800873e:	2b30      	cmp	r3, #48	; 0x30
 8008740:	d0f8      	beq.n	8008734 <_strtod_l+0x1e4>
 8008742:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008746:	2a08      	cmp	r2, #8
 8008748:	f200 84e4 	bhi.w	8009114 <_strtod_l+0xbc4>
 800874c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800874e:	9208      	str	r2, [sp, #32]
 8008750:	4602      	mov	r2, r0
 8008752:	2000      	movs	r0, #0
 8008754:	4604      	mov	r4, r0
 8008756:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800875a:	f100 0101 	add.w	r1, r0, #1
 800875e:	d012      	beq.n	8008786 <_strtod_l+0x236>
 8008760:	440a      	add	r2, r1
 8008762:	eb00 0c04 	add.w	ip, r0, r4
 8008766:	4621      	mov	r1, r4
 8008768:	270a      	movs	r7, #10
 800876a:	458c      	cmp	ip, r1
 800876c:	d113      	bne.n	8008796 <_strtod_l+0x246>
 800876e:	1821      	adds	r1, r4, r0
 8008770:	2908      	cmp	r1, #8
 8008772:	f104 0401 	add.w	r4, r4, #1
 8008776:	4404      	add	r4, r0
 8008778:	dc19      	bgt.n	80087ae <_strtod_l+0x25e>
 800877a:	9b07      	ldr	r3, [sp, #28]
 800877c:	210a      	movs	r1, #10
 800877e:	fb01 e303 	mla	r3, r1, r3, lr
 8008782:	9307      	str	r3, [sp, #28]
 8008784:	2100      	movs	r1, #0
 8008786:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008788:	1c58      	adds	r0, r3, #1
 800878a:	901b      	str	r0, [sp, #108]	; 0x6c
 800878c:	785b      	ldrb	r3, [r3, #1]
 800878e:	4608      	mov	r0, r1
 8008790:	e7c9      	b.n	8008726 <_strtod_l+0x1d6>
 8008792:	9805      	ldr	r0, [sp, #20]
 8008794:	e7d3      	b.n	800873e <_strtod_l+0x1ee>
 8008796:	2908      	cmp	r1, #8
 8008798:	f101 0101 	add.w	r1, r1, #1
 800879c:	dc03      	bgt.n	80087a6 <_strtod_l+0x256>
 800879e:	9b07      	ldr	r3, [sp, #28]
 80087a0:	437b      	muls	r3, r7
 80087a2:	9307      	str	r3, [sp, #28]
 80087a4:	e7e1      	b.n	800876a <_strtod_l+0x21a>
 80087a6:	2910      	cmp	r1, #16
 80087a8:	bfd8      	it	le
 80087aa:	437d      	mulle	r5, r7
 80087ac:	e7dd      	b.n	800876a <_strtod_l+0x21a>
 80087ae:	2c10      	cmp	r4, #16
 80087b0:	bfdc      	itt	le
 80087b2:	210a      	movle	r1, #10
 80087b4:	fb01 e505 	mlale	r5, r1, r5, lr
 80087b8:	e7e4      	b.n	8008784 <_strtod_l+0x234>
 80087ba:	2301      	movs	r3, #1
 80087bc:	9304      	str	r3, [sp, #16]
 80087be:	e781      	b.n	80086c4 <_strtod_l+0x174>
 80087c0:	f04f 0c01 	mov.w	ip, #1
 80087c4:	1cb3      	adds	r3, r6, #2
 80087c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80087c8:	78b3      	ldrb	r3, [r6, #2]
 80087ca:	e78a      	b.n	80086e2 <_strtod_l+0x192>
 80087cc:	f04f 0c00 	mov.w	ip, #0
 80087d0:	e7f8      	b.n	80087c4 <_strtod_l+0x274>
 80087d2:	bf00      	nop
 80087d4:	0800b374 	.word	0x0800b374
 80087d8:	7ff00000 	.word	0x7ff00000
 80087dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087de:	1c5f      	adds	r7, r3, #1
 80087e0:	971b      	str	r7, [sp, #108]	; 0x6c
 80087e2:	785b      	ldrb	r3, [r3, #1]
 80087e4:	2b30      	cmp	r3, #48	; 0x30
 80087e6:	d0f9      	beq.n	80087dc <_strtod_l+0x28c>
 80087e8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80087ec:	2f08      	cmp	r7, #8
 80087ee:	f63f af7d 	bhi.w	80086ec <_strtod_l+0x19c>
 80087f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80087f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087f8:	930a      	str	r3, [sp, #40]	; 0x28
 80087fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087fc:	1c5f      	adds	r7, r3, #1
 80087fe:	971b      	str	r7, [sp, #108]	; 0x6c
 8008800:	785b      	ldrb	r3, [r3, #1]
 8008802:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008806:	f1b8 0f09 	cmp.w	r8, #9
 800880a:	d937      	bls.n	800887c <_strtod_l+0x32c>
 800880c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800880e:	1a7f      	subs	r7, r7, r1
 8008810:	2f08      	cmp	r7, #8
 8008812:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008816:	dc37      	bgt.n	8008888 <_strtod_l+0x338>
 8008818:	45be      	cmp	lr, r7
 800881a:	bfa8      	it	ge
 800881c:	46be      	movge	lr, r7
 800881e:	f1bc 0f00 	cmp.w	ip, #0
 8008822:	d001      	beq.n	8008828 <_strtod_l+0x2d8>
 8008824:	f1ce 0e00 	rsb	lr, lr, #0
 8008828:	2c00      	cmp	r4, #0
 800882a:	d151      	bne.n	80088d0 <_strtod_l+0x380>
 800882c:	2800      	cmp	r0, #0
 800882e:	f47f aece 	bne.w	80085ce <_strtod_l+0x7e>
 8008832:	9a06      	ldr	r2, [sp, #24]
 8008834:	2a00      	cmp	r2, #0
 8008836:	f47f aeca 	bne.w	80085ce <_strtod_l+0x7e>
 800883a:	9a04      	ldr	r2, [sp, #16]
 800883c:	2a00      	cmp	r2, #0
 800883e:	f47f aee4 	bne.w	800860a <_strtod_l+0xba>
 8008842:	2b4e      	cmp	r3, #78	; 0x4e
 8008844:	d027      	beq.n	8008896 <_strtod_l+0x346>
 8008846:	dc21      	bgt.n	800888c <_strtod_l+0x33c>
 8008848:	2b49      	cmp	r3, #73	; 0x49
 800884a:	f47f aede 	bne.w	800860a <_strtod_l+0xba>
 800884e:	49a0      	ldr	r1, [pc, #640]	; (8008ad0 <_strtod_l+0x580>)
 8008850:	a81b      	add	r0, sp, #108	; 0x6c
 8008852:	f001 fdeb 	bl	800a42c <__match>
 8008856:	2800      	cmp	r0, #0
 8008858:	f43f aed7 	beq.w	800860a <_strtod_l+0xba>
 800885c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800885e:	499d      	ldr	r1, [pc, #628]	; (8008ad4 <_strtod_l+0x584>)
 8008860:	3b01      	subs	r3, #1
 8008862:	a81b      	add	r0, sp, #108	; 0x6c
 8008864:	931b      	str	r3, [sp, #108]	; 0x6c
 8008866:	f001 fde1 	bl	800a42c <__match>
 800886a:	b910      	cbnz	r0, 8008872 <_strtod_l+0x322>
 800886c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800886e:	3301      	adds	r3, #1
 8008870:	931b      	str	r3, [sp, #108]	; 0x6c
 8008872:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008ae8 <_strtod_l+0x598>
 8008876:	f04f 0a00 	mov.w	sl, #0
 800887a:	e6a8      	b.n	80085ce <_strtod_l+0x7e>
 800887c:	210a      	movs	r1, #10
 800887e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008882:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008886:	e7b8      	b.n	80087fa <_strtod_l+0x2aa>
 8008888:	46be      	mov	lr, r7
 800888a:	e7c8      	b.n	800881e <_strtod_l+0x2ce>
 800888c:	2b69      	cmp	r3, #105	; 0x69
 800888e:	d0de      	beq.n	800884e <_strtod_l+0x2fe>
 8008890:	2b6e      	cmp	r3, #110	; 0x6e
 8008892:	f47f aeba 	bne.w	800860a <_strtod_l+0xba>
 8008896:	4990      	ldr	r1, [pc, #576]	; (8008ad8 <_strtod_l+0x588>)
 8008898:	a81b      	add	r0, sp, #108	; 0x6c
 800889a:	f001 fdc7 	bl	800a42c <__match>
 800889e:	2800      	cmp	r0, #0
 80088a0:	f43f aeb3 	beq.w	800860a <_strtod_l+0xba>
 80088a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b28      	cmp	r3, #40	; 0x28
 80088aa:	d10e      	bne.n	80088ca <_strtod_l+0x37a>
 80088ac:	aa1e      	add	r2, sp, #120	; 0x78
 80088ae:	498b      	ldr	r1, [pc, #556]	; (8008adc <_strtod_l+0x58c>)
 80088b0:	a81b      	add	r0, sp, #108	; 0x6c
 80088b2:	f001 fdcf 	bl	800a454 <__hexnan>
 80088b6:	2805      	cmp	r0, #5
 80088b8:	d107      	bne.n	80088ca <_strtod_l+0x37a>
 80088ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80088bc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80088c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80088c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80088c8:	e681      	b.n	80085ce <_strtod_l+0x7e>
 80088ca:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008af0 <_strtod_l+0x5a0>
 80088ce:	e7d2      	b.n	8008876 <_strtod_l+0x326>
 80088d0:	ebae 0302 	sub.w	r3, lr, r2
 80088d4:	9306      	str	r3, [sp, #24]
 80088d6:	9b05      	ldr	r3, [sp, #20]
 80088d8:	9807      	ldr	r0, [sp, #28]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	bf08      	it	eq
 80088de:	4623      	moveq	r3, r4
 80088e0:	2c10      	cmp	r4, #16
 80088e2:	9305      	str	r3, [sp, #20]
 80088e4:	46a0      	mov	r8, r4
 80088e6:	bfa8      	it	ge
 80088e8:	f04f 0810 	movge.w	r8, #16
 80088ec:	f7f7 fe2a 	bl	8000544 <__aeabi_ui2d>
 80088f0:	2c09      	cmp	r4, #9
 80088f2:	4682      	mov	sl, r0
 80088f4:	468b      	mov	fp, r1
 80088f6:	dc13      	bgt.n	8008920 <_strtod_l+0x3d0>
 80088f8:	9b06      	ldr	r3, [sp, #24]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f43f ae67 	beq.w	80085ce <_strtod_l+0x7e>
 8008900:	9b06      	ldr	r3, [sp, #24]
 8008902:	dd7a      	ble.n	80089fa <_strtod_l+0x4aa>
 8008904:	2b16      	cmp	r3, #22
 8008906:	dc61      	bgt.n	80089cc <_strtod_l+0x47c>
 8008908:	4a75      	ldr	r2, [pc, #468]	; (8008ae0 <_strtod_l+0x590>)
 800890a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800890e:	e9de 0100 	ldrd	r0, r1, [lr]
 8008912:	4652      	mov	r2, sl
 8008914:	465b      	mov	r3, fp
 8008916:	f7f7 fe8f 	bl	8000638 <__aeabi_dmul>
 800891a:	4682      	mov	sl, r0
 800891c:	468b      	mov	fp, r1
 800891e:	e656      	b.n	80085ce <_strtod_l+0x7e>
 8008920:	4b6f      	ldr	r3, [pc, #444]	; (8008ae0 <_strtod_l+0x590>)
 8008922:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008926:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800892a:	f7f7 fe85 	bl	8000638 <__aeabi_dmul>
 800892e:	4606      	mov	r6, r0
 8008930:	4628      	mov	r0, r5
 8008932:	460f      	mov	r7, r1
 8008934:	f7f7 fe06 	bl	8000544 <__aeabi_ui2d>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4630      	mov	r0, r6
 800893e:	4639      	mov	r1, r7
 8008940:	f7f7 fcc4 	bl	80002cc <__adddf3>
 8008944:	2c0f      	cmp	r4, #15
 8008946:	4682      	mov	sl, r0
 8008948:	468b      	mov	fp, r1
 800894a:	ddd5      	ble.n	80088f8 <_strtod_l+0x3a8>
 800894c:	9b06      	ldr	r3, [sp, #24]
 800894e:	eba4 0808 	sub.w	r8, r4, r8
 8008952:	4498      	add	r8, r3
 8008954:	f1b8 0f00 	cmp.w	r8, #0
 8008958:	f340 8096 	ble.w	8008a88 <_strtod_l+0x538>
 800895c:	f018 030f 	ands.w	r3, r8, #15
 8008960:	d00a      	beq.n	8008978 <_strtod_l+0x428>
 8008962:	495f      	ldr	r1, [pc, #380]	; (8008ae0 <_strtod_l+0x590>)
 8008964:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008968:	4652      	mov	r2, sl
 800896a:	465b      	mov	r3, fp
 800896c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008970:	f7f7 fe62 	bl	8000638 <__aeabi_dmul>
 8008974:	4682      	mov	sl, r0
 8008976:	468b      	mov	fp, r1
 8008978:	f038 080f 	bics.w	r8, r8, #15
 800897c:	d073      	beq.n	8008a66 <_strtod_l+0x516>
 800897e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008982:	dd47      	ble.n	8008a14 <_strtod_l+0x4c4>
 8008984:	2400      	movs	r4, #0
 8008986:	46a0      	mov	r8, r4
 8008988:	9407      	str	r4, [sp, #28]
 800898a:	9405      	str	r4, [sp, #20]
 800898c:	2322      	movs	r3, #34	; 0x22
 800898e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008ae8 <_strtod_l+0x598>
 8008992:	f8c9 3000 	str.w	r3, [r9]
 8008996:	f04f 0a00 	mov.w	sl, #0
 800899a:	9b07      	ldr	r3, [sp, #28]
 800899c:	2b00      	cmp	r3, #0
 800899e:	f43f ae16 	beq.w	80085ce <_strtod_l+0x7e>
 80089a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80089a4:	4648      	mov	r0, r9
 80089a6:	f001 fe52 	bl	800a64e <_Bfree>
 80089aa:	9905      	ldr	r1, [sp, #20]
 80089ac:	4648      	mov	r0, r9
 80089ae:	f001 fe4e 	bl	800a64e <_Bfree>
 80089b2:	4641      	mov	r1, r8
 80089b4:	4648      	mov	r0, r9
 80089b6:	f001 fe4a 	bl	800a64e <_Bfree>
 80089ba:	9907      	ldr	r1, [sp, #28]
 80089bc:	4648      	mov	r0, r9
 80089be:	f001 fe46 	bl	800a64e <_Bfree>
 80089c2:	4621      	mov	r1, r4
 80089c4:	4648      	mov	r0, r9
 80089c6:	f001 fe42 	bl	800a64e <_Bfree>
 80089ca:	e600      	b.n	80085ce <_strtod_l+0x7e>
 80089cc:	9a06      	ldr	r2, [sp, #24]
 80089ce:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80089d2:	4293      	cmp	r3, r2
 80089d4:	dbba      	blt.n	800894c <_strtod_l+0x3fc>
 80089d6:	4d42      	ldr	r5, [pc, #264]	; (8008ae0 <_strtod_l+0x590>)
 80089d8:	f1c4 040f 	rsb	r4, r4, #15
 80089dc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80089e0:	4652      	mov	r2, sl
 80089e2:	465b      	mov	r3, fp
 80089e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089e8:	f7f7 fe26 	bl	8000638 <__aeabi_dmul>
 80089ec:	9b06      	ldr	r3, [sp, #24]
 80089ee:	1b1c      	subs	r4, r3, r4
 80089f0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80089f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089f8:	e78d      	b.n	8008916 <_strtod_l+0x3c6>
 80089fa:	f113 0f16 	cmn.w	r3, #22
 80089fe:	dba5      	blt.n	800894c <_strtod_l+0x3fc>
 8008a00:	4a37      	ldr	r2, [pc, #220]	; (8008ae0 <_strtod_l+0x590>)
 8008a02:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008a06:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008a0a:	4650      	mov	r0, sl
 8008a0c:	4659      	mov	r1, fp
 8008a0e:	f7f7 ff3d 	bl	800088c <__aeabi_ddiv>
 8008a12:	e782      	b.n	800891a <_strtod_l+0x3ca>
 8008a14:	2300      	movs	r3, #0
 8008a16:	4e33      	ldr	r6, [pc, #204]	; (8008ae4 <_strtod_l+0x594>)
 8008a18:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008a1c:	4650      	mov	r0, sl
 8008a1e:	4659      	mov	r1, fp
 8008a20:	461d      	mov	r5, r3
 8008a22:	f1b8 0f01 	cmp.w	r8, #1
 8008a26:	dc21      	bgt.n	8008a6c <_strtod_l+0x51c>
 8008a28:	b10b      	cbz	r3, 8008a2e <_strtod_l+0x4de>
 8008a2a:	4682      	mov	sl, r0
 8008a2c:	468b      	mov	fp, r1
 8008a2e:	4b2d      	ldr	r3, [pc, #180]	; (8008ae4 <_strtod_l+0x594>)
 8008a30:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008a34:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008a38:	4652      	mov	r2, sl
 8008a3a:	465b      	mov	r3, fp
 8008a3c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008a40:	f7f7 fdfa 	bl	8000638 <__aeabi_dmul>
 8008a44:	4b28      	ldr	r3, [pc, #160]	; (8008ae8 <_strtod_l+0x598>)
 8008a46:	460a      	mov	r2, r1
 8008a48:	400b      	ands	r3, r1
 8008a4a:	4928      	ldr	r1, [pc, #160]	; (8008aec <_strtod_l+0x59c>)
 8008a4c:	428b      	cmp	r3, r1
 8008a4e:	4682      	mov	sl, r0
 8008a50:	d898      	bhi.n	8008984 <_strtod_l+0x434>
 8008a52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008a56:	428b      	cmp	r3, r1
 8008a58:	bf86      	itte	hi
 8008a5a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008af4 <_strtod_l+0x5a4>
 8008a5e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008a62:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008a66:	2300      	movs	r3, #0
 8008a68:	9304      	str	r3, [sp, #16]
 8008a6a:	e077      	b.n	8008b5c <_strtod_l+0x60c>
 8008a6c:	f018 0f01 	tst.w	r8, #1
 8008a70:	d006      	beq.n	8008a80 <_strtod_l+0x530>
 8008a72:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	f7f7 fddd 	bl	8000638 <__aeabi_dmul>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	3501      	adds	r5, #1
 8008a82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008a86:	e7cc      	b.n	8008a22 <_strtod_l+0x4d2>
 8008a88:	d0ed      	beq.n	8008a66 <_strtod_l+0x516>
 8008a8a:	f1c8 0800 	rsb	r8, r8, #0
 8008a8e:	f018 020f 	ands.w	r2, r8, #15
 8008a92:	d00a      	beq.n	8008aaa <_strtod_l+0x55a>
 8008a94:	4b12      	ldr	r3, [pc, #72]	; (8008ae0 <_strtod_l+0x590>)
 8008a96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a9a:	4650      	mov	r0, sl
 8008a9c:	4659      	mov	r1, fp
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	f7f7 fef3 	bl	800088c <__aeabi_ddiv>
 8008aa6:	4682      	mov	sl, r0
 8008aa8:	468b      	mov	fp, r1
 8008aaa:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008aae:	d0da      	beq.n	8008a66 <_strtod_l+0x516>
 8008ab0:	f1b8 0f1f 	cmp.w	r8, #31
 8008ab4:	dd20      	ble.n	8008af8 <_strtod_l+0x5a8>
 8008ab6:	2400      	movs	r4, #0
 8008ab8:	46a0      	mov	r8, r4
 8008aba:	9407      	str	r4, [sp, #28]
 8008abc:	9405      	str	r4, [sp, #20]
 8008abe:	2322      	movs	r3, #34	; 0x22
 8008ac0:	f04f 0a00 	mov.w	sl, #0
 8008ac4:	f04f 0b00 	mov.w	fp, #0
 8008ac8:	f8c9 3000 	str.w	r3, [r9]
 8008acc:	e765      	b.n	800899a <_strtod_l+0x44a>
 8008ace:	bf00      	nop
 8008ad0:	0800b33d 	.word	0x0800b33d
 8008ad4:	0800b3cb 	.word	0x0800b3cb
 8008ad8:	0800b345 	.word	0x0800b345
 8008adc:	0800b388 	.word	0x0800b388
 8008ae0:	0800b408 	.word	0x0800b408
 8008ae4:	0800b3e0 	.word	0x0800b3e0
 8008ae8:	7ff00000 	.word	0x7ff00000
 8008aec:	7ca00000 	.word	0x7ca00000
 8008af0:	fff80000 	.word	0xfff80000
 8008af4:	7fefffff 	.word	0x7fefffff
 8008af8:	f018 0310 	ands.w	r3, r8, #16
 8008afc:	bf18      	it	ne
 8008afe:	236a      	movne	r3, #106	; 0x6a
 8008b00:	4da0      	ldr	r5, [pc, #640]	; (8008d84 <_strtod_l+0x834>)
 8008b02:	9304      	str	r3, [sp, #16]
 8008b04:	4650      	mov	r0, sl
 8008b06:	4659      	mov	r1, fp
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f1b8 0f00 	cmp.w	r8, #0
 8008b0e:	f300 810a 	bgt.w	8008d26 <_strtod_l+0x7d6>
 8008b12:	b10b      	cbz	r3, 8008b18 <_strtod_l+0x5c8>
 8008b14:	4682      	mov	sl, r0
 8008b16:	468b      	mov	fp, r1
 8008b18:	9b04      	ldr	r3, [sp, #16]
 8008b1a:	b1bb      	cbz	r3, 8008b4c <_strtod_l+0x5fc>
 8008b1c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008b20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	4659      	mov	r1, fp
 8008b28:	dd10      	ble.n	8008b4c <_strtod_l+0x5fc>
 8008b2a:	2b1f      	cmp	r3, #31
 8008b2c:	f340 8107 	ble.w	8008d3e <_strtod_l+0x7ee>
 8008b30:	2b34      	cmp	r3, #52	; 0x34
 8008b32:	bfde      	ittt	le
 8008b34:	3b20      	suble	r3, #32
 8008b36:	f04f 32ff 	movle.w	r2, #4294967295
 8008b3a:	fa02 f303 	lslle.w	r3, r2, r3
 8008b3e:	f04f 0a00 	mov.w	sl, #0
 8008b42:	bfcc      	ite	gt
 8008b44:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008b48:	ea03 0b01 	andle.w	fp, r3, r1
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	2300      	movs	r3, #0
 8008b50:	4650      	mov	r0, sl
 8008b52:	4659      	mov	r1, fp
 8008b54:	f7f7 ffd8 	bl	8000b08 <__aeabi_dcmpeq>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d1ac      	bne.n	8008ab6 <_strtod_l+0x566>
 8008b5c:	9b07      	ldr	r3, [sp, #28]
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	9a05      	ldr	r2, [sp, #20]
 8008b62:	9908      	ldr	r1, [sp, #32]
 8008b64:	4623      	mov	r3, r4
 8008b66:	4648      	mov	r0, r9
 8008b68:	f001 fdc3 	bl	800a6f2 <__s2b>
 8008b6c:	9007      	str	r0, [sp, #28]
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	f43f af08 	beq.w	8008984 <_strtod_l+0x434>
 8008b74:	9a06      	ldr	r2, [sp, #24]
 8008b76:	9b06      	ldr	r3, [sp, #24]
 8008b78:	2a00      	cmp	r2, #0
 8008b7a:	f1c3 0300 	rsb	r3, r3, #0
 8008b7e:	bfa8      	it	ge
 8008b80:	2300      	movge	r3, #0
 8008b82:	930e      	str	r3, [sp, #56]	; 0x38
 8008b84:	2400      	movs	r4, #0
 8008b86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008b8a:	9316      	str	r3, [sp, #88]	; 0x58
 8008b8c:	46a0      	mov	r8, r4
 8008b8e:	9b07      	ldr	r3, [sp, #28]
 8008b90:	4648      	mov	r0, r9
 8008b92:	6859      	ldr	r1, [r3, #4]
 8008b94:	f001 fd27 	bl	800a5e6 <_Balloc>
 8008b98:	9005      	str	r0, [sp, #20]
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	f43f aef6 	beq.w	800898c <_strtod_l+0x43c>
 8008ba0:	9b07      	ldr	r3, [sp, #28]
 8008ba2:	691a      	ldr	r2, [r3, #16]
 8008ba4:	3202      	adds	r2, #2
 8008ba6:	f103 010c 	add.w	r1, r3, #12
 8008baa:	0092      	lsls	r2, r2, #2
 8008bac:	300c      	adds	r0, #12
 8008bae:	f001 fd0f 	bl	800a5d0 <memcpy>
 8008bb2:	aa1e      	add	r2, sp, #120	; 0x78
 8008bb4:	a91d      	add	r1, sp, #116	; 0x74
 8008bb6:	ec4b ab10 	vmov	d0, sl, fp
 8008bba:	4648      	mov	r0, r9
 8008bbc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008bc0:	f002 f852 	bl	800ac68 <__d2b>
 8008bc4:	901c      	str	r0, [sp, #112]	; 0x70
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	f43f aee0 	beq.w	800898c <_strtod_l+0x43c>
 8008bcc:	2101      	movs	r1, #1
 8008bce:	4648      	mov	r0, r9
 8008bd0:	f001 fe1b 	bl	800a80a <__i2b>
 8008bd4:	4680      	mov	r8, r0
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	f43f aed8 	beq.w	800898c <_strtod_l+0x43c>
 8008bdc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008bde:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008be0:	2e00      	cmp	r6, #0
 8008be2:	bfab      	itete	ge
 8008be4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008be6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008be8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008bea:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8008bec:	bfac      	ite	ge
 8008bee:	18f7      	addge	r7, r6, r3
 8008bf0:	1b9d      	sublt	r5, r3, r6
 8008bf2:	9b04      	ldr	r3, [sp, #16]
 8008bf4:	1af6      	subs	r6, r6, r3
 8008bf6:	4416      	add	r6, r2
 8008bf8:	4b63      	ldr	r3, [pc, #396]	; (8008d88 <_strtod_l+0x838>)
 8008bfa:	3e01      	subs	r6, #1
 8008bfc:	429e      	cmp	r6, r3
 8008bfe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008c02:	f280 80af 	bge.w	8008d64 <_strtod_l+0x814>
 8008c06:	1b9b      	subs	r3, r3, r6
 8008c08:	2b1f      	cmp	r3, #31
 8008c0a:	eba2 0203 	sub.w	r2, r2, r3
 8008c0e:	f04f 0101 	mov.w	r1, #1
 8008c12:	f300 809b 	bgt.w	8008d4c <_strtod_l+0x7fc>
 8008c16:	fa01 f303 	lsl.w	r3, r1, r3
 8008c1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c20:	18be      	adds	r6, r7, r2
 8008c22:	9b04      	ldr	r3, [sp, #16]
 8008c24:	42b7      	cmp	r7, r6
 8008c26:	4415      	add	r5, r2
 8008c28:	441d      	add	r5, r3
 8008c2a:	463b      	mov	r3, r7
 8008c2c:	bfa8      	it	ge
 8008c2e:	4633      	movge	r3, r6
 8008c30:	42ab      	cmp	r3, r5
 8008c32:	bfa8      	it	ge
 8008c34:	462b      	movge	r3, r5
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	bfc2      	ittt	gt
 8008c3a:	1af6      	subgt	r6, r6, r3
 8008c3c:	1aed      	subgt	r5, r5, r3
 8008c3e:	1aff      	subgt	r7, r7, r3
 8008c40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c42:	b1bb      	cbz	r3, 8008c74 <_strtod_l+0x724>
 8008c44:	4641      	mov	r1, r8
 8008c46:	461a      	mov	r2, r3
 8008c48:	4648      	mov	r0, r9
 8008c4a:	f001 fe7d 	bl	800a948 <__pow5mult>
 8008c4e:	4680      	mov	r8, r0
 8008c50:	2800      	cmp	r0, #0
 8008c52:	f43f ae9b 	beq.w	800898c <_strtod_l+0x43c>
 8008c56:	4601      	mov	r1, r0
 8008c58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008c5a:	4648      	mov	r0, r9
 8008c5c:	f001 fdde 	bl	800a81c <__multiply>
 8008c60:	900c      	str	r0, [sp, #48]	; 0x30
 8008c62:	2800      	cmp	r0, #0
 8008c64:	f43f ae92 	beq.w	800898c <_strtod_l+0x43c>
 8008c68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008c6a:	4648      	mov	r0, r9
 8008c6c:	f001 fcef 	bl	800a64e <_Bfree>
 8008c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c72:	931c      	str	r3, [sp, #112]	; 0x70
 8008c74:	2e00      	cmp	r6, #0
 8008c76:	dc7a      	bgt.n	8008d6e <_strtod_l+0x81e>
 8008c78:	9b06      	ldr	r3, [sp, #24]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	dd08      	ble.n	8008c90 <_strtod_l+0x740>
 8008c7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008c80:	9905      	ldr	r1, [sp, #20]
 8008c82:	4648      	mov	r0, r9
 8008c84:	f001 fe60 	bl	800a948 <__pow5mult>
 8008c88:	9005      	str	r0, [sp, #20]
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	f43f ae7e 	beq.w	800898c <_strtod_l+0x43c>
 8008c90:	2d00      	cmp	r5, #0
 8008c92:	dd08      	ble.n	8008ca6 <_strtod_l+0x756>
 8008c94:	462a      	mov	r2, r5
 8008c96:	9905      	ldr	r1, [sp, #20]
 8008c98:	4648      	mov	r0, r9
 8008c9a:	f001 fea3 	bl	800a9e4 <__lshift>
 8008c9e:	9005      	str	r0, [sp, #20]
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	f43f ae73 	beq.w	800898c <_strtod_l+0x43c>
 8008ca6:	2f00      	cmp	r7, #0
 8008ca8:	dd08      	ble.n	8008cbc <_strtod_l+0x76c>
 8008caa:	4641      	mov	r1, r8
 8008cac:	463a      	mov	r2, r7
 8008cae:	4648      	mov	r0, r9
 8008cb0:	f001 fe98 	bl	800a9e4 <__lshift>
 8008cb4:	4680      	mov	r8, r0
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	f43f ae68 	beq.w	800898c <_strtod_l+0x43c>
 8008cbc:	9a05      	ldr	r2, [sp, #20]
 8008cbe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008cc0:	4648      	mov	r0, r9
 8008cc2:	f001 fefd 	bl	800aac0 <__mdiff>
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	f43f ae5f 	beq.w	800898c <_strtod_l+0x43c>
 8008cce:	68c3      	ldr	r3, [r0, #12]
 8008cd0:	930c      	str	r3, [sp, #48]	; 0x30
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	60c3      	str	r3, [r0, #12]
 8008cd6:	4641      	mov	r1, r8
 8008cd8:	f001 fed8 	bl	800aa8c <__mcmp>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	da55      	bge.n	8008d8c <_strtod_l+0x83c>
 8008ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ce2:	b9e3      	cbnz	r3, 8008d1e <_strtod_l+0x7ce>
 8008ce4:	f1ba 0f00 	cmp.w	sl, #0
 8008ce8:	d119      	bne.n	8008d1e <_strtod_l+0x7ce>
 8008cea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cee:	b9b3      	cbnz	r3, 8008d1e <_strtod_l+0x7ce>
 8008cf0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008cf4:	0d1b      	lsrs	r3, r3, #20
 8008cf6:	051b      	lsls	r3, r3, #20
 8008cf8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008cfc:	d90f      	bls.n	8008d1e <_strtod_l+0x7ce>
 8008cfe:	6963      	ldr	r3, [r4, #20]
 8008d00:	b913      	cbnz	r3, 8008d08 <_strtod_l+0x7b8>
 8008d02:	6923      	ldr	r3, [r4, #16]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	dd0a      	ble.n	8008d1e <_strtod_l+0x7ce>
 8008d08:	4621      	mov	r1, r4
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	4648      	mov	r0, r9
 8008d0e:	f001 fe69 	bl	800a9e4 <__lshift>
 8008d12:	4641      	mov	r1, r8
 8008d14:	4604      	mov	r4, r0
 8008d16:	f001 feb9 	bl	800aa8c <__mcmp>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	dc67      	bgt.n	8008dee <_strtod_l+0x89e>
 8008d1e:	9b04      	ldr	r3, [sp, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d171      	bne.n	8008e08 <_strtod_l+0x8b8>
 8008d24:	e63d      	b.n	80089a2 <_strtod_l+0x452>
 8008d26:	f018 0f01 	tst.w	r8, #1
 8008d2a:	d004      	beq.n	8008d36 <_strtod_l+0x7e6>
 8008d2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d30:	f7f7 fc82 	bl	8000638 <__aeabi_dmul>
 8008d34:	2301      	movs	r3, #1
 8008d36:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008d3a:	3508      	adds	r5, #8
 8008d3c:	e6e5      	b.n	8008b0a <_strtod_l+0x5ba>
 8008d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d42:	fa02 f303 	lsl.w	r3, r2, r3
 8008d46:	ea03 0a0a 	and.w	sl, r3, sl
 8008d4a:	e6ff      	b.n	8008b4c <_strtod_l+0x5fc>
 8008d4c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008d50:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008d54:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008d58:	36e2      	adds	r6, #226	; 0xe2
 8008d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8008d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d60:	910f      	str	r1, [sp, #60]	; 0x3c
 8008d62:	e75d      	b.n	8008c20 <_strtod_l+0x6d0>
 8008d64:	2300      	movs	r3, #0
 8008d66:	930a      	str	r3, [sp, #40]	; 0x28
 8008d68:	2301      	movs	r3, #1
 8008d6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d6c:	e758      	b.n	8008c20 <_strtod_l+0x6d0>
 8008d6e:	4632      	mov	r2, r6
 8008d70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008d72:	4648      	mov	r0, r9
 8008d74:	f001 fe36 	bl	800a9e4 <__lshift>
 8008d78:	901c      	str	r0, [sp, #112]	; 0x70
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	f47f af7c 	bne.w	8008c78 <_strtod_l+0x728>
 8008d80:	e604      	b.n	800898c <_strtod_l+0x43c>
 8008d82:	bf00      	nop
 8008d84:	0800b3a0 	.word	0x0800b3a0
 8008d88:	fffffc02 	.word	0xfffffc02
 8008d8c:	465d      	mov	r5, fp
 8008d8e:	f040 8086 	bne.w	8008e9e <_strtod_l+0x94e>
 8008d92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d98:	b32a      	cbz	r2, 8008de6 <_strtod_l+0x896>
 8008d9a:	4aaf      	ldr	r2, [pc, #700]	; (8009058 <_strtod_l+0xb08>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d153      	bne.n	8008e48 <_strtod_l+0x8f8>
 8008da0:	9b04      	ldr	r3, [sp, #16]
 8008da2:	4650      	mov	r0, sl
 8008da4:	b1d3      	cbz	r3, 8008ddc <_strtod_l+0x88c>
 8008da6:	4aad      	ldr	r2, [pc, #692]	; (800905c <_strtod_l+0xb0c>)
 8008da8:	402a      	ands	r2, r5
 8008daa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008dae:	f04f 31ff 	mov.w	r1, #4294967295
 8008db2:	d816      	bhi.n	8008de2 <_strtod_l+0x892>
 8008db4:	0d12      	lsrs	r2, r2, #20
 8008db6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008dba:	fa01 f303 	lsl.w	r3, r1, r3
 8008dbe:	4298      	cmp	r0, r3
 8008dc0:	d142      	bne.n	8008e48 <_strtod_l+0x8f8>
 8008dc2:	4ba7      	ldr	r3, [pc, #668]	; (8009060 <_strtod_l+0xb10>)
 8008dc4:	429d      	cmp	r5, r3
 8008dc6:	d102      	bne.n	8008dce <_strtod_l+0x87e>
 8008dc8:	3001      	adds	r0, #1
 8008dca:	f43f addf 	beq.w	800898c <_strtod_l+0x43c>
 8008dce:	4ba3      	ldr	r3, [pc, #652]	; (800905c <_strtod_l+0xb0c>)
 8008dd0:	402b      	ands	r3, r5
 8008dd2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008dd6:	f04f 0a00 	mov.w	sl, #0
 8008dda:	e7a0      	b.n	8008d1e <_strtod_l+0x7ce>
 8008ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8008de0:	e7ed      	b.n	8008dbe <_strtod_l+0x86e>
 8008de2:	460b      	mov	r3, r1
 8008de4:	e7eb      	b.n	8008dbe <_strtod_l+0x86e>
 8008de6:	bb7b      	cbnz	r3, 8008e48 <_strtod_l+0x8f8>
 8008de8:	f1ba 0f00 	cmp.w	sl, #0
 8008dec:	d12c      	bne.n	8008e48 <_strtod_l+0x8f8>
 8008dee:	9904      	ldr	r1, [sp, #16]
 8008df0:	4a9a      	ldr	r2, [pc, #616]	; (800905c <_strtod_l+0xb0c>)
 8008df2:	465b      	mov	r3, fp
 8008df4:	b1f1      	cbz	r1, 8008e34 <_strtod_l+0x8e4>
 8008df6:	ea02 010b 	and.w	r1, r2, fp
 8008dfa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008dfe:	dc19      	bgt.n	8008e34 <_strtod_l+0x8e4>
 8008e00:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008e04:	f77f ae5b 	ble.w	8008abe <_strtod_l+0x56e>
 8008e08:	4a96      	ldr	r2, [pc, #600]	; (8009064 <_strtod_l+0xb14>)
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008e10:	4650      	mov	r0, sl
 8008e12:	4659      	mov	r1, fp
 8008e14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008e18:	f7f7 fc0e 	bl	8000638 <__aeabi_dmul>
 8008e1c:	4682      	mov	sl, r0
 8008e1e:	468b      	mov	fp, r1
 8008e20:	2900      	cmp	r1, #0
 8008e22:	f47f adbe 	bne.w	80089a2 <_strtod_l+0x452>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	f47f adbb 	bne.w	80089a2 <_strtod_l+0x452>
 8008e2c:	2322      	movs	r3, #34	; 0x22
 8008e2e:	f8c9 3000 	str.w	r3, [r9]
 8008e32:	e5b6      	b.n	80089a2 <_strtod_l+0x452>
 8008e34:	4013      	ands	r3, r2
 8008e36:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008e3a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008e3e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008e42:	f04f 3aff 	mov.w	sl, #4294967295
 8008e46:	e76a      	b.n	8008d1e <_strtod_l+0x7ce>
 8008e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e4a:	b193      	cbz	r3, 8008e72 <_strtod_l+0x922>
 8008e4c:	422b      	tst	r3, r5
 8008e4e:	f43f af66 	beq.w	8008d1e <_strtod_l+0x7ce>
 8008e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e54:	9a04      	ldr	r2, [sp, #16]
 8008e56:	4650      	mov	r0, sl
 8008e58:	4659      	mov	r1, fp
 8008e5a:	b173      	cbz	r3, 8008e7a <_strtod_l+0x92a>
 8008e5c:	f7ff fb5a 	bl	8008514 <sulp>
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008e68:	f7f7 fa30 	bl	80002cc <__adddf3>
 8008e6c:	4682      	mov	sl, r0
 8008e6e:	468b      	mov	fp, r1
 8008e70:	e755      	b.n	8008d1e <_strtod_l+0x7ce>
 8008e72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e74:	ea13 0f0a 	tst.w	r3, sl
 8008e78:	e7e9      	b.n	8008e4e <_strtod_l+0x8fe>
 8008e7a:	f7ff fb4b 	bl	8008514 <sulp>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008e86:	f7f7 fa1f 	bl	80002c8 <__aeabi_dsub>
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	4682      	mov	sl, r0
 8008e90:	468b      	mov	fp, r1
 8008e92:	f7f7 fe39 	bl	8000b08 <__aeabi_dcmpeq>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	f47f ae11 	bne.w	8008abe <_strtod_l+0x56e>
 8008e9c:	e73f      	b.n	8008d1e <_strtod_l+0x7ce>
 8008e9e:	4641      	mov	r1, r8
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f001 ff30 	bl	800ad06 <__ratio>
 8008ea6:	ec57 6b10 	vmov	r6, r7, d0
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008eb0:	ee10 0a10 	vmov	r0, s0
 8008eb4:	4639      	mov	r1, r7
 8008eb6:	f7f7 fe3b 	bl	8000b30 <__aeabi_dcmple>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d077      	beq.n	8008fae <_strtod_l+0xa5e>
 8008ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d04a      	beq.n	8008f5a <_strtod_l+0xa0a>
 8008ec4:	4b68      	ldr	r3, [pc, #416]	; (8009068 <_strtod_l+0xb18>)
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008ecc:	4f66      	ldr	r7, [pc, #408]	; (8009068 <_strtod_l+0xb18>)
 8008ece:	2600      	movs	r6, #0
 8008ed0:	4b62      	ldr	r3, [pc, #392]	; (800905c <_strtod_l+0xb0c>)
 8008ed2:	402b      	ands	r3, r5
 8008ed4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ed6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ed8:	4b64      	ldr	r3, [pc, #400]	; (800906c <_strtod_l+0xb1c>)
 8008eda:	429a      	cmp	r2, r3
 8008edc:	f040 80ce 	bne.w	800907c <_strtod_l+0xb2c>
 8008ee0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008ee4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ee8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8008eec:	ec4b ab10 	vmov	d0, sl, fp
 8008ef0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008ef4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008ef8:	f001 fe40 	bl	800ab7c <__ulp>
 8008efc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f00:	ec53 2b10 	vmov	r2, r3, d0
 8008f04:	f7f7 fb98 	bl	8000638 <__aeabi_dmul>
 8008f08:	4652      	mov	r2, sl
 8008f0a:	465b      	mov	r3, fp
 8008f0c:	f7f7 f9de 	bl	80002cc <__adddf3>
 8008f10:	460b      	mov	r3, r1
 8008f12:	4952      	ldr	r1, [pc, #328]	; (800905c <_strtod_l+0xb0c>)
 8008f14:	4a56      	ldr	r2, [pc, #344]	; (8009070 <_strtod_l+0xb20>)
 8008f16:	4019      	ands	r1, r3
 8008f18:	4291      	cmp	r1, r2
 8008f1a:	4682      	mov	sl, r0
 8008f1c:	d95b      	bls.n	8008fd6 <_strtod_l+0xa86>
 8008f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f20:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d103      	bne.n	8008f30 <_strtod_l+0x9e0>
 8008f28:	9b08      	ldr	r3, [sp, #32]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	f43f ad2e 	beq.w	800898c <_strtod_l+0x43c>
 8008f30:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009060 <_strtod_l+0xb10>
 8008f34:	f04f 3aff 	mov.w	sl, #4294967295
 8008f38:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008f3a:	4648      	mov	r0, r9
 8008f3c:	f001 fb87 	bl	800a64e <_Bfree>
 8008f40:	9905      	ldr	r1, [sp, #20]
 8008f42:	4648      	mov	r0, r9
 8008f44:	f001 fb83 	bl	800a64e <_Bfree>
 8008f48:	4641      	mov	r1, r8
 8008f4a:	4648      	mov	r0, r9
 8008f4c:	f001 fb7f 	bl	800a64e <_Bfree>
 8008f50:	4621      	mov	r1, r4
 8008f52:	4648      	mov	r0, r9
 8008f54:	f001 fb7b 	bl	800a64e <_Bfree>
 8008f58:	e619      	b.n	8008b8e <_strtod_l+0x63e>
 8008f5a:	f1ba 0f00 	cmp.w	sl, #0
 8008f5e:	d11a      	bne.n	8008f96 <_strtod_l+0xa46>
 8008f60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f64:	b9eb      	cbnz	r3, 8008fa2 <_strtod_l+0xa52>
 8008f66:	2200      	movs	r2, #0
 8008f68:	4b3f      	ldr	r3, [pc, #252]	; (8009068 <_strtod_l+0xb18>)
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	f7f7 fdd5 	bl	8000b1c <__aeabi_dcmplt>
 8008f72:	b9c8      	cbnz	r0, 8008fa8 <_strtod_l+0xa58>
 8008f74:	4630      	mov	r0, r6
 8008f76:	4639      	mov	r1, r7
 8008f78:	2200      	movs	r2, #0
 8008f7a:	4b3e      	ldr	r3, [pc, #248]	; (8009074 <_strtod_l+0xb24>)
 8008f7c:	f7f7 fb5c 	bl	8000638 <__aeabi_dmul>
 8008f80:	4606      	mov	r6, r0
 8008f82:	460f      	mov	r7, r1
 8008f84:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008f88:	9618      	str	r6, [sp, #96]	; 0x60
 8008f8a:	9319      	str	r3, [sp, #100]	; 0x64
 8008f8c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008f90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008f94:	e79c      	b.n	8008ed0 <_strtod_l+0x980>
 8008f96:	f1ba 0f01 	cmp.w	sl, #1
 8008f9a:	d102      	bne.n	8008fa2 <_strtod_l+0xa52>
 8008f9c:	2d00      	cmp	r5, #0
 8008f9e:	f43f ad8e 	beq.w	8008abe <_strtod_l+0x56e>
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	4b34      	ldr	r3, [pc, #208]	; (8009078 <_strtod_l+0xb28>)
 8008fa6:	e78f      	b.n	8008ec8 <_strtod_l+0x978>
 8008fa8:	2600      	movs	r6, #0
 8008faa:	4f32      	ldr	r7, [pc, #200]	; (8009074 <_strtod_l+0xb24>)
 8008fac:	e7ea      	b.n	8008f84 <_strtod_l+0xa34>
 8008fae:	4b31      	ldr	r3, [pc, #196]	; (8009074 <_strtod_l+0xb24>)
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	4639      	mov	r1, r7
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f7f7 fb3f 	bl	8000638 <__aeabi_dmul>
 8008fba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fbc:	4606      	mov	r6, r0
 8008fbe:	460f      	mov	r7, r1
 8008fc0:	b933      	cbnz	r3, 8008fd0 <_strtod_l+0xa80>
 8008fc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fc6:	9010      	str	r0, [sp, #64]	; 0x40
 8008fc8:	9311      	str	r3, [sp, #68]	; 0x44
 8008fca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008fce:	e7df      	b.n	8008f90 <_strtod_l+0xa40>
 8008fd0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008fd4:	e7f9      	b.n	8008fca <_strtod_l+0xa7a>
 8008fd6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008fda:	9b04      	ldr	r3, [sp, #16]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1ab      	bne.n	8008f38 <_strtod_l+0x9e8>
 8008fe0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008fe4:	0d1b      	lsrs	r3, r3, #20
 8008fe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008fe8:	051b      	lsls	r3, r3, #20
 8008fea:	429a      	cmp	r2, r3
 8008fec:	465d      	mov	r5, fp
 8008fee:	d1a3      	bne.n	8008f38 <_strtod_l+0x9e8>
 8008ff0:	4639      	mov	r1, r7
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f7f7 fdd0 	bl	8000b98 <__aeabi_d2iz>
 8008ff8:	f7f7 fab4 	bl	8000564 <__aeabi_i2d>
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4602      	mov	r2, r0
 8009000:	4639      	mov	r1, r7
 8009002:	4630      	mov	r0, r6
 8009004:	f7f7 f960 	bl	80002c8 <__aeabi_dsub>
 8009008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800900a:	4606      	mov	r6, r0
 800900c:	460f      	mov	r7, r1
 800900e:	b933      	cbnz	r3, 800901e <_strtod_l+0xace>
 8009010:	f1ba 0f00 	cmp.w	sl, #0
 8009014:	d103      	bne.n	800901e <_strtod_l+0xace>
 8009016:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800901a:	2d00      	cmp	r5, #0
 800901c:	d06d      	beq.n	80090fa <_strtod_l+0xbaa>
 800901e:	a30a      	add	r3, pc, #40	; (adr r3, 8009048 <_strtod_l+0xaf8>)
 8009020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009024:	4630      	mov	r0, r6
 8009026:	4639      	mov	r1, r7
 8009028:	f7f7 fd78 	bl	8000b1c <__aeabi_dcmplt>
 800902c:	2800      	cmp	r0, #0
 800902e:	f47f acb8 	bne.w	80089a2 <_strtod_l+0x452>
 8009032:	a307      	add	r3, pc, #28	; (adr r3, 8009050 <_strtod_l+0xb00>)
 8009034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009038:	4630      	mov	r0, r6
 800903a:	4639      	mov	r1, r7
 800903c:	f7f7 fd8c 	bl	8000b58 <__aeabi_dcmpgt>
 8009040:	2800      	cmp	r0, #0
 8009042:	f43f af79 	beq.w	8008f38 <_strtod_l+0x9e8>
 8009046:	e4ac      	b.n	80089a2 <_strtod_l+0x452>
 8009048:	94a03595 	.word	0x94a03595
 800904c:	3fdfffff 	.word	0x3fdfffff
 8009050:	35afe535 	.word	0x35afe535
 8009054:	3fe00000 	.word	0x3fe00000
 8009058:	000fffff 	.word	0x000fffff
 800905c:	7ff00000 	.word	0x7ff00000
 8009060:	7fefffff 	.word	0x7fefffff
 8009064:	39500000 	.word	0x39500000
 8009068:	3ff00000 	.word	0x3ff00000
 800906c:	7fe00000 	.word	0x7fe00000
 8009070:	7c9fffff 	.word	0x7c9fffff
 8009074:	3fe00000 	.word	0x3fe00000
 8009078:	bff00000 	.word	0xbff00000
 800907c:	9b04      	ldr	r3, [sp, #16]
 800907e:	b333      	cbz	r3, 80090ce <_strtod_l+0xb7e>
 8009080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009082:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009086:	d822      	bhi.n	80090ce <_strtod_l+0xb7e>
 8009088:	a327      	add	r3, pc, #156	; (adr r3, 8009128 <_strtod_l+0xbd8>)
 800908a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908e:	4630      	mov	r0, r6
 8009090:	4639      	mov	r1, r7
 8009092:	f7f7 fd4d 	bl	8000b30 <__aeabi_dcmple>
 8009096:	b1a0      	cbz	r0, 80090c2 <_strtod_l+0xb72>
 8009098:	4639      	mov	r1, r7
 800909a:	4630      	mov	r0, r6
 800909c:	f7f7 fda4 	bl	8000be8 <__aeabi_d2uiz>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	bf08      	it	eq
 80090a4:	2001      	moveq	r0, #1
 80090a6:	f7f7 fa4d 	bl	8000544 <__aeabi_ui2d>
 80090aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090ac:	4606      	mov	r6, r0
 80090ae:	460f      	mov	r7, r1
 80090b0:	bb03      	cbnz	r3, 80090f4 <_strtod_l+0xba4>
 80090b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090b6:	9012      	str	r0, [sp, #72]	; 0x48
 80090b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80090ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80090be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80090c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090c6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80090ca:	1a9b      	subs	r3, r3, r2
 80090cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80090ce:	ed9d 0b08 	vldr	d0, [sp, #32]
 80090d2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80090d6:	f001 fd51 	bl	800ab7c <__ulp>
 80090da:	4650      	mov	r0, sl
 80090dc:	ec53 2b10 	vmov	r2, r3, d0
 80090e0:	4659      	mov	r1, fp
 80090e2:	f7f7 faa9 	bl	8000638 <__aeabi_dmul>
 80090e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80090ea:	f7f7 f8ef 	bl	80002cc <__adddf3>
 80090ee:	4682      	mov	sl, r0
 80090f0:	468b      	mov	fp, r1
 80090f2:	e772      	b.n	8008fda <_strtod_l+0xa8a>
 80090f4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80090f8:	e7df      	b.n	80090ba <_strtod_l+0xb6a>
 80090fa:	a30d      	add	r3, pc, #52	; (adr r3, 8009130 <_strtod_l+0xbe0>)
 80090fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009100:	f7f7 fd0c 	bl	8000b1c <__aeabi_dcmplt>
 8009104:	e79c      	b.n	8009040 <_strtod_l+0xaf0>
 8009106:	2300      	movs	r3, #0
 8009108:	930d      	str	r3, [sp, #52]	; 0x34
 800910a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800910c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800910e:	6013      	str	r3, [r2, #0]
 8009110:	f7ff ba61 	b.w	80085d6 <_strtod_l+0x86>
 8009114:	2b65      	cmp	r3, #101	; 0x65
 8009116:	f04f 0200 	mov.w	r2, #0
 800911a:	f43f ab4e 	beq.w	80087ba <_strtod_l+0x26a>
 800911e:	2101      	movs	r1, #1
 8009120:	4614      	mov	r4, r2
 8009122:	9104      	str	r1, [sp, #16]
 8009124:	f7ff bacb 	b.w	80086be <_strtod_l+0x16e>
 8009128:	ffc00000 	.word	0xffc00000
 800912c:	41dfffff 	.word	0x41dfffff
 8009130:	94a03595 	.word	0x94a03595
 8009134:	3fcfffff 	.word	0x3fcfffff

08009138 <_strtod_r>:
 8009138:	4b05      	ldr	r3, [pc, #20]	; (8009150 <_strtod_r+0x18>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	b410      	push	{r4}
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	4c04      	ldr	r4, [pc, #16]	; (8009154 <_strtod_r+0x1c>)
 8009142:	2b00      	cmp	r3, #0
 8009144:	bf08      	it	eq
 8009146:	4623      	moveq	r3, r4
 8009148:	f85d 4b04 	ldr.w	r4, [sp], #4
 800914c:	f7ff ba00 	b.w	8008550 <_strtod_l>
 8009150:	20000010 	.word	0x20000010
 8009154:	20000074 	.word	0x20000074

08009158 <_strtol_l.isra.0>:
 8009158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800915c:	4680      	mov	r8, r0
 800915e:	4689      	mov	r9, r1
 8009160:	4692      	mov	sl, r2
 8009162:	461e      	mov	r6, r3
 8009164:	460f      	mov	r7, r1
 8009166:	463d      	mov	r5, r7
 8009168:	9808      	ldr	r0, [sp, #32]
 800916a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800916e:	f001 fa01 	bl	800a574 <__locale_ctype_ptr_l>
 8009172:	4420      	add	r0, r4
 8009174:	7843      	ldrb	r3, [r0, #1]
 8009176:	f013 0308 	ands.w	r3, r3, #8
 800917a:	d132      	bne.n	80091e2 <_strtol_l.isra.0+0x8a>
 800917c:	2c2d      	cmp	r4, #45	; 0x2d
 800917e:	d132      	bne.n	80091e6 <_strtol_l.isra.0+0x8e>
 8009180:	787c      	ldrb	r4, [r7, #1]
 8009182:	1cbd      	adds	r5, r7, #2
 8009184:	2201      	movs	r2, #1
 8009186:	2e00      	cmp	r6, #0
 8009188:	d05d      	beq.n	8009246 <_strtol_l.isra.0+0xee>
 800918a:	2e10      	cmp	r6, #16
 800918c:	d109      	bne.n	80091a2 <_strtol_l.isra.0+0x4a>
 800918e:	2c30      	cmp	r4, #48	; 0x30
 8009190:	d107      	bne.n	80091a2 <_strtol_l.isra.0+0x4a>
 8009192:	782b      	ldrb	r3, [r5, #0]
 8009194:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009198:	2b58      	cmp	r3, #88	; 0x58
 800919a:	d14f      	bne.n	800923c <_strtol_l.isra.0+0xe4>
 800919c:	786c      	ldrb	r4, [r5, #1]
 800919e:	2610      	movs	r6, #16
 80091a0:	3502      	adds	r5, #2
 80091a2:	2a00      	cmp	r2, #0
 80091a4:	bf14      	ite	ne
 80091a6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80091aa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80091ae:	2700      	movs	r7, #0
 80091b0:	fbb1 fcf6 	udiv	ip, r1, r6
 80091b4:	4638      	mov	r0, r7
 80091b6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80091ba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80091be:	2b09      	cmp	r3, #9
 80091c0:	d817      	bhi.n	80091f2 <_strtol_l.isra.0+0x9a>
 80091c2:	461c      	mov	r4, r3
 80091c4:	42a6      	cmp	r6, r4
 80091c6:	dd23      	ble.n	8009210 <_strtol_l.isra.0+0xb8>
 80091c8:	1c7b      	adds	r3, r7, #1
 80091ca:	d007      	beq.n	80091dc <_strtol_l.isra.0+0x84>
 80091cc:	4584      	cmp	ip, r0
 80091ce:	d31c      	bcc.n	800920a <_strtol_l.isra.0+0xb2>
 80091d0:	d101      	bne.n	80091d6 <_strtol_l.isra.0+0x7e>
 80091d2:	45a6      	cmp	lr, r4
 80091d4:	db19      	blt.n	800920a <_strtol_l.isra.0+0xb2>
 80091d6:	fb00 4006 	mla	r0, r0, r6, r4
 80091da:	2701      	movs	r7, #1
 80091dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091e0:	e7eb      	b.n	80091ba <_strtol_l.isra.0+0x62>
 80091e2:	462f      	mov	r7, r5
 80091e4:	e7bf      	b.n	8009166 <_strtol_l.isra.0+0xe>
 80091e6:	2c2b      	cmp	r4, #43	; 0x2b
 80091e8:	bf04      	itt	eq
 80091ea:	1cbd      	addeq	r5, r7, #2
 80091ec:	787c      	ldrbeq	r4, [r7, #1]
 80091ee:	461a      	mov	r2, r3
 80091f0:	e7c9      	b.n	8009186 <_strtol_l.isra.0+0x2e>
 80091f2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80091f6:	2b19      	cmp	r3, #25
 80091f8:	d801      	bhi.n	80091fe <_strtol_l.isra.0+0xa6>
 80091fa:	3c37      	subs	r4, #55	; 0x37
 80091fc:	e7e2      	b.n	80091c4 <_strtol_l.isra.0+0x6c>
 80091fe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009202:	2b19      	cmp	r3, #25
 8009204:	d804      	bhi.n	8009210 <_strtol_l.isra.0+0xb8>
 8009206:	3c57      	subs	r4, #87	; 0x57
 8009208:	e7dc      	b.n	80091c4 <_strtol_l.isra.0+0x6c>
 800920a:	f04f 37ff 	mov.w	r7, #4294967295
 800920e:	e7e5      	b.n	80091dc <_strtol_l.isra.0+0x84>
 8009210:	1c7b      	adds	r3, r7, #1
 8009212:	d108      	bne.n	8009226 <_strtol_l.isra.0+0xce>
 8009214:	2322      	movs	r3, #34	; 0x22
 8009216:	f8c8 3000 	str.w	r3, [r8]
 800921a:	4608      	mov	r0, r1
 800921c:	f1ba 0f00 	cmp.w	sl, #0
 8009220:	d107      	bne.n	8009232 <_strtol_l.isra.0+0xda>
 8009222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009226:	b102      	cbz	r2, 800922a <_strtol_l.isra.0+0xd2>
 8009228:	4240      	negs	r0, r0
 800922a:	f1ba 0f00 	cmp.w	sl, #0
 800922e:	d0f8      	beq.n	8009222 <_strtol_l.isra.0+0xca>
 8009230:	b10f      	cbz	r7, 8009236 <_strtol_l.isra.0+0xde>
 8009232:	f105 39ff 	add.w	r9, r5, #4294967295
 8009236:	f8ca 9000 	str.w	r9, [sl]
 800923a:	e7f2      	b.n	8009222 <_strtol_l.isra.0+0xca>
 800923c:	2430      	movs	r4, #48	; 0x30
 800923e:	2e00      	cmp	r6, #0
 8009240:	d1af      	bne.n	80091a2 <_strtol_l.isra.0+0x4a>
 8009242:	2608      	movs	r6, #8
 8009244:	e7ad      	b.n	80091a2 <_strtol_l.isra.0+0x4a>
 8009246:	2c30      	cmp	r4, #48	; 0x30
 8009248:	d0a3      	beq.n	8009192 <_strtol_l.isra.0+0x3a>
 800924a:	260a      	movs	r6, #10
 800924c:	e7a9      	b.n	80091a2 <_strtol_l.isra.0+0x4a>
	...

08009250 <_strtol_r>:
 8009250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009252:	4c06      	ldr	r4, [pc, #24]	; (800926c <_strtol_r+0x1c>)
 8009254:	4d06      	ldr	r5, [pc, #24]	; (8009270 <_strtol_r+0x20>)
 8009256:	6824      	ldr	r4, [r4, #0]
 8009258:	6a24      	ldr	r4, [r4, #32]
 800925a:	2c00      	cmp	r4, #0
 800925c:	bf08      	it	eq
 800925e:	462c      	moveq	r4, r5
 8009260:	9400      	str	r4, [sp, #0]
 8009262:	f7ff ff79 	bl	8009158 <_strtol_l.isra.0>
 8009266:	b003      	add	sp, #12
 8009268:	bd30      	pop	{r4, r5, pc}
 800926a:	bf00      	nop
 800926c:	20000010 	.word	0x20000010
 8009270:	20000074 	.word	0x20000074

08009274 <strtol>:
 8009274:	4b08      	ldr	r3, [pc, #32]	; (8009298 <strtol+0x24>)
 8009276:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009278:	681c      	ldr	r4, [r3, #0]
 800927a:	4d08      	ldr	r5, [pc, #32]	; (800929c <strtol+0x28>)
 800927c:	6a23      	ldr	r3, [r4, #32]
 800927e:	2b00      	cmp	r3, #0
 8009280:	bf08      	it	eq
 8009282:	462b      	moveq	r3, r5
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	4613      	mov	r3, r2
 8009288:	460a      	mov	r2, r1
 800928a:	4601      	mov	r1, r0
 800928c:	4620      	mov	r0, r4
 800928e:	f7ff ff63 	bl	8009158 <_strtol_l.isra.0>
 8009292:	b003      	add	sp, #12
 8009294:	bd30      	pop	{r4, r5, pc}
 8009296:	bf00      	nop
 8009298:	20000010 	.word	0x20000010
 800929c:	20000074 	.word	0x20000074

080092a0 <quorem>:
 80092a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	6903      	ldr	r3, [r0, #16]
 80092a6:	690c      	ldr	r4, [r1, #16]
 80092a8:	42a3      	cmp	r3, r4
 80092aa:	4680      	mov	r8, r0
 80092ac:	f2c0 8082 	blt.w	80093b4 <quorem+0x114>
 80092b0:	3c01      	subs	r4, #1
 80092b2:	f101 0714 	add.w	r7, r1, #20
 80092b6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80092ba:	f100 0614 	add.w	r6, r0, #20
 80092be:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80092c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80092c6:	eb06 030c 	add.w	r3, r6, ip
 80092ca:	3501      	adds	r5, #1
 80092cc:	eb07 090c 	add.w	r9, r7, ip
 80092d0:	9301      	str	r3, [sp, #4]
 80092d2:	fbb0 f5f5 	udiv	r5, r0, r5
 80092d6:	b395      	cbz	r5, 800933e <quorem+0x9e>
 80092d8:	f04f 0a00 	mov.w	sl, #0
 80092dc:	4638      	mov	r0, r7
 80092de:	46b6      	mov	lr, r6
 80092e0:	46d3      	mov	fp, sl
 80092e2:	f850 2b04 	ldr.w	r2, [r0], #4
 80092e6:	b293      	uxth	r3, r2
 80092e8:	fb05 a303 	mla	r3, r5, r3, sl
 80092ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	ebab 0303 	sub.w	r3, fp, r3
 80092f6:	0c12      	lsrs	r2, r2, #16
 80092f8:	f8de b000 	ldr.w	fp, [lr]
 80092fc:	fb05 a202 	mla	r2, r5, r2, sl
 8009300:	fa13 f38b 	uxtah	r3, r3, fp
 8009304:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009308:	fa1f fb82 	uxth.w	fp, r2
 800930c:	f8de 2000 	ldr.w	r2, [lr]
 8009310:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009314:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009318:	b29b      	uxth	r3, r3
 800931a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800931e:	4581      	cmp	r9, r0
 8009320:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009324:	f84e 3b04 	str.w	r3, [lr], #4
 8009328:	d2db      	bcs.n	80092e2 <quorem+0x42>
 800932a:	f856 300c 	ldr.w	r3, [r6, ip]
 800932e:	b933      	cbnz	r3, 800933e <quorem+0x9e>
 8009330:	9b01      	ldr	r3, [sp, #4]
 8009332:	3b04      	subs	r3, #4
 8009334:	429e      	cmp	r6, r3
 8009336:	461a      	mov	r2, r3
 8009338:	d330      	bcc.n	800939c <quorem+0xfc>
 800933a:	f8c8 4010 	str.w	r4, [r8, #16]
 800933e:	4640      	mov	r0, r8
 8009340:	f001 fba4 	bl	800aa8c <__mcmp>
 8009344:	2800      	cmp	r0, #0
 8009346:	db25      	blt.n	8009394 <quorem+0xf4>
 8009348:	3501      	adds	r5, #1
 800934a:	4630      	mov	r0, r6
 800934c:	f04f 0c00 	mov.w	ip, #0
 8009350:	f857 2b04 	ldr.w	r2, [r7], #4
 8009354:	f8d0 e000 	ldr.w	lr, [r0]
 8009358:	b293      	uxth	r3, r2
 800935a:	ebac 0303 	sub.w	r3, ip, r3
 800935e:	0c12      	lsrs	r2, r2, #16
 8009360:	fa13 f38e 	uxtah	r3, r3, lr
 8009364:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009368:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800936c:	b29b      	uxth	r3, r3
 800936e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009372:	45b9      	cmp	r9, r7
 8009374:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009378:	f840 3b04 	str.w	r3, [r0], #4
 800937c:	d2e8      	bcs.n	8009350 <quorem+0xb0>
 800937e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009382:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009386:	b92a      	cbnz	r2, 8009394 <quorem+0xf4>
 8009388:	3b04      	subs	r3, #4
 800938a:	429e      	cmp	r6, r3
 800938c:	461a      	mov	r2, r3
 800938e:	d30b      	bcc.n	80093a8 <quorem+0x108>
 8009390:	f8c8 4010 	str.w	r4, [r8, #16]
 8009394:	4628      	mov	r0, r5
 8009396:	b003      	add	sp, #12
 8009398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800939c:	6812      	ldr	r2, [r2, #0]
 800939e:	3b04      	subs	r3, #4
 80093a0:	2a00      	cmp	r2, #0
 80093a2:	d1ca      	bne.n	800933a <quorem+0x9a>
 80093a4:	3c01      	subs	r4, #1
 80093a6:	e7c5      	b.n	8009334 <quorem+0x94>
 80093a8:	6812      	ldr	r2, [r2, #0]
 80093aa:	3b04      	subs	r3, #4
 80093ac:	2a00      	cmp	r2, #0
 80093ae:	d1ef      	bne.n	8009390 <quorem+0xf0>
 80093b0:	3c01      	subs	r4, #1
 80093b2:	e7ea      	b.n	800938a <quorem+0xea>
 80093b4:	2000      	movs	r0, #0
 80093b6:	e7ee      	b.n	8009396 <quorem+0xf6>

080093b8 <_dtoa_r>:
 80093b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093bc:	ec57 6b10 	vmov	r6, r7, d0
 80093c0:	b097      	sub	sp, #92	; 0x5c
 80093c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80093c4:	9106      	str	r1, [sp, #24]
 80093c6:	4604      	mov	r4, r0
 80093c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80093ca:	9312      	str	r3, [sp, #72]	; 0x48
 80093cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80093d0:	e9cd 6700 	strd	r6, r7, [sp]
 80093d4:	b93d      	cbnz	r5, 80093e6 <_dtoa_r+0x2e>
 80093d6:	2010      	movs	r0, #16
 80093d8:	f001 f8e0 	bl	800a59c <malloc>
 80093dc:	6260      	str	r0, [r4, #36]	; 0x24
 80093de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80093e2:	6005      	str	r5, [r0, #0]
 80093e4:	60c5      	str	r5, [r0, #12]
 80093e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093e8:	6819      	ldr	r1, [r3, #0]
 80093ea:	b151      	cbz	r1, 8009402 <_dtoa_r+0x4a>
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	604a      	str	r2, [r1, #4]
 80093f0:	2301      	movs	r3, #1
 80093f2:	4093      	lsls	r3, r2
 80093f4:	608b      	str	r3, [r1, #8]
 80093f6:	4620      	mov	r0, r4
 80093f8:	f001 f929 	bl	800a64e <_Bfree>
 80093fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093fe:	2200      	movs	r2, #0
 8009400:	601a      	str	r2, [r3, #0]
 8009402:	1e3b      	subs	r3, r7, #0
 8009404:	bfbb      	ittet	lt
 8009406:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800940a:	9301      	strlt	r3, [sp, #4]
 800940c:	2300      	movge	r3, #0
 800940e:	2201      	movlt	r2, #1
 8009410:	bfac      	ite	ge
 8009412:	f8c8 3000 	strge.w	r3, [r8]
 8009416:	f8c8 2000 	strlt.w	r2, [r8]
 800941a:	4baf      	ldr	r3, [pc, #700]	; (80096d8 <_dtoa_r+0x320>)
 800941c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009420:	ea33 0308 	bics.w	r3, r3, r8
 8009424:	d114      	bne.n	8009450 <_dtoa_r+0x98>
 8009426:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009428:	f242 730f 	movw	r3, #9999	; 0x270f
 800942c:	6013      	str	r3, [r2, #0]
 800942e:	9b00      	ldr	r3, [sp, #0]
 8009430:	b923      	cbnz	r3, 800943c <_dtoa_r+0x84>
 8009432:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009436:	2800      	cmp	r0, #0
 8009438:	f000 8542 	beq.w	8009ec0 <_dtoa_r+0xb08>
 800943c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800943e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80096ec <_dtoa_r+0x334>
 8009442:	2b00      	cmp	r3, #0
 8009444:	f000 8544 	beq.w	8009ed0 <_dtoa_r+0xb18>
 8009448:	f10b 0303 	add.w	r3, fp, #3
 800944c:	f000 bd3e 	b.w	8009ecc <_dtoa_r+0xb14>
 8009450:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009454:	2200      	movs	r2, #0
 8009456:	2300      	movs	r3, #0
 8009458:	4630      	mov	r0, r6
 800945a:	4639      	mov	r1, r7
 800945c:	f7f7 fb54 	bl	8000b08 <__aeabi_dcmpeq>
 8009460:	4681      	mov	r9, r0
 8009462:	b168      	cbz	r0, 8009480 <_dtoa_r+0xc8>
 8009464:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009466:	2301      	movs	r3, #1
 8009468:	6013      	str	r3, [r2, #0]
 800946a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 8524 	beq.w	8009eba <_dtoa_r+0xb02>
 8009472:	4b9a      	ldr	r3, [pc, #616]	; (80096dc <_dtoa_r+0x324>)
 8009474:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009476:	f103 3bff 	add.w	fp, r3, #4294967295
 800947a:	6013      	str	r3, [r2, #0]
 800947c:	f000 bd28 	b.w	8009ed0 <_dtoa_r+0xb18>
 8009480:	aa14      	add	r2, sp, #80	; 0x50
 8009482:	a915      	add	r1, sp, #84	; 0x54
 8009484:	ec47 6b10 	vmov	d0, r6, r7
 8009488:	4620      	mov	r0, r4
 800948a:	f001 fbed 	bl	800ac68 <__d2b>
 800948e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009492:	9004      	str	r0, [sp, #16]
 8009494:	2d00      	cmp	r5, #0
 8009496:	d07c      	beq.n	8009592 <_dtoa_r+0x1da>
 8009498:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800949c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80094a0:	46b2      	mov	sl, r6
 80094a2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80094a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80094aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80094ae:	2200      	movs	r2, #0
 80094b0:	4b8b      	ldr	r3, [pc, #556]	; (80096e0 <_dtoa_r+0x328>)
 80094b2:	4650      	mov	r0, sl
 80094b4:	4659      	mov	r1, fp
 80094b6:	f7f6 ff07 	bl	80002c8 <__aeabi_dsub>
 80094ba:	a381      	add	r3, pc, #516	; (adr r3, 80096c0 <_dtoa_r+0x308>)
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	f7f7 f8ba 	bl	8000638 <__aeabi_dmul>
 80094c4:	a380      	add	r3, pc, #512	; (adr r3, 80096c8 <_dtoa_r+0x310>)
 80094c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ca:	f7f6 feff 	bl	80002cc <__adddf3>
 80094ce:	4606      	mov	r6, r0
 80094d0:	4628      	mov	r0, r5
 80094d2:	460f      	mov	r7, r1
 80094d4:	f7f7 f846 	bl	8000564 <__aeabi_i2d>
 80094d8:	a37d      	add	r3, pc, #500	; (adr r3, 80096d0 <_dtoa_r+0x318>)
 80094da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094de:	f7f7 f8ab 	bl	8000638 <__aeabi_dmul>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4630      	mov	r0, r6
 80094e8:	4639      	mov	r1, r7
 80094ea:	f7f6 feef 	bl	80002cc <__adddf3>
 80094ee:	4606      	mov	r6, r0
 80094f0:	460f      	mov	r7, r1
 80094f2:	f7f7 fb51 	bl	8000b98 <__aeabi_d2iz>
 80094f6:	2200      	movs	r2, #0
 80094f8:	4682      	mov	sl, r0
 80094fa:	2300      	movs	r3, #0
 80094fc:	4630      	mov	r0, r6
 80094fe:	4639      	mov	r1, r7
 8009500:	f7f7 fb0c 	bl	8000b1c <__aeabi_dcmplt>
 8009504:	b148      	cbz	r0, 800951a <_dtoa_r+0x162>
 8009506:	4650      	mov	r0, sl
 8009508:	f7f7 f82c 	bl	8000564 <__aeabi_i2d>
 800950c:	4632      	mov	r2, r6
 800950e:	463b      	mov	r3, r7
 8009510:	f7f7 fafa 	bl	8000b08 <__aeabi_dcmpeq>
 8009514:	b908      	cbnz	r0, 800951a <_dtoa_r+0x162>
 8009516:	f10a 3aff 	add.w	sl, sl, #4294967295
 800951a:	f1ba 0f16 	cmp.w	sl, #22
 800951e:	d859      	bhi.n	80095d4 <_dtoa_r+0x21c>
 8009520:	4970      	ldr	r1, [pc, #448]	; (80096e4 <_dtoa_r+0x32c>)
 8009522:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009526:	e9dd 2300 	ldrd	r2, r3, [sp]
 800952a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800952e:	f7f7 fb13 	bl	8000b58 <__aeabi_dcmpgt>
 8009532:	2800      	cmp	r0, #0
 8009534:	d050      	beq.n	80095d8 <_dtoa_r+0x220>
 8009536:	f10a 3aff 	add.w	sl, sl, #4294967295
 800953a:	2300      	movs	r3, #0
 800953c:	930f      	str	r3, [sp, #60]	; 0x3c
 800953e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009540:	1b5d      	subs	r5, r3, r5
 8009542:	f1b5 0801 	subs.w	r8, r5, #1
 8009546:	bf49      	itett	mi
 8009548:	f1c5 0301 	rsbmi	r3, r5, #1
 800954c:	2300      	movpl	r3, #0
 800954e:	9305      	strmi	r3, [sp, #20]
 8009550:	f04f 0800 	movmi.w	r8, #0
 8009554:	bf58      	it	pl
 8009556:	9305      	strpl	r3, [sp, #20]
 8009558:	f1ba 0f00 	cmp.w	sl, #0
 800955c:	db3e      	blt.n	80095dc <_dtoa_r+0x224>
 800955e:	2300      	movs	r3, #0
 8009560:	44d0      	add	r8, sl
 8009562:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009566:	9307      	str	r3, [sp, #28]
 8009568:	9b06      	ldr	r3, [sp, #24]
 800956a:	2b09      	cmp	r3, #9
 800956c:	f200 8090 	bhi.w	8009690 <_dtoa_r+0x2d8>
 8009570:	2b05      	cmp	r3, #5
 8009572:	bfc4      	itt	gt
 8009574:	3b04      	subgt	r3, #4
 8009576:	9306      	strgt	r3, [sp, #24]
 8009578:	9b06      	ldr	r3, [sp, #24]
 800957a:	f1a3 0302 	sub.w	r3, r3, #2
 800957e:	bfcc      	ite	gt
 8009580:	2500      	movgt	r5, #0
 8009582:	2501      	movle	r5, #1
 8009584:	2b03      	cmp	r3, #3
 8009586:	f200 808f 	bhi.w	80096a8 <_dtoa_r+0x2f0>
 800958a:	e8df f003 	tbb	[pc, r3]
 800958e:	7f7d      	.short	0x7f7d
 8009590:	7131      	.short	0x7131
 8009592:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009596:	441d      	add	r5, r3
 8009598:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800959c:	2820      	cmp	r0, #32
 800959e:	dd13      	ble.n	80095c8 <_dtoa_r+0x210>
 80095a0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80095a4:	9b00      	ldr	r3, [sp, #0]
 80095a6:	fa08 f800 	lsl.w	r8, r8, r0
 80095aa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80095ae:	fa23 f000 	lsr.w	r0, r3, r0
 80095b2:	ea48 0000 	orr.w	r0, r8, r0
 80095b6:	f7f6 ffc5 	bl	8000544 <__aeabi_ui2d>
 80095ba:	2301      	movs	r3, #1
 80095bc:	4682      	mov	sl, r0
 80095be:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80095c2:	3d01      	subs	r5, #1
 80095c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80095c6:	e772      	b.n	80094ae <_dtoa_r+0xf6>
 80095c8:	9b00      	ldr	r3, [sp, #0]
 80095ca:	f1c0 0020 	rsb	r0, r0, #32
 80095ce:	fa03 f000 	lsl.w	r0, r3, r0
 80095d2:	e7f0      	b.n	80095b6 <_dtoa_r+0x1fe>
 80095d4:	2301      	movs	r3, #1
 80095d6:	e7b1      	b.n	800953c <_dtoa_r+0x184>
 80095d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80095da:	e7b0      	b.n	800953e <_dtoa_r+0x186>
 80095dc:	9b05      	ldr	r3, [sp, #20]
 80095de:	eba3 030a 	sub.w	r3, r3, sl
 80095e2:	9305      	str	r3, [sp, #20]
 80095e4:	f1ca 0300 	rsb	r3, sl, #0
 80095e8:	9307      	str	r3, [sp, #28]
 80095ea:	2300      	movs	r3, #0
 80095ec:	930e      	str	r3, [sp, #56]	; 0x38
 80095ee:	e7bb      	b.n	8009568 <_dtoa_r+0x1b0>
 80095f0:	2301      	movs	r3, #1
 80095f2:	930a      	str	r3, [sp, #40]	; 0x28
 80095f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	dd59      	ble.n	80096ae <_dtoa_r+0x2f6>
 80095fa:	9302      	str	r3, [sp, #8]
 80095fc:	4699      	mov	r9, r3
 80095fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009600:	2200      	movs	r2, #0
 8009602:	6072      	str	r2, [r6, #4]
 8009604:	2204      	movs	r2, #4
 8009606:	f102 0014 	add.w	r0, r2, #20
 800960a:	4298      	cmp	r0, r3
 800960c:	6871      	ldr	r1, [r6, #4]
 800960e:	d953      	bls.n	80096b8 <_dtoa_r+0x300>
 8009610:	4620      	mov	r0, r4
 8009612:	f000 ffe8 	bl	800a5e6 <_Balloc>
 8009616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009618:	6030      	str	r0, [r6, #0]
 800961a:	f1b9 0f0e 	cmp.w	r9, #14
 800961e:	f8d3 b000 	ldr.w	fp, [r3]
 8009622:	f200 80e6 	bhi.w	80097f2 <_dtoa_r+0x43a>
 8009626:	2d00      	cmp	r5, #0
 8009628:	f000 80e3 	beq.w	80097f2 <_dtoa_r+0x43a>
 800962c:	ed9d 7b00 	vldr	d7, [sp]
 8009630:	f1ba 0f00 	cmp.w	sl, #0
 8009634:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009638:	dd74      	ble.n	8009724 <_dtoa_r+0x36c>
 800963a:	4a2a      	ldr	r2, [pc, #168]	; (80096e4 <_dtoa_r+0x32c>)
 800963c:	f00a 030f 	and.w	r3, sl, #15
 8009640:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009644:	ed93 7b00 	vldr	d7, [r3]
 8009648:	ea4f 162a 	mov.w	r6, sl, asr #4
 800964c:	06f0      	lsls	r0, r6, #27
 800964e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009652:	d565      	bpl.n	8009720 <_dtoa_r+0x368>
 8009654:	4b24      	ldr	r3, [pc, #144]	; (80096e8 <_dtoa_r+0x330>)
 8009656:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800965a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800965e:	f7f7 f915 	bl	800088c <__aeabi_ddiv>
 8009662:	e9cd 0100 	strd	r0, r1, [sp]
 8009666:	f006 060f 	and.w	r6, r6, #15
 800966a:	2503      	movs	r5, #3
 800966c:	4f1e      	ldr	r7, [pc, #120]	; (80096e8 <_dtoa_r+0x330>)
 800966e:	e04c      	b.n	800970a <_dtoa_r+0x352>
 8009670:	2301      	movs	r3, #1
 8009672:	930a      	str	r3, [sp, #40]	; 0x28
 8009674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009676:	4453      	add	r3, sl
 8009678:	f103 0901 	add.w	r9, r3, #1
 800967c:	9302      	str	r3, [sp, #8]
 800967e:	464b      	mov	r3, r9
 8009680:	2b01      	cmp	r3, #1
 8009682:	bfb8      	it	lt
 8009684:	2301      	movlt	r3, #1
 8009686:	e7ba      	b.n	80095fe <_dtoa_r+0x246>
 8009688:	2300      	movs	r3, #0
 800968a:	e7b2      	b.n	80095f2 <_dtoa_r+0x23a>
 800968c:	2300      	movs	r3, #0
 800968e:	e7f0      	b.n	8009672 <_dtoa_r+0x2ba>
 8009690:	2501      	movs	r5, #1
 8009692:	2300      	movs	r3, #0
 8009694:	9306      	str	r3, [sp, #24]
 8009696:	950a      	str	r5, [sp, #40]	; 0x28
 8009698:	f04f 33ff 	mov.w	r3, #4294967295
 800969c:	9302      	str	r3, [sp, #8]
 800969e:	4699      	mov	r9, r3
 80096a0:	2200      	movs	r2, #0
 80096a2:	2312      	movs	r3, #18
 80096a4:	920b      	str	r2, [sp, #44]	; 0x2c
 80096a6:	e7aa      	b.n	80095fe <_dtoa_r+0x246>
 80096a8:	2301      	movs	r3, #1
 80096aa:	930a      	str	r3, [sp, #40]	; 0x28
 80096ac:	e7f4      	b.n	8009698 <_dtoa_r+0x2e0>
 80096ae:	2301      	movs	r3, #1
 80096b0:	9302      	str	r3, [sp, #8]
 80096b2:	4699      	mov	r9, r3
 80096b4:	461a      	mov	r2, r3
 80096b6:	e7f5      	b.n	80096a4 <_dtoa_r+0x2ec>
 80096b8:	3101      	adds	r1, #1
 80096ba:	6071      	str	r1, [r6, #4]
 80096bc:	0052      	lsls	r2, r2, #1
 80096be:	e7a2      	b.n	8009606 <_dtoa_r+0x24e>
 80096c0:	636f4361 	.word	0x636f4361
 80096c4:	3fd287a7 	.word	0x3fd287a7
 80096c8:	8b60c8b3 	.word	0x8b60c8b3
 80096cc:	3fc68a28 	.word	0x3fc68a28
 80096d0:	509f79fb 	.word	0x509f79fb
 80096d4:	3fd34413 	.word	0x3fd34413
 80096d8:	7ff00000 	.word	0x7ff00000
 80096dc:	0800b349 	.word	0x0800b349
 80096e0:	3ff80000 	.word	0x3ff80000
 80096e4:	0800b408 	.word	0x0800b408
 80096e8:	0800b3e0 	.word	0x0800b3e0
 80096ec:	0800b3d1 	.word	0x0800b3d1
 80096f0:	07f1      	lsls	r1, r6, #31
 80096f2:	d508      	bpl.n	8009706 <_dtoa_r+0x34e>
 80096f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80096f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096fc:	f7f6 ff9c 	bl	8000638 <__aeabi_dmul>
 8009700:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009704:	3501      	adds	r5, #1
 8009706:	1076      	asrs	r6, r6, #1
 8009708:	3708      	adds	r7, #8
 800970a:	2e00      	cmp	r6, #0
 800970c:	d1f0      	bne.n	80096f0 <_dtoa_r+0x338>
 800970e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009712:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009716:	f7f7 f8b9 	bl	800088c <__aeabi_ddiv>
 800971a:	e9cd 0100 	strd	r0, r1, [sp]
 800971e:	e01a      	b.n	8009756 <_dtoa_r+0x39e>
 8009720:	2502      	movs	r5, #2
 8009722:	e7a3      	b.n	800966c <_dtoa_r+0x2b4>
 8009724:	f000 80a0 	beq.w	8009868 <_dtoa_r+0x4b0>
 8009728:	f1ca 0600 	rsb	r6, sl, #0
 800972c:	4b9f      	ldr	r3, [pc, #636]	; (80099ac <_dtoa_r+0x5f4>)
 800972e:	4fa0      	ldr	r7, [pc, #640]	; (80099b0 <_dtoa_r+0x5f8>)
 8009730:	f006 020f 	and.w	r2, r6, #15
 8009734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009740:	f7f6 ff7a 	bl	8000638 <__aeabi_dmul>
 8009744:	e9cd 0100 	strd	r0, r1, [sp]
 8009748:	1136      	asrs	r6, r6, #4
 800974a:	2300      	movs	r3, #0
 800974c:	2502      	movs	r5, #2
 800974e:	2e00      	cmp	r6, #0
 8009750:	d17f      	bne.n	8009852 <_dtoa_r+0x49a>
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1e1      	bne.n	800971a <_dtoa_r+0x362>
 8009756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009758:	2b00      	cmp	r3, #0
 800975a:	f000 8087 	beq.w	800986c <_dtoa_r+0x4b4>
 800975e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009762:	2200      	movs	r2, #0
 8009764:	4b93      	ldr	r3, [pc, #588]	; (80099b4 <_dtoa_r+0x5fc>)
 8009766:	4630      	mov	r0, r6
 8009768:	4639      	mov	r1, r7
 800976a:	f7f7 f9d7 	bl	8000b1c <__aeabi_dcmplt>
 800976e:	2800      	cmp	r0, #0
 8009770:	d07c      	beq.n	800986c <_dtoa_r+0x4b4>
 8009772:	f1b9 0f00 	cmp.w	r9, #0
 8009776:	d079      	beq.n	800986c <_dtoa_r+0x4b4>
 8009778:	9b02      	ldr	r3, [sp, #8]
 800977a:	2b00      	cmp	r3, #0
 800977c:	dd35      	ble.n	80097ea <_dtoa_r+0x432>
 800977e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009782:	9308      	str	r3, [sp, #32]
 8009784:	4639      	mov	r1, r7
 8009786:	2200      	movs	r2, #0
 8009788:	4b8b      	ldr	r3, [pc, #556]	; (80099b8 <_dtoa_r+0x600>)
 800978a:	4630      	mov	r0, r6
 800978c:	f7f6 ff54 	bl	8000638 <__aeabi_dmul>
 8009790:	e9cd 0100 	strd	r0, r1, [sp]
 8009794:	9f02      	ldr	r7, [sp, #8]
 8009796:	3501      	adds	r5, #1
 8009798:	4628      	mov	r0, r5
 800979a:	f7f6 fee3 	bl	8000564 <__aeabi_i2d>
 800979e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097a2:	f7f6 ff49 	bl	8000638 <__aeabi_dmul>
 80097a6:	2200      	movs	r2, #0
 80097a8:	4b84      	ldr	r3, [pc, #528]	; (80099bc <_dtoa_r+0x604>)
 80097aa:	f7f6 fd8f 	bl	80002cc <__adddf3>
 80097ae:	4605      	mov	r5, r0
 80097b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80097b4:	2f00      	cmp	r7, #0
 80097b6:	d15d      	bne.n	8009874 <_dtoa_r+0x4bc>
 80097b8:	2200      	movs	r2, #0
 80097ba:	4b81      	ldr	r3, [pc, #516]	; (80099c0 <_dtoa_r+0x608>)
 80097bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097c0:	f7f6 fd82 	bl	80002c8 <__aeabi_dsub>
 80097c4:	462a      	mov	r2, r5
 80097c6:	4633      	mov	r3, r6
 80097c8:	e9cd 0100 	strd	r0, r1, [sp]
 80097cc:	f7f7 f9c4 	bl	8000b58 <__aeabi_dcmpgt>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	f040 8288 	bne.w	8009ce6 <_dtoa_r+0x92e>
 80097d6:	462a      	mov	r2, r5
 80097d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80097dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097e0:	f7f7 f99c 	bl	8000b1c <__aeabi_dcmplt>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	f040 827c 	bne.w	8009ce2 <_dtoa_r+0x92a>
 80097ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80097ee:	e9cd 2300 	strd	r2, r3, [sp]
 80097f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f2c0 8150 	blt.w	8009a9a <_dtoa_r+0x6e2>
 80097fa:	f1ba 0f0e 	cmp.w	sl, #14
 80097fe:	f300 814c 	bgt.w	8009a9a <_dtoa_r+0x6e2>
 8009802:	4b6a      	ldr	r3, [pc, #424]	; (80099ac <_dtoa_r+0x5f4>)
 8009804:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009808:	ed93 7b00 	vldr	d7, [r3]
 800980c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800980e:	2b00      	cmp	r3, #0
 8009810:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009814:	f280 80d8 	bge.w	80099c8 <_dtoa_r+0x610>
 8009818:	f1b9 0f00 	cmp.w	r9, #0
 800981c:	f300 80d4 	bgt.w	80099c8 <_dtoa_r+0x610>
 8009820:	f040 825e 	bne.w	8009ce0 <_dtoa_r+0x928>
 8009824:	2200      	movs	r2, #0
 8009826:	4b66      	ldr	r3, [pc, #408]	; (80099c0 <_dtoa_r+0x608>)
 8009828:	ec51 0b17 	vmov	r0, r1, d7
 800982c:	f7f6 ff04 	bl	8000638 <__aeabi_dmul>
 8009830:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009834:	f7f7 f986 	bl	8000b44 <__aeabi_dcmpge>
 8009838:	464f      	mov	r7, r9
 800983a:	464e      	mov	r6, r9
 800983c:	2800      	cmp	r0, #0
 800983e:	f040 8234 	bne.w	8009caa <_dtoa_r+0x8f2>
 8009842:	2331      	movs	r3, #49	; 0x31
 8009844:	f10b 0501 	add.w	r5, fp, #1
 8009848:	f88b 3000 	strb.w	r3, [fp]
 800984c:	f10a 0a01 	add.w	sl, sl, #1
 8009850:	e22f      	b.n	8009cb2 <_dtoa_r+0x8fa>
 8009852:	07f2      	lsls	r2, r6, #31
 8009854:	d505      	bpl.n	8009862 <_dtoa_r+0x4aa>
 8009856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800985a:	f7f6 feed 	bl	8000638 <__aeabi_dmul>
 800985e:	3501      	adds	r5, #1
 8009860:	2301      	movs	r3, #1
 8009862:	1076      	asrs	r6, r6, #1
 8009864:	3708      	adds	r7, #8
 8009866:	e772      	b.n	800974e <_dtoa_r+0x396>
 8009868:	2502      	movs	r5, #2
 800986a:	e774      	b.n	8009756 <_dtoa_r+0x39e>
 800986c:	f8cd a020 	str.w	sl, [sp, #32]
 8009870:	464f      	mov	r7, r9
 8009872:	e791      	b.n	8009798 <_dtoa_r+0x3e0>
 8009874:	4b4d      	ldr	r3, [pc, #308]	; (80099ac <_dtoa_r+0x5f4>)
 8009876:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800987a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800987e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009880:	2b00      	cmp	r3, #0
 8009882:	d047      	beq.n	8009914 <_dtoa_r+0x55c>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	2000      	movs	r0, #0
 800988a:	494e      	ldr	r1, [pc, #312]	; (80099c4 <_dtoa_r+0x60c>)
 800988c:	f7f6 fffe 	bl	800088c <__aeabi_ddiv>
 8009890:	462a      	mov	r2, r5
 8009892:	4633      	mov	r3, r6
 8009894:	f7f6 fd18 	bl	80002c8 <__aeabi_dsub>
 8009898:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800989c:	465d      	mov	r5, fp
 800989e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098a2:	f7f7 f979 	bl	8000b98 <__aeabi_d2iz>
 80098a6:	4606      	mov	r6, r0
 80098a8:	f7f6 fe5c 	bl	8000564 <__aeabi_i2d>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098b4:	f7f6 fd08 	bl	80002c8 <__aeabi_dsub>
 80098b8:	3630      	adds	r6, #48	; 0x30
 80098ba:	f805 6b01 	strb.w	r6, [r5], #1
 80098be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80098c2:	e9cd 0100 	strd	r0, r1, [sp]
 80098c6:	f7f7 f929 	bl	8000b1c <__aeabi_dcmplt>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d163      	bne.n	8009996 <_dtoa_r+0x5de>
 80098ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098d2:	2000      	movs	r0, #0
 80098d4:	4937      	ldr	r1, [pc, #220]	; (80099b4 <_dtoa_r+0x5fc>)
 80098d6:	f7f6 fcf7 	bl	80002c8 <__aeabi_dsub>
 80098da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80098de:	f7f7 f91d 	bl	8000b1c <__aeabi_dcmplt>
 80098e2:	2800      	cmp	r0, #0
 80098e4:	f040 80b7 	bne.w	8009a56 <_dtoa_r+0x69e>
 80098e8:	eba5 030b 	sub.w	r3, r5, fp
 80098ec:	429f      	cmp	r7, r3
 80098ee:	f77f af7c 	ble.w	80097ea <_dtoa_r+0x432>
 80098f2:	2200      	movs	r2, #0
 80098f4:	4b30      	ldr	r3, [pc, #192]	; (80099b8 <_dtoa_r+0x600>)
 80098f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098fa:	f7f6 fe9d 	bl	8000638 <__aeabi_dmul>
 80098fe:	2200      	movs	r2, #0
 8009900:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009904:	4b2c      	ldr	r3, [pc, #176]	; (80099b8 <_dtoa_r+0x600>)
 8009906:	e9dd 0100 	ldrd	r0, r1, [sp]
 800990a:	f7f6 fe95 	bl	8000638 <__aeabi_dmul>
 800990e:	e9cd 0100 	strd	r0, r1, [sp]
 8009912:	e7c4      	b.n	800989e <_dtoa_r+0x4e6>
 8009914:	462a      	mov	r2, r5
 8009916:	4633      	mov	r3, r6
 8009918:	f7f6 fe8e 	bl	8000638 <__aeabi_dmul>
 800991c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009920:	eb0b 0507 	add.w	r5, fp, r7
 8009924:	465e      	mov	r6, fp
 8009926:	e9dd 0100 	ldrd	r0, r1, [sp]
 800992a:	f7f7 f935 	bl	8000b98 <__aeabi_d2iz>
 800992e:	4607      	mov	r7, r0
 8009930:	f7f6 fe18 	bl	8000564 <__aeabi_i2d>
 8009934:	3730      	adds	r7, #48	; 0x30
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800993e:	f7f6 fcc3 	bl	80002c8 <__aeabi_dsub>
 8009942:	f806 7b01 	strb.w	r7, [r6], #1
 8009946:	42ae      	cmp	r6, r5
 8009948:	e9cd 0100 	strd	r0, r1, [sp]
 800994c:	f04f 0200 	mov.w	r2, #0
 8009950:	d126      	bne.n	80099a0 <_dtoa_r+0x5e8>
 8009952:	4b1c      	ldr	r3, [pc, #112]	; (80099c4 <_dtoa_r+0x60c>)
 8009954:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009958:	f7f6 fcb8 	bl	80002cc <__adddf3>
 800995c:	4602      	mov	r2, r0
 800995e:	460b      	mov	r3, r1
 8009960:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009964:	f7f7 f8f8 	bl	8000b58 <__aeabi_dcmpgt>
 8009968:	2800      	cmp	r0, #0
 800996a:	d174      	bne.n	8009a56 <_dtoa_r+0x69e>
 800996c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009970:	2000      	movs	r0, #0
 8009972:	4914      	ldr	r1, [pc, #80]	; (80099c4 <_dtoa_r+0x60c>)
 8009974:	f7f6 fca8 	bl	80002c8 <__aeabi_dsub>
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009980:	f7f7 f8cc 	bl	8000b1c <__aeabi_dcmplt>
 8009984:	2800      	cmp	r0, #0
 8009986:	f43f af30 	beq.w	80097ea <_dtoa_r+0x432>
 800998a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800998e:	2b30      	cmp	r3, #48	; 0x30
 8009990:	f105 32ff 	add.w	r2, r5, #4294967295
 8009994:	d002      	beq.n	800999c <_dtoa_r+0x5e4>
 8009996:	f8dd a020 	ldr.w	sl, [sp, #32]
 800999a:	e04a      	b.n	8009a32 <_dtoa_r+0x67a>
 800999c:	4615      	mov	r5, r2
 800999e:	e7f4      	b.n	800998a <_dtoa_r+0x5d2>
 80099a0:	4b05      	ldr	r3, [pc, #20]	; (80099b8 <_dtoa_r+0x600>)
 80099a2:	f7f6 fe49 	bl	8000638 <__aeabi_dmul>
 80099a6:	e9cd 0100 	strd	r0, r1, [sp]
 80099aa:	e7bc      	b.n	8009926 <_dtoa_r+0x56e>
 80099ac:	0800b408 	.word	0x0800b408
 80099b0:	0800b3e0 	.word	0x0800b3e0
 80099b4:	3ff00000 	.word	0x3ff00000
 80099b8:	40240000 	.word	0x40240000
 80099bc:	401c0000 	.word	0x401c0000
 80099c0:	40140000 	.word	0x40140000
 80099c4:	3fe00000 	.word	0x3fe00000
 80099c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80099cc:	465d      	mov	r5, fp
 80099ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099d2:	4630      	mov	r0, r6
 80099d4:	4639      	mov	r1, r7
 80099d6:	f7f6 ff59 	bl	800088c <__aeabi_ddiv>
 80099da:	f7f7 f8dd 	bl	8000b98 <__aeabi_d2iz>
 80099de:	4680      	mov	r8, r0
 80099e0:	f7f6 fdc0 	bl	8000564 <__aeabi_i2d>
 80099e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099e8:	f7f6 fe26 	bl	8000638 <__aeabi_dmul>
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	4630      	mov	r0, r6
 80099f2:	4639      	mov	r1, r7
 80099f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80099f8:	f7f6 fc66 	bl	80002c8 <__aeabi_dsub>
 80099fc:	f805 6b01 	strb.w	r6, [r5], #1
 8009a00:	eba5 060b 	sub.w	r6, r5, fp
 8009a04:	45b1      	cmp	r9, r6
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	d139      	bne.n	8009a80 <_dtoa_r+0x6c8>
 8009a0c:	f7f6 fc5e 	bl	80002cc <__adddf3>
 8009a10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a14:	4606      	mov	r6, r0
 8009a16:	460f      	mov	r7, r1
 8009a18:	f7f7 f89e 	bl	8000b58 <__aeabi_dcmpgt>
 8009a1c:	b9c8      	cbnz	r0, 8009a52 <_dtoa_r+0x69a>
 8009a1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a22:	4630      	mov	r0, r6
 8009a24:	4639      	mov	r1, r7
 8009a26:	f7f7 f86f 	bl	8000b08 <__aeabi_dcmpeq>
 8009a2a:	b110      	cbz	r0, 8009a32 <_dtoa_r+0x67a>
 8009a2c:	f018 0f01 	tst.w	r8, #1
 8009a30:	d10f      	bne.n	8009a52 <_dtoa_r+0x69a>
 8009a32:	9904      	ldr	r1, [sp, #16]
 8009a34:	4620      	mov	r0, r4
 8009a36:	f000 fe0a 	bl	800a64e <_Bfree>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a3e:	702b      	strb	r3, [r5, #0]
 8009a40:	f10a 0301 	add.w	r3, sl, #1
 8009a44:	6013      	str	r3, [r2, #0]
 8009a46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 8241 	beq.w	8009ed0 <_dtoa_r+0xb18>
 8009a4e:	601d      	str	r5, [r3, #0]
 8009a50:	e23e      	b.n	8009ed0 <_dtoa_r+0xb18>
 8009a52:	f8cd a020 	str.w	sl, [sp, #32]
 8009a56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a5a:	2a39      	cmp	r2, #57	; 0x39
 8009a5c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009a60:	d108      	bne.n	8009a74 <_dtoa_r+0x6bc>
 8009a62:	459b      	cmp	fp, r3
 8009a64:	d10a      	bne.n	8009a7c <_dtoa_r+0x6c4>
 8009a66:	9b08      	ldr	r3, [sp, #32]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	9308      	str	r3, [sp, #32]
 8009a6c:	2330      	movs	r3, #48	; 0x30
 8009a6e:	f88b 3000 	strb.w	r3, [fp]
 8009a72:	465b      	mov	r3, fp
 8009a74:	781a      	ldrb	r2, [r3, #0]
 8009a76:	3201      	adds	r2, #1
 8009a78:	701a      	strb	r2, [r3, #0]
 8009a7a:	e78c      	b.n	8009996 <_dtoa_r+0x5de>
 8009a7c:	461d      	mov	r5, r3
 8009a7e:	e7ea      	b.n	8009a56 <_dtoa_r+0x69e>
 8009a80:	2200      	movs	r2, #0
 8009a82:	4b9b      	ldr	r3, [pc, #620]	; (8009cf0 <_dtoa_r+0x938>)
 8009a84:	f7f6 fdd8 	bl	8000638 <__aeabi_dmul>
 8009a88:	2200      	movs	r2, #0
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	4606      	mov	r6, r0
 8009a8e:	460f      	mov	r7, r1
 8009a90:	f7f7 f83a 	bl	8000b08 <__aeabi_dcmpeq>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d09a      	beq.n	80099ce <_dtoa_r+0x616>
 8009a98:	e7cb      	b.n	8009a32 <_dtoa_r+0x67a>
 8009a9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a9c:	2a00      	cmp	r2, #0
 8009a9e:	f000 808b 	beq.w	8009bb8 <_dtoa_r+0x800>
 8009aa2:	9a06      	ldr	r2, [sp, #24]
 8009aa4:	2a01      	cmp	r2, #1
 8009aa6:	dc6e      	bgt.n	8009b86 <_dtoa_r+0x7ce>
 8009aa8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009aaa:	2a00      	cmp	r2, #0
 8009aac:	d067      	beq.n	8009b7e <_dtoa_r+0x7c6>
 8009aae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ab2:	9f07      	ldr	r7, [sp, #28]
 8009ab4:	9d05      	ldr	r5, [sp, #20]
 8009ab6:	9a05      	ldr	r2, [sp, #20]
 8009ab8:	2101      	movs	r1, #1
 8009aba:	441a      	add	r2, r3
 8009abc:	4620      	mov	r0, r4
 8009abe:	9205      	str	r2, [sp, #20]
 8009ac0:	4498      	add	r8, r3
 8009ac2:	f000 fea2 	bl	800a80a <__i2b>
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	2d00      	cmp	r5, #0
 8009aca:	dd0c      	ble.n	8009ae6 <_dtoa_r+0x72e>
 8009acc:	f1b8 0f00 	cmp.w	r8, #0
 8009ad0:	dd09      	ble.n	8009ae6 <_dtoa_r+0x72e>
 8009ad2:	4545      	cmp	r5, r8
 8009ad4:	9a05      	ldr	r2, [sp, #20]
 8009ad6:	462b      	mov	r3, r5
 8009ad8:	bfa8      	it	ge
 8009ada:	4643      	movge	r3, r8
 8009adc:	1ad2      	subs	r2, r2, r3
 8009ade:	9205      	str	r2, [sp, #20]
 8009ae0:	1aed      	subs	r5, r5, r3
 8009ae2:	eba8 0803 	sub.w	r8, r8, r3
 8009ae6:	9b07      	ldr	r3, [sp, #28]
 8009ae8:	b1eb      	cbz	r3, 8009b26 <_dtoa_r+0x76e>
 8009aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d067      	beq.n	8009bc0 <_dtoa_r+0x808>
 8009af0:	b18f      	cbz	r7, 8009b16 <_dtoa_r+0x75e>
 8009af2:	4631      	mov	r1, r6
 8009af4:	463a      	mov	r2, r7
 8009af6:	4620      	mov	r0, r4
 8009af8:	f000 ff26 	bl	800a948 <__pow5mult>
 8009afc:	9a04      	ldr	r2, [sp, #16]
 8009afe:	4601      	mov	r1, r0
 8009b00:	4606      	mov	r6, r0
 8009b02:	4620      	mov	r0, r4
 8009b04:	f000 fe8a 	bl	800a81c <__multiply>
 8009b08:	9904      	ldr	r1, [sp, #16]
 8009b0a:	9008      	str	r0, [sp, #32]
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	f000 fd9e 	bl	800a64e <_Bfree>
 8009b12:	9b08      	ldr	r3, [sp, #32]
 8009b14:	9304      	str	r3, [sp, #16]
 8009b16:	9b07      	ldr	r3, [sp, #28]
 8009b18:	1bda      	subs	r2, r3, r7
 8009b1a:	d004      	beq.n	8009b26 <_dtoa_r+0x76e>
 8009b1c:	9904      	ldr	r1, [sp, #16]
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f000 ff12 	bl	800a948 <__pow5mult>
 8009b24:	9004      	str	r0, [sp, #16]
 8009b26:	2101      	movs	r1, #1
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f000 fe6e 	bl	800a80a <__i2b>
 8009b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b30:	4607      	mov	r7, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f000 81d0 	beq.w	8009ed8 <_dtoa_r+0xb20>
 8009b38:	461a      	mov	r2, r3
 8009b3a:	4601      	mov	r1, r0
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f000 ff03 	bl	800a948 <__pow5mult>
 8009b42:	9b06      	ldr	r3, [sp, #24]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	4607      	mov	r7, r0
 8009b48:	dc40      	bgt.n	8009bcc <_dtoa_r+0x814>
 8009b4a:	9b00      	ldr	r3, [sp, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d139      	bne.n	8009bc4 <_dtoa_r+0x80c>
 8009b50:	9b01      	ldr	r3, [sp, #4]
 8009b52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d136      	bne.n	8009bc8 <_dtoa_r+0x810>
 8009b5a:	9b01      	ldr	r3, [sp, #4]
 8009b5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b60:	0d1b      	lsrs	r3, r3, #20
 8009b62:	051b      	lsls	r3, r3, #20
 8009b64:	b12b      	cbz	r3, 8009b72 <_dtoa_r+0x7ba>
 8009b66:	9b05      	ldr	r3, [sp, #20]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	9305      	str	r3, [sp, #20]
 8009b6c:	f108 0801 	add.w	r8, r8, #1
 8009b70:	2301      	movs	r3, #1
 8009b72:	9307      	str	r3, [sp, #28]
 8009b74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d12a      	bne.n	8009bd0 <_dtoa_r+0x818>
 8009b7a:	2001      	movs	r0, #1
 8009b7c:	e030      	b.n	8009be0 <_dtoa_r+0x828>
 8009b7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b80:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b84:	e795      	b.n	8009ab2 <_dtoa_r+0x6fa>
 8009b86:	9b07      	ldr	r3, [sp, #28]
 8009b88:	f109 37ff 	add.w	r7, r9, #4294967295
 8009b8c:	42bb      	cmp	r3, r7
 8009b8e:	bfbf      	itttt	lt
 8009b90:	9b07      	ldrlt	r3, [sp, #28]
 8009b92:	9707      	strlt	r7, [sp, #28]
 8009b94:	1afa      	sublt	r2, r7, r3
 8009b96:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009b98:	bfbb      	ittet	lt
 8009b9a:	189b      	addlt	r3, r3, r2
 8009b9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009b9e:	1bdf      	subge	r7, r3, r7
 8009ba0:	2700      	movlt	r7, #0
 8009ba2:	f1b9 0f00 	cmp.w	r9, #0
 8009ba6:	bfb5      	itete	lt
 8009ba8:	9b05      	ldrlt	r3, [sp, #20]
 8009baa:	9d05      	ldrge	r5, [sp, #20]
 8009bac:	eba3 0509 	sublt.w	r5, r3, r9
 8009bb0:	464b      	movge	r3, r9
 8009bb2:	bfb8      	it	lt
 8009bb4:	2300      	movlt	r3, #0
 8009bb6:	e77e      	b.n	8009ab6 <_dtoa_r+0x6fe>
 8009bb8:	9f07      	ldr	r7, [sp, #28]
 8009bba:	9d05      	ldr	r5, [sp, #20]
 8009bbc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009bbe:	e783      	b.n	8009ac8 <_dtoa_r+0x710>
 8009bc0:	9a07      	ldr	r2, [sp, #28]
 8009bc2:	e7ab      	b.n	8009b1c <_dtoa_r+0x764>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	e7d4      	b.n	8009b72 <_dtoa_r+0x7ba>
 8009bc8:	9b00      	ldr	r3, [sp, #0]
 8009bca:	e7d2      	b.n	8009b72 <_dtoa_r+0x7ba>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	9307      	str	r3, [sp, #28]
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009bd6:	6918      	ldr	r0, [r3, #16]
 8009bd8:	f000 fdc9 	bl	800a76e <__hi0bits>
 8009bdc:	f1c0 0020 	rsb	r0, r0, #32
 8009be0:	4440      	add	r0, r8
 8009be2:	f010 001f 	ands.w	r0, r0, #31
 8009be6:	d047      	beq.n	8009c78 <_dtoa_r+0x8c0>
 8009be8:	f1c0 0320 	rsb	r3, r0, #32
 8009bec:	2b04      	cmp	r3, #4
 8009bee:	dd3b      	ble.n	8009c68 <_dtoa_r+0x8b0>
 8009bf0:	9b05      	ldr	r3, [sp, #20]
 8009bf2:	f1c0 001c 	rsb	r0, r0, #28
 8009bf6:	4403      	add	r3, r0
 8009bf8:	9305      	str	r3, [sp, #20]
 8009bfa:	4405      	add	r5, r0
 8009bfc:	4480      	add	r8, r0
 8009bfe:	9b05      	ldr	r3, [sp, #20]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	dd05      	ble.n	8009c10 <_dtoa_r+0x858>
 8009c04:	461a      	mov	r2, r3
 8009c06:	9904      	ldr	r1, [sp, #16]
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f000 feeb 	bl	800a9e4 <__lshift>
 8009c0e:	9004      	str	r0, [sp, #16]
 8009c10:	f1b8 0f00 	cmp.w	r8, #0
 8009c14:	dd05      	ble.n	8009c22 <_dtoa_r+0x86a>
 8009c16:	4639      	mov	r1, r7
 8009c18:	4642      	mov	r2, r8
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f000 fee2 	bl	800a9e4 <__lshift>
 8009c20:	4607      	mov	r7, r0
 8009c22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c24:	b353      	cbz	r3, 8009c7c <_dtoa_r+0x8c4>
 8009c26:	4639      	mov	r1, r7
 8009c28:	9804      	ldr	r0, [sp, #16]
 8009c2a:	f000 ff2f 	bl	800aa8c <__mcmp>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	da24      	bge.n	8009c7c <_dtoa_r+0x8c4>
 8009c32:	2300      	movs	r3, #0
 8009c34:	220a      	movs	r2, #10
 8009c36:	9904      	ldr	r1, [sp, #16]
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f000 fd1f 	bl	800a67c <__multadd>
 8009c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c40:	9004      	str	r0, [sp, #16]
 8009c42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 814d 	beq.w	8009ee6 <_dtoa_r+0xb2e>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4631      	mov	r1, r6
 8009c50:	220a      	movs	r2, #10
 8009c52:	4620      	mov	r0, r4
 8009c54:	f000 fd12 	bl	800a67c <__multadd>
 8009c58:	9b02      	ldr	r3, [sp, #8]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	4606      	mov	r6, r0
 8009c5e:	dc4f      	bgt.n	8009d00 <_dtoa_r+0x948>
 8009c60:	9b06      	ldr	r3, [sp, #24]
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	dd4c      	ble.n	8009d00 <_dtoa_r+0x948>
 8009c66:	e011      	b.n	8009c8c <_dtoa_r+0x8d4>
 8009c68:	d0c9      	beq.n	8009bfe <_dtoa_r+0x846>
 8009c6a:	9a05      	ldr	r2, [sp, #20]
 8009c6c:	331c      	adds	r3, #28
 8009c6e:	441a      	add	r2, r3
 8009c70:	9205      	str	r2, [sp, #20]
 8009c72:	441d      	add	r5, r3
 8009c74:	4498      	add	r8, r3
 8009c76:	e7c2      	b.n	8009bfe <_dtoa_r+0x846>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	e7f6      	b.n	8009c6a <_dtoa_r+0x8b2>
 8009c7c:	f1b9 0f00 	cmp.w	r9, #0
 8009c80:	dc38      	bgt.n	8009cf4 <_dtoa_r+0x93c>
 8009c82:	9b06      	ldr	r3, [sp, #24]
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	dd35      	ble.n	8009cf4 <_dtoa_r+0x93c>
 8009c88:	f8cd 9008 	str.w	r9, [sp, #8]
 8009c8c:	9b02      	ldr	r3, [sp, #8]
 8009c8e:	b963      	cbnz	r3, 8009caa <_dtoa_r+0x8f2>
 8009c90:	4639      	mov	r1, r7
 8009c92:	2205      	movs	r2, #5
 8009c94:	4620      	mov	r0, r4
 8009c96:	f000 fcf1 	bl	800a67c <__multadd>
 8009c9a:	4601      	mov	r1, r0
 8009c9c:	4607      	mov	r7, r0
 8009c9e:	9804      	ldr	r0, [sp, #16]
 8009ca0:	f000 fef4 	bl	800aa8c <__mcmp>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	f73f adcc 	bgt.w	8009842 <_dtoa_r+0x48a>
 8009caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cac:	465d      	mov	r5, fp
 8009cae:	ea6f 0a03 	mvn.w	sl, r3
 8009cb2:	f04f 0900 	mov.w	r9, #0
 8009cb6:	4639      	mov	r1, r7
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f000 fcc8 	bl	800a64e <_Bfree>
 8009cbe:	2e00      	cmp	r6, #0
 8009cc0:	f43f aeb7 	beq.w	8009a32 <_dtoa_r+0x67a>
 8009cc4:	f1b9 0f00 	cmp.w	r9, #0
 8009cc8:	d005      	beq.n	8009cd6 <_dtoa_r+0x91e>
 8009cca:	45b1      	cmp	r9, r6
 8009ccc:	d003      	beq.n	8009cd6 <_dtoa_r+0x91e>
 8009cce:	4649      	mov	r1, r9
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f000 fcbc 	bl	800a64e <_Bfree>
 8009cd6:	4631      	mov	r1, r6
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f000 fcb8 	bl	800a64e <_Bfree>
 8009cde:	e6a8      	b.n	8009a32 <_dtoa_r+0x67a>
 8009ce0:	2700      	movs	r7, #0
 8009ce2:	463e      	mov	r6, r7
 8009ce4:	e7e1      	b.n	8009caa <_dtoa_r+0x8f2>
 8009ce6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009cea:	463e      	mov	r6, r7
 8009cec:	e5a9      	b.n	8009842 <_dtoa_r+0x48a>
 8009cee:	bf00      	nop
 8009cf0:	40240000 	.word	0x40240000
 8009cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cf6:	f8cd 9008 	str.w	r9, [sp, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 80fa 	beq.w	8009ef4 <_dtoa_r+0xb3c>
 8009d00:	2d00      	cmp	r5, #0
 8009d02:	dd05      	ble.n	8009d10 <_dtoa_r+0x958>
 8009d04:	4631      	mov	r1, r6
 8009d06:	462a      	mov	r2, r5
 8009d08:	4620      	mov	r0, r4
 8009d0a:	f000 fe6b 	bl	800a9e4 <__lshift>
 8009d0e:	4606      	mov	r6, r0
 8009d10:	9b07      	ldr	r3, [sp, #28]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d04c      	beq.n	8009db0 <_dtoa_r+0x9f8>
 8009d16:	6871      	ldr	r1, [r6, #4]
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f000 fc64 	bl	800a5e6 <_Balloc>
 8009d1e:	6932      	ldr	r2, [r6, #16]
 8009d20:	3202      	adds	r2, #2
 8009d22:	4605      	mov	r5, r0
 8009d24:	0092      	lsls	r2, r2, #2
 8009d26:	f106 010c 	add.w	r1, r6, #12
 8009d2a:	300c      	adds	r0, #12
 8009d2c:	f000 fc50 	bl	800a5d0 <memcpy>
 8009d30:	2201      	movs	r2, #1
 8009d32:	4629      	mov	r1, r5
 8009d34:	4620      	mov	r0, r4
 8009d36:	f000 fe55 	bl	800a9e4 <__lshift>
 8009d3a:	9b00      	ldr	r3, [sp, #0]
 8009d3c:	f8cd b014 	str.w	fp, [sp, #20]
 8009d40:	f003 0301 	and.w	r3, r3, #1
 8009d44:	46b1      	mov	r9, r6
 8009d46:	9307      	str	r3, [sp, #28]
 8009d48:	4606      	mov	r6, r0
 8009d4a:	4639      	mov	r1, r7
 8009d4c:	9804      	ldr	r0, [sp, #16]
 8009d4e:	f7ff faa7 	bl	80092a0 <quorem>
 8009d52:	4649      	mov	r1, r9
 8009d54:	4605      	mov	r5, r0
 8009d56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009d5a:	9804      	ldr	r0, [sp, #16]
 8009d5c:	f000 fe96 	bl	800aa8c <__mcmp>
 8009d60:	4632      	mov	r2, r6
 8009d62:	9000      	str	r0, [sp, #0]
 8009d64:	4639      	mov	r1, r7
 8009d66:	4620      	mov	r0, r4
 8009d68:	f000 feaa 	bl	800aac0 <__mdiff>
 8009d6c:	68c3      	ldr	r3, [r0, #12]
 8009d6e:	4602      	mov	r2, r0
 8009d70:	bb03      	cbnz	r3, 8009db4 <_dtoa_r+0x9fc>
 8009d72:	4601      	mov	r1, r0
 8009d74:	9008      	str	r0, [sp, #32]
 8009d76:	9804      	ldr	r0, [sp, #16]
 8009d78:	f000 fe88 	bl	800aa8c <__mcmp>
 8009d7c:	9a08      	ldr	r2, [sp, #32]
 8009d7e:	4603      	mov	r3, r0
 8009d80:	4611      	mov	r1, r2
 8009d82:	4620      	mov	r0, r4
 8009d84:	9308      	str	r3, [sp, #32]
 8009d86:	f000 fc62 	bl	800a64e <_Bfree>
 8009d8a:	9b08      	ldr	r3, [sp, #32]
 8009d8c:	b9a3      	cbnz	r3, 8009db8 <_dtoa_r+0xa00>
 8009d8e:	9a06      	ldr	r2, [sp, #24]
 8009d90:	b992      	cbnz	r2, 8009db8 <_dtoa_r+0xa00>
 8009d92:	9a07      	ldr	r2, [sp, #28]
 8009d94:	b982      	cbnz	r2, 8009db8 <_dtoa_r+0xa00>
 8009d96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009d9a:	d029      	beq.n	8009df0 <_dtoa_r+0xa38>
 8009d9c:	9b00      	ldr	r3, [sp, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	dd01      	ble.n	8009da6 <_dtoa_r+0x9ee>
 8009da2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009da6:	9b05      	ldr	r3, [sp, #20]
 8009da8:	1c5d      	adds	r5, r3, #1
 8009daa:	f883 8000 	strb.w	r8, [r3]
 8009dae:	e782      	b.n	8009cb6 <_dtoa_r+0x8fe>
 8009db0:	4630      	mov	r0, r6
 8009db2:	e7c2      	b.n	8009d3a <_dtoa_r+0x982>
 8009db4:	2301      	movs	r3, #1
 8009db6:	e7e3      	b.n	8009d80 <_dtoa_r+0x9c8>
 8009db8:	9a00      	ldr	r2, [sp, #0]
 8009dba:	2a00      	cmp	r2, #0
 8009dbc:	db04      	blt.n	8009dc8 <_dtoa_r+0xa10>
 8009dbe:	d125      	bne.n	8009e0c <_dtoa_r+0xa54>
 8009dc0:	9a06      	ldr	r2, [sp, #24]
 8009dc2:	bb1a      	cbnz	r2, 8009e0c <_dtoa_r+0xa54>
 8009dc4:	9a07      	ldr	r2, [sp, #28]
 8009dc6:	bb0a      	cbnz	r2, 8009e0c <_dtoa_r+0xa54>
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	ddec      	ble.n	8009da6 <_dtoa_r+0x9ee>
 8009dcc:	2201      	movs	r2, #1
 8009dce:	9904      	ldr	r1, [sp, #16]
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f000 fe07 	bl	800a9e4 <__lshift>
 8009dd6:	4639      	mov	r1, r7
 8009dd8:	9004      	str	r0, [sp, #16]
 8009dda:	f000 fe57 	bl	800aa8c <__mcmp>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	dc03      	bgt.n	8009dea <_dtoa_r+0xa32>
 8009de2:	d1e0      	bne.n	8009da6 <_dtoa_r+0x9ee>
 8009de4:	f018 0f01 	tst.w	r8, #1
 8009de8:	d0dd      	beq.n	8009da6 <_dtoa_r+0x9ee>
 8009dea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009dee:	d1d8      	bne.n	8009da2 <_dtoa_r+0x9ea>
 8009df0:	9b05      	ldr	r3, [sp, #20]
 8009df2:	9a05      	ldr	r2, [sp, #20]
 8009df4:	1c5d      	adds	r5, r3, #1
 8009df6:	2339      	movs	r3, #57	; 0x39
 8009df8:	7013      	strb	r3, [r2, #0]
 8009dfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009dfe:	2b39      	cmp	r3, #57	; 0x39
 8009e00:	f105 32ff 	add.w	r2, r5, #4294967295
 8009e04:	d04f      	beq.n	8009ea6 <_dtoa_r+0xaee>
 8009e06:	3301      	adds	r3, #1
 8009e08:	7013      	strb	r3, [r2, #0]
 8009e0a:	e754      	b.n	8009cb6 <_dtoa_r+0x8fe>
 8009e0c:	9a05      	ldr	r2, [sp, #20]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f102 0501 	add.w	r5, r2, #1
 8009e14:	dd06      	ble.n	8009e24 <_dtoa_r+0xa6c>
 8009e16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009e1a:	d0e9      	beq.n	8009df0 <_dtoa_r+0xa38>
 8009e1c:	f108 0801 	add.w	r8, r8, #1
 8009e20:	9b05      	ldr	r3, [sp, #20]
 8009e22:	e7c2      	b.n	8009daa <_dtoa_r+0x9f2>
 8009e24:	9a02      	ldr	r2, [sp, #8]
 8009e26:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009e2a:	eba5 030b 	sub.w	r3, r5, fp
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d021      	beq.n	8009e76 <_dtoa_r+0xabe>
 8009e32:	2300      	movs	r3, #0
 8009e34:	220a      	movs	r2, #10
 8009e36:	9904      	ldr	r1, [sp, #16]
 8009e38:	4620      	mov	r0, r4
 8009e3a:	f000 fc1f 	bl	800a67c <__multadd>
 8009e3e:	45b1      	cmp	r9, r6
 8009e40:	9004      	str	r0, [sp, #16]
 8009e42:	f04f 0300 	mov.w	r3, #0
 8009e46:	f04f 020a 	mov.w	r2, #10
 8009e4a:	4649      	mov	r1, r9
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	d105      	bne.n	8009e5c <_dtoa_r+0xaa4>
 8009e50:	f000 fc14 	bl	800a67c <__multadd>
 8009e54:	4681      	mov	r9, r0
 8009e56:	4606      	mov	r6, r0
 8009e58:	9505      	str	r5, [sp, #20]
 8009e5a:	e776      	b.n	8009d4a <_dtoa_r+0x992>
 8009e5c:	f000 fc0e 	bl	800a67c <__multadd>
 8009e60:	4631      	mov	r1, r6
 8009e62:	4681      	mov	r9, r0
 8009e64:	2300      	movs	r3, #0
 8009e66:	220a      	movs	r2, #10
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f000 fc07 	bl	800a67c <__multadd>
 8009e6e:	4606      	mov	r6, r0
 8009e70:	e7f2      	b.n	8009e58 <_dtoa_r+0xaa0>
 8009e72:	f04f 0900 	mov.w	r9, #0
 8009e76:	2201      	movs	r2, #1
 8009e78:	9904      	ldr	r1, [sp, #16]
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f000 fdb2 	bl	800a9e4 <__lshift>
 8009e80:	4639      	mov	r1, r7
 8009e82:	9004      	str	r0, [sp, #16]
 8009e84:	f000 fe02 	bl	800aa8c <__mcmp>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	dcb6      	bgt.n	8009dfa <_dtoa_r+0xa42>
 8009e8c:	d102      	bne.n	8009e94 <_dtoa_r+0xadc>
 8009e8e:	f018 0f01 	tst.w	r8, #1
 8009e92:	d1b2      	bne.n	8009dfa <_dtoa_r+0xa42>
 8009e94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e98:	2b30      	cmp	r3, #48	; 0x30
 8009e9a:	f105 32ff 	add.w	r2, r5, #4294967295
 8009e9e:	f47f af0a 	bne.w	8009cb6 <_dtoa_r+0x8fe>
 8009ea2:	4615      	mov	r5, r2
 8009ea4:	e7f6      	b.n	8009e94 <_dtoa_r+0xadc>
 8009ea6:	4593      	cmp	fp, r2
 8009ea8:	d105      	bne.n	8009eb6 <_dtoa_r+0xafe>
 8009eaa:	2331      	movs	r3, #49	; 0x31
 8009eac:	f10a 0a01 	add.w	sl, sl, #1
 8009eb0:	f88b 3000 	strb.w	r3, [fp]
 8009eb4:	e6ff      	b.n	8009cb6 <_dtoa_r+0x8fe>
 8009eb6:	4615      	mov	r5, r2
 8009eb8:	e79f      	b.n	8009dfa <_dtoa_r+0xa42>
 8009eba:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009f20 <_dtoa_r+0xb68>
 8009ebe:	e007      	b.n	8009ed0 <_dtoa_r+0xb18>
 8009ec0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ec2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009f24 <_dtoa_r+0xb6c>
 8009ec6:	b11b      	cbz	r3, 8009ed0 <_dtoa_r+0xb18>
 8009ec8:	f10b 0308 	add.w	r3, fp, #8
 8009ecc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ece:	6013      	str	r3, [r2, #0]
 8009ed0:	4658      	mov	r0, fp
 8009ed2:	b017      	add	sp, #92	; 0x5c
 8009ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed8:	9b06      	ldr	r3, [sp, #24]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	f77f ae35 	ble.w	8009b4a <_dtoa_r+0x792>
 8009ee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ee2:	9307      	str	r3, [sp, #28]
 8009ee4:	e649      	b.n	8009b7a <_dtoa_r+0x7c2>
 8009ee6:	9b02      	ldr	r3, [sp, #8]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	dc03      	bgt.n	8009ef4 <_dtoa_r+0xb3c>
 8009eec:	9b06      	ldr	r3, [sp, #24]
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	f73f aecc 	bgt.w	8009c8c <_dtoa_r+0x8d4>
 8009ef4:	465d      	mov	r5, fp
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	9804      	ldr	r0, [sp, #16]
 8009efa:	f7ff f9d1 	bl	80092a0 <quorem>
 8009efe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009f02:	f805 8b01 	strb.w	r8, [r5], #1
 8009f06:	9a02      	ldr	r2, [sp, #8]
 8009f08:	eba5 030b 	sub.w	r3, r5, fp
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	ddb0      	ble.n	8009e72 <_dtoa_r+0xaba>
 8009f10:	2300      	movs	r3, #0
 8009f12:	220a      	movs	r2, #10
 8009f14:	9904      	ldr	r1, [sp, #16]
 8009f16:	4620      	mov	r0, r4
 8009f18:	f000 fbb0 	bl	800a67c <__multadd>
 8009f1c:	9004      	str	r0, [sp, #16]
 8009f1e:	e7ea      	b.n	8009ef6 <_dtoa_r+0xb3e>
 8009f20:	0800b348 	.word	0x0800b348
 8009f24:	0800b3c8 	.word	0x0800b3c8

08009f28 <rshift>:
 8009f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f2a:	6906      	ldr	r6, [r0, #16]
 8009f2c:	114b      	asrs	r3, r1, #5
 8009f2e:	429e      	cmp	r6, r3
 8009f30:	f100 0414 	add.w	r4, r0, #20
 8009f34:	dd30      	ble.n	8009f98 <rshift+0x70>
 8009f36:	f011 011f 	ands.w	r1, r1, #31
 8009f3a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009f3e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009f42:	d108      	bne.n	8009f56 <rshift+0x2e>
 8009f44:	4621      	mov	r1, r4
 8009f46:	42b2      	cmp	r2, r6
 8009f48:	460b      	mov	r3, r1
 8009f4a:	d211      	bcs.n	8009f70 <rshift+0x48>
 8009f4c:	f852 3b04 	ldr.w	r3, [r2], #4
 8009f50:	f841 3b04 	str.w	r3, [r1], #4
 8009f54:	e7f7      	b.n	8009f46 <rshift+0x1e>
 8009f56:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009f5a:	f1c1 0c20 	rsb	ip, r1, #32
 8009f5e:	40cd      	lsrs	r5, r1
 8009f60:	3204      	adds	r2, #4
 8009f62:	4623      	mov	r3, r4
 8009f64:	42b2      	cmp	r2, r6
 8009f66:	4617      	mov	r7, r2
 8009f68:	d30c      	bcc.n	8009f84 <rshift+0x5c>
 8009f6a:	601d      	str	r5, [r3, #0]
 8009f6c:	b105      	cbz	r5, 8009f70 <rshift+0x48>
 8009f6e:	3304      	adds	r3, #4
 8009f70:	1b1a      	subs	r2, r3, r4
 8009f72:	42a3      	cmp	r3, r4
 8009f74:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f78:	bf08      	it	eq
 8009f7a:	2300      	moveq	r3, #0
 8009f7c:	6102      	str	r2, [r0, #16]
 8009f7e:	bf08      	it	eq
 8009f80:	6143      	streq	r3, [r0, #20]
 8009f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f84:	683f      	ldr	r7, [r7, #0]
 8009f86:	fa07 f70c 	lsl.w	r7, r7, ip
 8009f8a:	433d      	orrs	r5, r7
 8009f8c:	f843 5b04 	str.w	r5, [r3], #4
 8009f90:	f852 5b04 	ldr.w	r5, [r2], #4
 8009f94:	40cd      	lsrs	r5, r1
 8009f96:	e7e5      	b.n	8009f64 <rshift+0x3c>
 8009f98:	4623      	mov	r3, r4
 8009f9a:	e7e9      	b.n	8009f70 <rshift+0x48>

08009f9c <__hexdig_fun>:
 8009f9c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009fa0:	2b09      	cmp	r3, #9
 8009fa2:	d802      	bhi.n	8009faa <__hexdig_fun+0xe>
 8009fa4:	3820      	subs	r0, #32
 8009fa6:	b2c0      	uxtb	r0, r0
 8009fa8:	4770      	bx	lr
 8009faa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009fae:	2b05      	cmp	r3, #5
 8009fb0:	d801      	bhi.n	8009fb6 <__hexdig_fun+0x1a>
 8009fb2:	3847      	subs	r0, #71	; 0x47
 8009fb4:	e7f7      	b.n	8009fa6 <__hexdig_fun+0xa>
 8009fb6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009fba:	2b05      	cmp	r3, #5
 8009fbc:	d801      	bhi.n	8009fc2 <__hexdig_fun+0x26>
 8009fbe:	3827      	subs	r0, #39	; 0x27
 8009fc0:	e7f1      	b.n	8009fa6 <__hexdig_fun+0xa>
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	4770      	bx	lr

08009fc6 <__gethex>:
 8009fc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fca:	b08b      	sub	sp, #44	; 0x2c
 8009fcc:	468a      	mov	sl, r1
 8009fce:	9002      	str	r0, [sp, #8]
 8009fd0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009fd2:	9306      	str	r3, [sp, #24]
 8009fd4:	4690      	mov	r8, r2
 8009fd6:	f000 fad0 	bl	800a57a <__localeconv_l>
 8009fda:	6803      	ldr	r3, [r0, #0]
 8009fdc:	9303      	str	r3, [sp, #12]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7f6 f916 	bl	8000210 <strlen>
 8009fe4:	9b03      	ldr	r3, [sp, #12]
 8009fe6:	9001      	str	r0, [sp, #4]
 8009fe8:	4403      	add	r3, r0
 8009fea:	f04f 0b00 	mov.w	fp, #0
 8009fee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009ff2:	9307      	str	r3, [sp, #28]
 8009ff4:	f8da 3000 	ldr.w	r3, [sl]
 8009ff8:	3302      	adds	r3, #2
 8009ffa:	461f      	mov	r7, r3
 8009ffc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a000:	2830      	cmp	r0, #48	; 0x30
 800a002:	d06c      	beq.n	800a0de <__gethex+0x118>
 800a004:	f7ff ffca 	bl	8009f9c <__hexdig_fun>
 800a008:	4604      	mov	r4, r0
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d16a      	bne.n	800a0e4 <__gethex+0x11e>
 800a00e:	9a01      	ldr	r2, [sp, #4]
 800a010:	9903      	ldr	r1, [sp, #12]
 800a012:	4638      	mov	r0, r7
 800a014:	f001 f8fe 	bl	800b214 <strncmp>
 800a018:	2800      	cmp	r0, #0
 800a01a:	d166      	bne.n	800a0ea <__gethex+0x124>
 800a01c:	9b01      	ldr	r3, [sp, #4]
 800a01e:	5cf8      	ldrb	r0, [r7, r3]
 800a020:	18fe      	adds	r6, r7, r3
 800a022:	f7ff ffbb 	bl	8009f9c <__hexdig_fun>
 800a026:	2800      	cmp	r0, #0
 800a028:	d062      	beq.n	800a0f0 <__gethex+0x12a>
 800a02a:	4633      	mov	r3, r6
 800a02c:	7818      	ldrb	r0, [r3, #0]
 800a02e:	2830      	cmp	r0, #48	; 0x30
 800a030:	461f      	mov	r7, r3
 800a032:	f103 0301 	add.w	r3, r3, #1
 800a036:	d0f9      	beq.n	800a02c <__gethex+0x66>
 800a038:	f7ff ffb0 	bl	8009f9c <__hexdig_fun>
 800a03c:	fab0 f580 	clz	r5, r0
 800a040:	096d      	lsrs	r5, r5, #5
 800a042:	4634      	mov	r4, r6
 800a044:	f04f 0b01 	mov.w	fp, #1
 800a048:	463a      	mov	r2, r7
 800a04a:	4616      	mov	r6, r2
 800a04c:	3201      	adds	r2, #1
 800a04e:	7830      	ldrb	r0, [r6, #0]
 800a050:	f7ff ffa4 	bl	8009f9c <__hexdig_fun>
 800a054:	2800      	cmp	r0, #0
 800a056:	d1f8      	bne.n	800a04a <__gethex+0x84>
 800a058:	9a01      	ldr	r2, [sp, #4]
 800a05a:	9903      	ldr	r1, [sp, #12]
 800a05c:	4630      	mov	r0, r6
 800a05e:	f001 f8d9 	bl	800b214 <strncmp>
 800a062:	b950      	cbnz	r0, 800a07a <__gethex+0xb4>
 800a064:	b954      	cbnz	r4, 800a07c <__gethex+0xb6>
 800a066:	9b01      	ldr	r3, [sp, #4]
 800a068:	18f4      	adds	r4, r6, r3
 800a06a:	4622      	mov	r2, r4
 800a06c:	4616      	mov	r6, r2
 800a06e:	3201      	adds	r2, #1
 800a070:	7830      	ldrb	r0, [r6, #0]
 800a072:	f7ff ff93 	bl	8009f9c <__hexdig_fun>
 800a076:	2800      	cmp	r0, #0
 800a078:	d1f8      	bne.n	800a06c <__gethex+0xa6>
 800a07a:	b10c      	cbz	r4, 800a080 <__gethex+0xba>
 800a07c:	1ba4      	subs	r4, r4, r6
 800a07e:	00a4      	lsls	r4, r4, #2
 800a080:	7833      	ldrb	r3, [r6, #0]
 800a082:	2b50      	cmp	r3, #80	; 0x50
 800a084:	d001      	beq.n	800a08a <__gethex+0xc4>
 800a086:	2b70      	cmp	r3, #112	; 0x70
 800a088:	d140      	bne.n	800a10c <__gethex+0x146>
 800a08a:	7873      	ldrb	r3, [r6, #1]
 800a08c:	2b2b      	cmp	r3, #43	; 0x2b
 800a08e:	d031      	beq.n	800a0f4 <__gethex+0x12e>
 800a090:	2b2d      	cmp	r3, #45	; 0x2d
 800a092:	d033      	beq.n	800a0fc <__gethex+0x136>
 800a094:	1c71      	adds	r1, r6, #1
 800a096:	f04f 0900 	mov.w	r9, #0
 800a09a:	7808      	ldrb	r0, [r1, #0]
 800a09c:	f7ff ff7e 	bl	8009f9c <__hexdig_fun>
 800a0a0:	1e43      	subs	r3, r0, #1
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	2b18      	cmp	r3, #24
 800a0a6:	d831      	bhi.n	800a10c <__gethex+0x146>
 800a0a8:	f1a0 0210 	sub.w	r2, r0, #16
 800a0ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a0b0:	f7ff ff74 	bl	8009f9c <__hexdig_fun>
 800a0b4:	1e43      	subs	r3, r0, #1
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b18      	cmp	r3, #24
 800a0ba:	d922      	bls.n	800a102 <__gethex+0x13c>
 800a0bc:	f1b9 0f00 	cmp.w	r9, #0
 800a0c0:	d000      	beq.n	800a0c4 <__gethex+0xfe>
 800a0c2:	4252      	negs	r2, r2
 800a0c4:	4414      	add	r4, r2
 800a0c6:	f8ca 1000 	str.w	r1, [sl]
 800a0ca:	b30d      	cbz	r5, 800a110 <__gethex+0x14a>
 800a0cc:	f1bb 0f00 	cmp.w	fp, #0
 800a0d0:	bf0c      	ite	eq
 800a0d2:	2706      	moveq	r7, #6
 800a0d4:	2700      	movne	r7, #0
 800a0d6:	4638      	mov	r0, r7
 800a0d8:	b00b      	add	sp, #44	; 0x2c
 800a0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0de:	f10b 0b01 	add.w	fp, fp, #1
 800a0e2:	e78a      	b.n	8009ffa <__gethex+0x34>
 800a0e4:	2500      	movs	r5, #0
 800a0e6:	462c      	mov	r4, r5
 800a0e8:	e7ae      	b.n	800a048 <__gethex+0x82>
 800a0ea:	463e      	mov	r6, r7
 800a0ec:	2501      	movs	r5, #1
 800a0ee:	e7c7      	b.n	800a080 <__gethex+0xba>
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	e7fb      	b.n	800a0ec <__gethex+0x126>
 800a0f4:	f04f 0900 	mov.w	r9, #0
 800a0f8:	1cb1      	adds	r1, r6, #2
 800a0fa:	e7ce      	b.n	800a09a <__gethex+0xd4>
 800a0fc:	f04f 0901 	mov.w	r9, #1
 800a100:	e7fa      	b.n	800a0f8 <__gethex+0x132>
 800a102:	230a      	movs	r3, #10
 800a104:	fb03 0202 	mla	r2, r3, r2, r0
 800a108:	3a10      	subs	r2, #16
 800a10a:	e7cf      	b.n	800a0ac <__gethex+0xe6>
 800a10c:	4631      	mov	r1, r6
 800a10e:	e7da      	b.n	800a0c6 <__gethex+0x100>
 800a110:	1bf3      	subs	r3, r6, r7
 800a112:	3b01      	subs	r3, #1
 800a114:	4629      	mov	r1, r5
 800a116:	2b07      	cmp	r3, #7
 800a118:	dc49      	bgt.n	800a1ae <__gethex+0x1e8>
 800a11a:	9802      	ldr	r0, [sp, #8]
 800a11c:	f000 fa63 	bl	800a5e6 <_Balloc>
 800a120:	9b01      	ldr	r3, [sp, #4]
 800a122:	f100 0914 	add.w	r9, r0, #20
 800a126:	f04f 0b00 	mov.w	fp, #0
 800a12a:	f1c3 0301 	rsb	r3, r3, #1
 800a12e:	4605      	mov	r5, r0
 800a130:	f8cd 9010 	str.w	r9, [sp, #16]
 800a134:	46da      	mov	sl, fp
 800a136:	9308      	str	r3, [sp, #32]
 800a138:	42b7      	cmp	r7, r6
 800a13a:	d33b      	bcc.n	800a1b4 <__gethex+0x1ee>
 800a13c:	9804      	ldr	r0, [sp, #16]
 800a13e:	f840 ab04 	str.w	sl, [r0], #4
 800a142:	eba0 0009 	sub.w	r0, r0, r9
 800a146:	1080      	asrs	r0, r0, #2
 800a148:	6128      	str	r0, [r5, #16]
 800a14a:	0147      	lsls	r7, r0, #5
 800a14c:	4650      	mov	r0, sl
 800a14e:	f000 fb0e 	bl	800a76e <__hi0bits>
 800a152:	f8d8 6000 	ldr.w	r6, [r8]
 800a156:	1a3f      	subs	r7, r7, r0
 800a158:	42b7      	cmp	r7, r6
 800a15a:	dd64      	ble.n	800a226 <__gethex+0x260>
 800a15c:	1bbf      	subs	r7, r7, r6
 800a15e:	4639      	mov	r1, r7
 800a160:	4628      	mov	r0, r5
 800a162:	f000 fe1d 	bl	800ada0 <__any_on>
 800a166:	4682      	mov	sl, r0
 800a168:	b178      	cbz	r0, 800a18a <__gethex+0x1c4>
 800a16a:	1e7b      	subs	r3, r7, #1
 800a16c:	1159      	asrs	r1, r3, #5
 800a16e:	f003 021f 	and.w	r2, r3, #31
 800a172:	f04f 0a01 	mov.w	sl, #1
 800a176:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a17a:	fa0a f202 	lsl.w	r2, sl, r2
 800a17e:	420a      	tst	r2, r1
 800a180:	d003      	beq.n	800a18a <__gethex+0x1c4>
 800a182:	4553      	cmp	r3, sl
 800a184:	dc46      	bgt.n	800a214 <__gethex+0x24e>
 800a186:	f04f 0a02 	mov.w	sl, #2
 800a18a:	4639      	mov	r1, r7
 800a18c:	4628      	mov	r0, r5
 800a18e:	f7ff fecb 	bl	8009f28 <rshift>
 800a192:	443c      	add	r4, r7
 800a194:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a198:	42a3      	cmp	r3, r4
 800a19a:	da52      	bge.n	800a242 <__gethex+0x27c>
 800a19c:	4629      	mov	r1, r5
 800a19e:	9802      	ldr	r0, [sp, #8]
 800a1a0:	f000 fa55 	bl	800a64e <_Bfree>
 800a1a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	6013      	str	r3, [r2, #0]
 800a1aa:	27a3      	movs	r7, #163	; 0xa3
 800a1ac:	e793      	b.n	800a0d6 <__gethex+0x110>
 800a1ae:	3101      	adds	r1, #1
 800a1b0:	105b      	asrs	r3, r3, #1
 800a1b2:	e7b0      	b.n	800a116 <__gethex+0x150>
 800a1b4:	1e73      	subs	r3, r6, #1
 800a1b6:	9305      	str	r3, [sp, #20]
 800a1b8:	9a07      	ldr	r2, [sp, #28]
 800a1ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d018      	beq.n	800a1f4 <__gethex+0x22e>
 800a1c2:	f1bb 0f20 	cmp.w	fp, #32
 800a1c6:	d107      	bne.n	800a1d8 <__gethex+0x212>
 800a1c8:	9b04      	ldr	r3, [sp, #16]
 800a1ca:	f8c3 a000 	str.w	sl, [r3]
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	f04f 0a00 	mov.w	sl, #0
 800a1d4:	9304      	str	r3, [sp, #16]
 800a1d6:	46d3      	mov	fp, sl
 800a1d8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a1dc:	f7ff fede 	bl	8009f9c <__hexdig_fun>
 800a1e0:	f000 000f 	and.w	r0, r0, #15
 800a1e4:	fa00 f00b 	lsl.w	r0, r0, fp
 800a1e8:	ea4a 0a00 	orr.w	sl, sl, r0
 800a1ec:	f10b 0b04 	add.w	fp, fp, #4
 800a1f0:	9b05      	ldr	r3, [sp, #20]
 800a1f2:	e00d      	b.n	800a210 <__gethex+0x24a>
 800a1f4:	9b05      	ldr	r3, [sp, #20]
 800a1f6:	9a08      	ldr	r2, [sp, #32]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	42bb      	cmp	r3, r7
 800a1fc:	d3e1      	bcc.n	800a1c2 <__gethex+0x1fc>
 800a1fe:	4618      	mov	r0, r3
 800a200:	9a01      	ldr	r2, [sp, #4]
 800a202:	9903      	ldr	r1, [sp, #12]
 800a204:	9309      	str	r3, [sp, #36]	; 0x24
 800a206:	f001 f805 	bl	800b214 <strncmp>
 800a20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a20c:	2800      	cmp	r0, #0
 800a20e:	d1d8      	bne.n	800a1c2 <__gethex+0x1fc>
 800a210:	461e      	mov	r6, r3
 800a212:	e791      	b.n	800a138 <__gethex+0x172>
 800a214:	1eb9      	subs	r1, r7, #2
 800a216:	4628      	mov	r0, r5
 800a218:	f000 fdc2 	bl	800ada0 <__any_on>
 800a21c:	2800      	cmp	r0, #0
 800a21e:	d0b2      	beq.n	800a186 <__gethex+0x1c0>
 800a220:	f04f 0a03 	mov.w	sl, #3
 800a224:	e7b1      	b.n	800a18a <__gethex+0x1c4>
 800a226:	da09      	bge.n	800a23c <__gethex+0x276>
 800a228:	1bf7      	subs	r7, r6, r7
 800a22a:	4629      	mov	r1, r5
 800a22c:	463a      	mov	r2, r7
 800a22e:	9802      	ldr	r0, [sp, #8]
 800a230:	f000 fbd8 	bl	800a9e4 <__lshift>
 800a234:	1be4      	subs	r4, r4, r7
 800a236:	4605      	mov	r5, r0
 800a238:	f100 0914 	add.w	r9, r0, #20
 800a23c:	f04f 0a00 	mov.w	sl, #0
 800a240:	e7a8      	b.n	800a194 <__gethex+0x1ce>
 800a242:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a246:	42a0      	cmp	r0, r4
 800a248:	dd6a      	ble.n	800a320 <__gethex+0x35a>
 800a24a:	1b04      	subs	r4, r0, r4
 800a24c:	42a6      	cmp	r6, r4
 800a24e:	dc2e      	bgt.n	800a2ae <__gethex+0x2e8>
 800a250:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a254:	2b02      	cmp	r3, #2
 800a256:	d022      	beq.n	800a29e <__gethex+0x2d8>
 800a258:	2b03      	cmp	r3, #3
 800a25a:	d024      	beq.n	800a2a6 <__gethex+0x2e0>
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d115      	bne.n	800a28c <__gethex+0x2c6>
 800a260:	42a6      	cmp	r6, r4
 800a262:	d113      	bne.n	800a28c <__gethex+0x2c6>
 800a264:	2e01      	cmp	r6, #1
 800a266:	dc0b      	bgt.n	800a280 <__gethex+0x2ba>
 800a268:	9a06      	ldr	r2, [sp, #24]
 800a26a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a26e:	6013      	str	r3, [r2, #0]
 800a270:	2301      	movs	r3, #1
 800a272:	612b      	str	r3, [r5, #16]
 800a274:	f8c9 3000 	str.w	r3, [r9]
 800a278:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a27a:	2762      	movs	r7, #98	; 0x62
 800a27c:	601d      	str	r5, [r3, #0]
 800a27e:	e72a      	b.n	800a0d6 <__gethex+0x110>
 800a280:	1e71      	subs	r1, r6, #1
 800a282:	4628      	mov	r0, r5
 800a284:	f000 fd8c 	bl	800ada0 <__any_on>
 800a288:	2800      	cmp	r0, #0
 800a28a:	d1ed      	bne.n	800a268 <__gethex+0x2a2>
 800a28c:	4629      	mov	r1, r5
 800a28e:	9802      	ldr	r0, [sp, #8]
 800a290:	f000 f9dd 	bl	800a64e <_Bfree>
 800a294:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a296:	2300      	movs	r3, #0
 800a298:	6013      	str	r3, [r2, #0]
 800a29a:	2750      	movs	r7, #80	; 0x50
 800a29c:	e71b      	b.n	800a0d6 <__gethex+0x110>
 800a29e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d0e1      	beq.n	800a268 <__gethex+0x2a2>
 800a2a4:	e7f2      	b.n	800a28c <__gethex+0x2c6>
 800a2a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1dd      	bne.n	800a268 <__gethex+0x2a2>
 800a2ac:	e7ee      	b.n	800a28c <__gethex+0x2c6>
 800a2ae:	1e67      	subs	r7, r4, #1
 800a2b0:	f1ba 0f00 	cmp.w	sl, #0
 800a2b4:	d131      	bne.n	800a31a <__gethex+0x354>
 800a2b6:	b127      	cbz	r7, 800a2c2 <__gethex+0x2fc>
 800a2b8:	4639      	mov	r1, r7
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	f000 fd70 	bl	800ada0 <__any_on>
 800a2c0:	4682      	mov	sl, r0
 800a2c2:	117a      	asrs	r2, r7, #5
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	f007 071f 	and.w	r7, r7, #31
 800a2ca:	fa03 f707 	lsl.w	r7, r3, r7
 800a2ce:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a2d2:	4621      	mov	r1, r4
 800a2d4:	421f      	tst	r7, r3
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	bf18      	it	ne
 800a2da:	f04a 0a02 	orrne.w	sl, sl, #2
 800a2de:	1b36      	subs	r6, r6, r4
 800a2e0:	f7ff fe22 	bl	8009f28 <rshift>
 800a2e4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a2e8:	2702      	movs	r7, #2
 800a2ea:	f1ba 0f00 	cmp.w	sl, #0
 800a2ee:	d048      	beq.n	800a382 <__gethex+0x3bc>
 800a2f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d015      	beq.n	800a324 <__gethex+0x35e>
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	d017      	beq.n	800a32c <__gethex+0x366>
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d109      	bne.n	800a314 <__gethex+0x34e>
 800a300:	f01a 0f02 	tst.w	sl, #2
 800a304:	d006      	beq.n	800a314 <__gethex+0x34e>
 800a306:	f8d9 3000 	ldr.w	r3, [r9]
 800a30a:	ea4a 0a03 	orr.w	sl, sl, r3
 800a30e:	f01a 0f01 	tst.w	sl, #1
 800a312:	d10e      	bne.n	800a332 <__gethex+0x36c>
 800a314:	f047 0710 	orr.w	r7, r7, #16
 800a318:	e033      	b.n	800a382 <__gethex+0x3bc>
 800a31a:	f04f 0a01 	mov.w	sl, #1
 800a31e:	e7d0      	b.n	800a2c2 <__gethex+0x2fc>
 800a320:	2701      	movs	r7, #1
 800a322:	e7e2      	b.n	800a2ea <__gethex+0x324>
 800a324:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a326:	f1c3 0301 	rsb	r3, r3, #1
 800a32a:	9315      	str	r3, [sp, #84]	; 0x54
 800a32c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d0f0      	beq.n	800a314 <__gethex+0x34e>
 800a332:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a336:	f105 0314 	add.w	r3, r5, #20
 800a33a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a33e:	eb03 010a 	add.w	r1, r3, sl
 800a342:	f04f 0c00 	mov.w	ip, #0
 800a346:	4618      	mov	r0, r3
 800a348:	f853 2b04 	ldr.w	r2, [r3], #4
 800a34c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a350:	d01c      	beq.n	800a38c <__gethex+0x3c6>
 800a352:	3201      	adds	r2, #1
 800a354:	6002      	str	r2, [r0, #0]
 800a356:	2f02      	cmp	r7, #2
 800a358:	f105 0314 	add.w	r3, r5, #20
 800a35c:	d138      	bne.n	800a3d0 <__gethex+0x40a>
 800a35e:	f8d8 2000 	ldr.w	r2, [r8]
 800a362:	3a01      	subs	r2, #1
 800a364:	42b2      	cmp	r2, r6
 800a366:	d10a      	bne.n	800a37e <__gethex+0x3b8>
 800a368:	1171      	asrs	r1, r6, #5
 800a36a:	2201      	movs	r2, #1
 800a36c:	f006 061f 	and.w	r6, r6, #31
 800a370:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a374:	fa02 f606 	lsl.w	r6, r2, r6
 800a378:	421e      	tst	r6, r3
 800a37a:	bf18      	it	ne
 800a37c:	4617      	movne	r7, r2
 800a37e:	f047 0720 	orr.w	r7, r7, #32
 800a382:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a384:	601d      	str	r5, [r3, #0]
 800a386:	9b06      	ldr	r3, [sp, #24]
 800a388:	601c      	str	r4, [r3, #0]
 800a38a:	e6a4      	b.n	800a0d6 <__gethex+0x110>
 800a38c:	4299      	cmp	r1, r3
 800a38e:	f843 cc04 	str.w	ip, [r3, #-4]
 800a392:	d8d8      	bhi.n	800a346 <__gethex+0x380>
 800a394:	68ab      	ldr	r3, [r5, #8]
 800a396:	4599      	cmp	r9, r3
 800a398:	db12      	blt.n	800a3c0 <__gethex+0x3fa>
 800a39a:	6869      	ldr	r1, [r5, #4]
 800a39c:	9802      	ldr	r0, [sp, #8]
 800a39e:	3101      	adds	r1, #1
 800a3a0:	f000 f921 	bl	800a5e6 <_Balloc>
 800a3a4:	692a      	ldr	r2, [r5, #16]
 800a3a6:	3202      	adds	r2, #2
 800a3a8:	f105 010c 	add.w	r1, r5, #12
 800a3ac:	4683      	mov	fp, r0
 800a3ae:	0092      	lsls	r2, r2, #2
 800a3b0:	300c      	adds	r0, #12
 800a3b2:	f000 f90d 	bl	800a5d0 <memcpy>
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	9802      	ldr	r0, [sp, #8]
 800a3ba:	f000 f948 	bl	800a64e <_Bfree>
 800a3be:	465d      	mov	r5, fp
 800a3c0:	692b      	ldr	r3, [r5, #16]
 800a3c2:	1c5a      	adds	r2, r3, #1
 800a3c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a3c8:	612a      	str	r2, [r5, #16]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	615a      	str	r2, [r3, #20]
 800a3ce:	e7c2      	b.n	800a356 <__gethex+0x390>
 800a3d0:	692a      	ldr	r2, [r5, #16]
 800a3d2:	454a      	cmp	r2, r9
 800a3d4:	dd0b      	ble.n	800a3ee <__gethex+0x428>
 800a3d6:	2101      	movs	r1, #1
 800a3d8:	4628      	mov	r0, r5
 800a3da:	f7ff fda5 	bl	8009f28 <rshift>
 800a3de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a3e2:	3401      	adds	r4, #1
 800a3e4:	42a3      	cmp	r3, r4
 800a3e6:	f6ff aed9 	blt.w	800a19c <__gethex+0x1d6>
 800a3ea:	2701      	movs	r7, #1
 800a3ec:	e7c7      	b.n	800a37e <__gethex+0x3b8>
 800a3ee:	f016 061f 	ands.w	r6, r6, #31
 800a3f2:	d0fa      	beq.n	800a3ea <__gethex+0x424>
 800a3f4:	449a      	add	sl, r3
 800a3f6:	f1c6 0620 	rsb	r6, r6, #32
 800a3fa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a3fe:	f000 f9b6 	bl	800a76e <__hi0bits>
 800a402:	42b0      	cmp	r0, r6
 800a404:	dbe7      	blt.n	800a3d6 <__gethex+0x410>
 800a406:	e7f0      	b.n	800a3ea <__gethex+0x424>

0800a408 <L_shift>:
 800a408:	f1c2 0208 	rsb	r2, r2, #8
 800a40c:	0092      	lsls	r2, r2, #2
 800a40e:	b570      	push	{r4, r5, r6, lr}
 800a410:	f1c2 0620 	rsb	r6, r2, #32
 800a414:	6843      	ldr	r3, [r0, #4]
 800a416:	6804      	ldr	r4, [r0, #0]
 800a418:	fa03 f506 	lsl.w	r5, r3, r6
 800a41c:	432c      	orrs	r4, r5
 800a41e:	40d3      	lsrs	r3, r2
 800a420:	6004      	str	r4, [r0, #0]
 800a422:	f840 3f04 	str.w	r3, [r0, #4]!
 800a426:	4288      	cmp	r0, r1
 800a428:	d3f4      	bcc.n	800a414 <L_shift+0xc>
 800a42a:	bd70      	pop	{r4, r5, r6, pc}

0800a42c <__match>:
 800a42c:	b530      	push	{r4, r5, lr}
 800a42e:	6803      	ldr	r3, [r0, #0]
 800a430:	3301      	adds	r3, #1
 800a432:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a436:	b914      	cbnz	r4, 800a43e <__match+0x12>
 800a438:	6003      	str	r3, [r0, #0]
 800a43a:	2001      	movs	r0, #1
 800a43c:	bd30      	pop	{r4, r5, pc}
 800a43e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a442:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a446:	2d19      	cmp	r5, #25
 800a448:	bf98      	it	ls
 800a44a:	3220      	addls	r2, #32
 800a44c:	42a2      	cmp	r2, r4
 800a44e:	d0f0      	beq.n	800a432 <__match+0x6>
 800a450:	2000      	movs	r0, #0
 800a452:	e7f3      	b.n	800a43c <__match+0x10>

0800a454 <__hexnan>:
 800a454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a458:	680b      	ldr	r3, [r1, #0]
 800a45a:	6801      	ldr	r1, [r0, #0]
 800a45c:	115f      	asrs	r7, r3, #5
 800a45e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a462:	f013 031f 	ands.w	r3, r3, #31
 800a466:	b087      	sub	sp, #28
 800a468:	bf18      	it	ne
 800a46a:	3704      	addne	r7, #4
 800a46c:	2500      	movs	r5, #0
 800a46e:	1f3e      	subs	r6, r7, #4
 800a470:	4682      	mov	sl, r0
 800a472:	4690      	mov	r8, r2
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	f847 5c04 	str.w	r5, [r7, #-4]
 800a47a:	46b1      	mov	r9, r6
 800a47c:	4634      	mov	r4, r6
 800a47e:	9502      	str	r5, [sp, #8]
 800a480:	46ab      	mov	fp, r5
 800a482:	784a      	ldrb	r2, [r1, #1]
 800a484:	1c4b      	adds	r3, r1, #1
 800a486:	9303      	str	r3, [sp, #12]
 800a488:	b342      	cbz	r2, 800a4dc <__hexnan+0x88>
 800a48a:	4610      	mov	r0, r2
 800a48c:	9105      	str	r1, [sp, #20]
 800a48e:	9204      	str	r2, [sp, #16]
 800a490:	f7ff fd84 	bl	8009f9c <__hexdig_fun>
 800a494:	2800      	cmp	r0, #0
 800a496:	d143      	bne.n	800a520 <__hexnan+0xcc>
 800a498:	9a04      	ldr	r2, [sp, #16]
 800a49a:	9905      	ldr	r1, [sp, #20]
 800a49c:	2a20      	cmp	r2, #32
 800a49e:	d818      	bhi.n	800a4d2 <__hexnan+0x7e>
 800a4a0:	9b02      	ldr	r3, [sp, #8]
 800a4a2:	459b      	cmp	fp, r3
 800a4a4:	dd13      	ble.n	800a4ce <__hexnan+0x7a>
 800a4a6:	454c      	cmp	r4, r9
 800a4a8:	d206      	bcs.n	800a4b8 <__hexnan+0x64>
 800a4aa:	2d07      	cmp	r5, #7
 800a4ac:	dc04      	bgt.n	800a4b8 <__hexnan+0x64>
 800a4ae:	462a      	mov	r2, r5
 800a4b0:	4649      	mov	r1, r9
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f7ff ffa8 	bl	800a408 <L_shift>
 800a4b8:	4544      	cmp	r4, r8
 800a4ba:	d944      	bls.n	800a546 <__hexnan+0xf2>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	f1a4 0904 	sub.w	r9, r4, #4
 800a4c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4c6:	f8cd b008 	str.w	fp, [sp, #8]
 800a4ca:	464c      	mov	r4, r9
 800a4cc:	461d      	mov	r5, r3
 800a4ce:	9903      	ldr	r1, [sp, #12]
 800a4d0:	e7d7      	b.n	800a482 <__hexnan+0x2e>
 800a4d2:	2a29      	cmp	r2, #41	; 0x29
 800a4d4:	d14a      	bne.n	800a56c <__hexnan+0x118>
 800a4d6:	3102      	adds	r1, #2
 800a4d8:	f8ca 1000 	str.w	r1, [sl]
 800a4dc:	f1bb 0f00 	cmp.w	fp, #0
 800a4e0:	d044      	beq.n	800a56c <__hexnan+0x118>
 800a4e2:	454c      	cmp	r4, r9
 800a4e4:	d206      	bcs.n	800a4f4 <__hexnan+0xa0>
 800a4e6:	2d07      	cmp	r5, #7
 800a4e8:	dc04      	bgt.n	800a4f4 <__hexnan+0xa0>
 800a4ea:	462a      	mov	r2, r5
 800a4ec:	4649      	mov	r1, r9
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f7ff ff8a 	bl	800a408 <L_shift>
 800a4f4:	4544      	cmp	r4, r8
 800a4f6:	d928      	bls.n	800a54a <__hexnan+0xf6>
 800a4f8:	4643      	mov	r3, r8
 800a4fa:	f854 2b04 	ldr.w	r2, [r4], #4
 800a4fe:	f843 2b04 	str.w	r2, [r3], #4
 800a502:	42a6      	cmp	r6, r4
 800a504:	d2f9      	bcs.n	800a4fa <__hexnan+0xa6>
 800a506:	2200      	movs	r2, #0
 800a508:	f843 2b04 	str.w	r2, [r3], #4
 800a50c:	429e      	cmp	r6, r3
 800a50e:	d2fb      	bcs.n	800a508 <__hexnan+0xb4>
 800a510:	6833      	ldr	r3, [r6, #0]
 800a512:	b91b      	cbnz	r3, 800a51c <__hexnan+0xc8>
 800a514:	4546      	cmp	r6, r8
 800a516:	d127      	bne.n	800a568 <__hexnan+0x114>
 800a518:	2301      	movs	r3, #1
 800a51a:	6033      	str	r3, [r6, #0]
 800a51c:	2005      	movs	r0, #5
 800a51e:	e026      	b.n	800a56e <__hexnan+0x11a>
 800a520:	3501      	adds	r5, #1
 800a522:	2d08      	cmp	r5, #8
 800a524:	f10b 0b01 	add.w	fp, fp, #1
 800a528:	dd06      	ble.n	800a538 <__hexnan+0xe4>
 800a52a:	4544      	cmp	r4, r8
 800a52c:	d9cf      	bls.n	800a4ce <__hexnan+0x7a>
 800a52e:	2300      	movs	r3, #0
 800a530:	f844 3c04 	str.w	r3, [r4, #-4]
 800a534:	2501      	movs	r5, #1
 800a536:	3c04      	subs	r4, #4
 800a538:	6822      	ldr	r2, [r4, #0]
 800a53a:	f000 000f 	and.w	r0, r0, #15
 800a53e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a542:	6020      	str	r0, [r4, #0]
 800a544:	e7c3      	b.n	800a4ce <__hexnan+0x7a>
 800a546:	2508      	movs	r5, #8
 800a548:	e7c1      	b.n	800a4ce <__hexnan+0x7a>
 800a54a:	9b01      	ldr	r3, [sp, #4]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d0df      	beq.n	800a510 <__hexnan+0xbc>
 800a550:	f04f 32ff 	mov.w	r2, #4294967295
 800a554:	f1c3 0320 	rsb	r3, r3, #32
 800a558:	fa22 f303 	lsr.w	r3, r2, r3
 800a55c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a560:	401a      	ands	r2, r3
 800a562:	f847 2c04 	str.w	r2, [r7, #-4]
 800a566:	e7d3      	b.n	800a510 <__hexnan+0xbc>
 800a568:	3e04      	subs	r6, #4
 800a56a:	e7d1      	b.n	800a510 <__hexnan+0xbc>
 800a56c:	2004      	movs	r0, #4
 800a56e:	b007      	add	sp, #28
 800a570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a574 <__locale_ctype_ptr_l>:
 800a574:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a578:	4770      	bx	lr

0800a57a <__localeconv_l>:
 800a57a:	30f0      	adds	r0, #240	; 0xf0
 800a57c:	4770      	bx	lr
	...

0800a580 <_localeconv_r>:
 800a580:	4b04      	ldr	r3, [pc, #16]	; (800a594 <_localeconv_r+0x14>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6a18      	ldr	r0, [r3, #32]
 800a586:	4b04      	ldr	r3, [pc, #16]	; (800a598 <_localeconv_r+0x18>)
 800a588:	2800      	cmp	r0, #0
 800a58a:	bf08      	it	eq
 800a58c:	4618      	moveq	r0, r3
 800a58e:	30f0      	adds	r0, #240	; 0xf0
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	20000010 	.word	0x20000010
 800a598:	20000074 	.word	0x20000074

0800a59c <malloc>:
 800a59c:	4b02      	ldr	r3, [pc, #8]	; (800a5a8 <malloc+0xc>)
 800a59e:	4601      	mov	r1, r0
 800a5a0:	6818      	ldr	r0, [r3, #0]
 800a5a2:	f000 bc7b 	b.w	800ae9c <_malloc_r>
 800a5a6:	bf00      	nop
 800a5a8:	20000010 	.word	0x20000010

0800a5ac <__ascii_mbtowc>:
 800a5ac:	b082      	sub	sp, #8
 800a5ae:	b901      	cbnz	r1, 800a5b2 <__ascii_mbtowc+0x6>
 800a5b0:	a901      	add	r1, sp, #4
 800a5b2:	b142      	cbz	r2, 800a5c6 <__ascii_mbtowc+0x1a>
 800a5b4:	b14b      	cbz	r3, 800a5ca <__ascii_mbtowc+0x1e>
 800a5b6:	7813      	ldrb	r3, [r2, #0]
 800a5b8:	600b      	str	r3, [r1, #0]
 800a5ba:	7812      	ldrb	r2, [r2, #0]
 800a5bc:	1c10      	adds	r0, r2, #0
 800a5be:	bf18      	it	ne
 800a5c0:	2001      	movne	r0, #1
 800a5c2:	b002      	add	sp, #8
 800a5c4:	4770      	bx	lr
 800a5c6:	4610      	mov	r0, r2
 800a5c8:	e7fb      	b.n	800a5c2 <__ascii_mbtowc+0x16>
 800a5ca:	f06f 0001 	mvn.w	r0, #1
 800a5ce:	e7f8      	b.n	800a5c2 <__ascii_mbtowc+0x16>

0800a5d0 <memcpy>:
 800a5d0:	b510      	push	{r4, lr}
 800a5d2:	1e43      	subs	r3, r0, #1
 800a5d4:	440a      	add	r2, r1
 800a5d6:	4291      	cmp	r1, r2
 800a5d8:	d100      	bne.n	800a5dc <memcpy+0xc>
 800a5da:	bd10      	pop	{r4, pc}
 800a5dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5e4:	e7f7      	b.n	800a5d6 <memcpy+0x6>

0800a5e6 <_Balloc>:
 800a5e6:	b570      	push	{r4, r5, r6, lr}
 800a5e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	460e      	mov	r6, r1
 800a5ee:	b93d      	cbnz	r5, 800a600 <_Balloc+0x1a>
 800a5f0:	2010      	movs	r0, #16
 800a5f2:	f7ff ffd3 	bl	800a59c <malloc>
 800a5f6:	6260      	str	r0, [r4, #36]	; 0x24
 800a5f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a5fc:	6005      	str	r5, [r0, #0]
 800a5fe:	60c5      	str	r5, [r0, #12]
 800a600:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a602:	68eb      	ldr	r3, [r5, #12]
 800a604:	b183      	cbz	r3, 800a628 <_Balloc+0x42>
 800a606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a60e:	b9b8      	cbnz	r0, 800a640 <_Balloc+0x5a>
 800a610:	2101      	movs	r1, #1
 800a612:	fa01 f506 	lsl.w	r5, r1, r6
 800a616:	1d6a      	adds	r2, r5, #5
 800a618:	0092      	lsls	r2, r2, #2
 800a61a:	4620      	mov	r0, r4
 800a61c:	f000 fbe1 	bl	800ade2 <_calloc_r>
 800a620:	b160      	cbz	r0, 800a63c <_Balloc+0x56>
 800a622:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a626:	e00e      	b.n	800a646 <_Balloc+0x60>
 800a628:	2221      	movs	r2, #33	; 0x21
 800a62a:	2104      	movs	r1, #4
 800a62c:	4620      	mov	r0, r4
 800a62e:	f000 fbd8 	bl	800ade2 <_calloc_r>
 800a632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a634:	60e8      	str	r0, [r5, #12]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1e4      	bne.n	800a606 <_Balloc+0x20>
 800a63c:	2000      	movs	r0, #0
 800a63e:	bd70      	pop	{r4, r5, r6, pc}
 800a640:	6802      	ldr	r2, [r0, #0]
 800a642:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a646:	2300      	movs	r3, #0
 800a648:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a64c:	e7f7      	b.n	800a63e <_Balloc+0x58>

0800a64e <_Bfree>:
 800a64e:	b570      	push	{r4, r5, r6, lr}
 800a650:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a652:	4606      	mov	r6, r0
 800a654:	460d      	mov	r5, r1
 800a656:	b93c      	cbnz	r4, 800a668 <_Bfree+0x1a>
 800a658:	2010      	movs	r0, #16
 800a65a:	f7ff ff9f 	bl	800a59c <malloc>
 800a65e:	6270      	str	r0, [r6, #36]	; 0x24
 800a660:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a664:	6004      	str	r4, [r0, #0]
 800a666:	60c4      	str	r4, [r0, #12]
 800a668:	b13d      	cbz	r5, 800a67a <_Bfree+0x2c>
 800a66a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a66c:	686a      	ldr	r2, [r5, #4]
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a674:	6029      	str	r1, [r5, #0]
 800a676:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a67a:	bd70      	pop	{r4, r5, r6, pc}

0800a67c <__multadd>:
 800a67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a680:	690d      	ldr	r5, [r1, #16]
 800a682:	461f      	mov	r7, r3
 800a684:	4606      	mov	r6, r0
 800a686:	460c      	mov	r4, r1
 800a688:	f101 0c14 	add.w	ip, r1, #20
 800a68c:	2300      	movs	r3, #0
 800a68e:	f8dc 0000 	ldr.w	r0, [ip]
 800a692:	b281      	uxth	r1, r0
 800a694:	fb02 7101 	mla	r1, r2, r1, r7
 800a698:	0c0f      	lsrs	r7, r1, #16
 800a69a:	0c00      	lsrs	r0, r0, #16
 800a69c:	fb02 7000 	mla	r0, r2, r0, r7
 800a6a0:	b289      	uxth	r1, r1
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a6a8:	429d      	cmp	r5, r3
 800a6aa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a6ae:	f84c 1b04 	str.w	r1, [ip], #4
 800a6b2:	dcec      	bgt.n	800a68e <__multadd+0x12>
 800a6b4:	b1d7      	cbz	r7, 800a6ec <__multadd+0x70>
 800a6b6:	68a3      	ldr	r3, [r4, #8]
 800a6b8:	42ab      	cmp	r3, r5
 800a6ba:	dc12      	bgt.n	800a6e2 <__multadd+0x66>
 800a6bc:	6861      	ldr	r1, [r4, #4]
 800a6be:	4630      	mov	r0, r6
 800a6c0:	3101      	adds	r1, #1
 800a6c2:	f7ff ff90 	bl	800a5e6 <_Balloc>
 800a6c6:	6922      	ldr	r2, [r4, #16]
 800a6c8:	3202      	adds	r2, #2
 800a6ca:	f104 010c 	add.w	r1, r4, #12
 800a6ce:	4680      	mov	r8, r0
 800a6d0:	0092      	lsls	r2, r2, #2
 800a6d2:	300c      	adds	r0, #12
 800a6d4:	f7ff ff7c 	bl	800a5d0 <memcpy>
 800a6d8:	4621      	mov	r1, r4
 800a6da:	4630      	mov	r0, r6
 800a6dc:	f7ff ffb7 	bl	800a64e <_Bfree>
 800a6e0:	4644      	mov	r4, r8
 800a6e2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a6e6:	3501      	adds	r5, #1
 800a6e8:	615f      	str	r7, [r3, #20]
 800a6ea:	6125      	str	r5, [r4, #16]
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a6f2 <__s2b>:
 800a6f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6f6:	460c      	mov	r4, r1
 800a6f8:	4615      	mov	r5, r2
 800a6fa:	461f      	mov	r7, r3
 800a6fc:	2209      	movs	r2, #9
 800a6fe:	3308      	adds	r3, #8
 800a700:	4606      	mov	r6, r0
 800a702:	fb93 f3f2 	sdiv	r3, r3, r2
 800a706:	2100      	movs	r1, #0
 800a708:	2201      	movs	r2, #1
 800a70a:	429a      	cmp	r2, r3
 800a70c:	db20      	blt.n	800a750 <__s2b+0x5e>
 800a70e:	4630      	mov	r0, r6
 800a710:	f7ff ff69 	bl	800a5e6 <_Balloc>
 800a714:	9b08      	ldr	r3, [sp, #32]
 800a716:	6143      	str	r3, [r0, #20]
 800a718:	2d09      	cmp	r5, #9
 800a71a:	f04f 0301 	mov.w	r3, #1
 800a71e:	6103      	str	r3, [r0, #16]
 800a720:	dd19      	ble.n	800a756 <__s2b+0x64>
 800a722:	f104 0809 	add.w	r8, r4, #9
 800a726:	46c1      	mov	r9, r8
 800a728:	442c      	add	r4, r5
 800a72a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a72e:	4601      	mov	r1, r0
 800a730:	3b30      	subs	r3, #48	; 0x30
 800a732:	220a      	movs	r2, #10
 800a734:	4630      	mov	r0, r6
 800a736:	f7ff ffa1 	bl	800a67c <__multadd>
 800a73a:	45a1      	cmp	r9, r4
 800a73c:	d1f5      	bne.n	800a72a <__s2b+0x38>
 800a73e:	eb08 0405 	add.w	r4, r8, r5
 800a742:	3c08      	subs	r4, #8
 800a744:	1b2d      	subs	r5, r5, r4
 800a746:	1963      	adds	r3, r4, r5
 800a748:	42bb      	cmp	r3, r7
 800a74a:	db07      	blt.n	800a75c <__s2b+0x6a>
 800a74c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a750:	0052      	lsls	r2, r2, #1
 800a752:	3101      	adds	r1, #1
 800a754:	e7d9      	b.n	800a70a <__s2b+0x18>
 800a756:	340a      	adds	r4, #10
 800a758:	2509      	movs	r5, #9
 800a75a:	e7f3      	b.n	800a744 <__s2b+0x52>
 800a75c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a760:	4601      	mov	r1, r0
 800a762:	3b30      	subs	r3, #48	; 0x30
 800a764:	220a      	movs	r2, #10
 800a766:	4630      	mov	r0, r6
 800a768:	f7ff ff88 	bl	800a67c <__multadd>
 800a76c:	e7eb      	b.n	800a746 <__s2b+0x54>

0800a76e <__hi0bits>:
 800a76e:	0c02      	lsrs	r2, r0, #16
 800a770:	0412      	lsls	r2, r2, #16
 800a772:	4603      	mov	r3, r0
 800a774:	b9b2      	cbnz	r2, 800a7a4 <__hi0bits+0x36>
 800a776:	0403      	lsls	r3, r0, #16
 800a778:	2010      	movs	r0, #16
 800a77a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a77e:	bf04      	itt	eq
 800a780:	021b      	lsleq	r3, r3, #8
 800a782:	3008      	addeq	r0, #8
 800a784:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a788:	bf04      	itt	eq
 800a78a:	011b      	lsleq	r3, r3, #4
 800a78c:	3004      	addeq	r0, #4
 800a78e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a792:	bf04      	itt	eq
 800a794:	009b      	lsleq	r3, r3, #2
 800a796:	3002      	addeq	r0, #2
 800a798:	2b00      	cmp	r3, #0
 800a79a:	db06      	blt.n	800a7aa <__hi0bits+0x3c>
 800a79c:	005b      	lsls	r3, r3, #1
 800a79e:	d503      	bpl.n	800a7a8 <__hi0bits+0x3a>
 800a7a0:	3001      	adds	r0, #1
 800a7a2:	4770      	bx	lr
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	e7e8      	b.n	800a77a <__hi0bits+0xc>
 800a7a8:	2020      	movs	r0, #32
 800a7aa:	4770      	bx	lr

0800a7ac <__lo0bits>:
 800a7ac:	6803      	ldr	r3, [r0, #0]
 800a7ae:	f013 0207 	ands.w	r2, r3, #7
 800a7b2:	4601      	mov	r1, r0
 800a7b4:	d00b      	beq.n	800a7ce <__lo0bits+0x22>
 800a7b6:	07da      	lsls	r2, r3, #31
 800a7b8:	d423      	bmi.n	800a802 <__lo0bits+0x56>
 800a7ba:	0798      	lsls	r0, r3, #30
 800a7bc:	bf49      	itett	mi
 800a7be:	085b      	lsrmi	r3, r3, #1
 800a7c0:	089b      	lsrpl	r3, r3, #2
 800a7c2:	2001      	movmi	r0, #1
 800a7c4:	600b      	strmi	r3, [r1, #0]
 800a7c6:	bf5c      	itt	pl
 800a7c8:	600b      	strpl	r3, [r1, #0]
 800a7ca:	2002      	movpl	r0, #2
 800a7cc:	4770      	bx	lr
 800a7ce:	b298      	uxth	r0, r3
 800a7d0:	b9a8      	cbnz	r0, 800a7fe <__lo0bits+0x52>
 800a7d2:	0c1b      	lsrs	r3, r3, #16
 800a7d4:	2010      	movs	r0, #16
 800a7d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a7da:	bf04      	itt	eq
 800a7dc:	0a1b      	lsreq	r3, r3, #8
 800a7de:	3008      	addeq	r0, #8
 800a7e0:	071a      	lsls	r2, r3, #28
 800a7e2:	bf04      	itt	eq
 800a7e4:	091b      	lsreq	r3, r3, #4
 800a7e6:	3004      	addeq	r0, #4
 800a7e8:	079a      	lsls	r2, r3, #30
 800a7ea:	bf04      	itt	eq
 800a7ec:	089b      	lsreq	r3, r3, #2
 800a7ee:	3002      	addeq	r0, #2
 800a7f0:	07da      	lsls	r2, r3, #31
 800a7f2:	d402      	bmi.n	800a7fa <__lo0bits+0x4e>
 800a7f4:	085b      	lsrs	r3, r3, #1
 800a7f6:	d006      	beq.n	800a806 <__lo0bits+0x5a>
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	600b      	str	r3, [r1, #0]
 800a7fc:	4770      	bx	lr
 800a7fe:	4610      	mov	r0, r2
 800a800:	e7e9      	b.n	800a7d6 <__lo0bits+0x2a>
 800a802:	2000      	movs	r0, #0
 800a804:	4770      	bx	lr
 800a806:	2020      	movs	r0, #32
 800a808:	4770      	bx	lr

0800a80a <__i2b>:
 800a80a:	b510      	push	{r4, lr}
 800a80c:	460c      	mov	r4, r1
 800a80e:	2101      	movs	r1, #1
 800a810:	f7ff fee9 	bl	800a5e6 <_Balloc>
 800a814:	2201      	movs	r2, #1
 800a816:	6144      	str	r4, [r0, #20]
 800a818:	6102      	str	r2, [r0, #16]
 800a81a:	bd10      	pop	{r4, pc}

0800a81c <__multiply>:
 800a81c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a820:	4614      	mov	r4, r2
 800a822:	690a      	ldr	r2, [r1, #16]
 800a824:	6923      	ldr	r3, [r4, #16]
 800a826:	429a      	cmp	r2, r3
 800a828:	bfb8      	it	lt
 800a82a:	460b      	movlt	r3, r1
 800a82c:	4688      	mov	r8, r1
 800a82e:	bfbc      	itt	lt
 800a830:	46a0      	movlt	r8, r4
 800a832:	461c      	movlt	r4, r3
 800a834:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a838:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a83c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a840:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a844:	eb07 0609 	add.w	r6, r7, r9
 800a848:	42b3      	cmp	r3, r6
 800a84a:	bfb8      	it	lt
 800a84c:	3101      	addlt	r1, #1
 800a84e:	f7ff feca 	bl	800a5e6 <_Balloc>
 800a852:	f100 0514 	add.w	r5, r0, #20
 800a856:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a85a:	462b      	mov	r3, r5
 800a85c:	2200      	movs	r2, #0
 800a85e:	4573      	cmp	r3, lr
 800a860:	d316      	bcc.n	800a890 <__multiply+0x74>
 800a862:	f104 0214 	add.w	r2, r4, #20
 800a866:	f108 0114 	add.w	r1, r8, #20
 800a86a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a86e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	9b00      	ldr	r3, [sp, #0]
 800a876:	9201      	str	r2, [sp, #4]
 800a878:	4293      	cmp	r3, r2
 800a87a:	d80c      	bhi.n	800a896 <__multiply+0x7a>
 800a87c:	2e00      	cmp	r6, #0
 800a87e:	dd03      	ble.n	800a888 <__multiply+0x6c>
 800a880:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a884:	2b00      	cmp	r3, #0
 800a886:	d05d      	beq.n	800a944 <__multiply+0x128>
 800a888:	6106      	str	r6, [r0, #16]
 800a88a:	b003      	add	sp, #12
 800a88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a890:	f843 2b04 	str.w	r2, [r3], #4
 800a894:	e7e3      	b.n	800a85e <__multiply+0x42>
 800a896:	f8b2 b000 	ldrh.w	fp, [r2]
 800a89a:	f1bb 0f00 	cmp.w	fp, #0
 800a89e:	d023      	beq.n	800a8e8 <__multiply+0xcc>
 800a8a0:	4689      	mov	r9, r1
 800a8a2:	46ac      	mov	ip, r5
 800a8a4:	f04f 0800 	mov.w	r8, #0
 800a8a8:	f859 4b04 	ldr.w	r4, [r9], #4
 800a8ac:	f8dc a000 	ldr.w	sl, [ip]
 800a8b0:	b2a3      	uxth	r3, r4
 800a8b2:	fa1f fa8a 	uxth.w	sl, sl
 800a8b6:	fb0b a303 	mla	r3, fp, r3, sl
 800a8ba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a8be:	f8dc 4000 	ldr.w	r4, [ip]
 800a8c2:	4443      	add	r3, r8
 800a8c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a8c8:	fb0b 840a 	mla	r4, fp, sl, r8
 800a8cc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a8d0:	46e2      	mov	sl, ip
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a8d8:	454f      	cmp	r7, r9
 800a8da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a8de:	f84a 3b04 	str.w	r3, [sl], #4
 800a8e2:	d82b      	bhi.n	800a93c <__multiply+0x120>
 800a8e4:	f8cc 8004 	str.w	r8, [ip, #4]
 800a8e8:	9b01      	ldr	r3, [sp, #4]
 800a8ea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a8ee:	3204      	adds	r2, #4
 800a8f0:	f1ba 0f00 	cmp.w	sl, #0
 800a8f4:	d020      	beq.n	800a938 <__multiply+0x11c>
 800a8f6:	682b      	ldr	r3, [r5, #0]
 800a8f8:	4689      	mov	r9, r1
 800a8fa:	46a8      	mov	r8, r5
 800a8fc:	f04f 0b00 	mov.w	fp, #0
 800a900:	f8b9 c000 	ldrh.w	ip, [r9]
 800a904:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a908:	fb0a 440c 	mla	r4, sl, ip, r4
 800a90c:	445c      	add	r4, fp
 800a90e:	46c4      	mov	ip, r8
 800a910:	b29b      	uxth	r3, r3
 800a912:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a916:	f84c 3b04 	str.w	r3, [ip], #4
 800a91a:	f859 3b04 	ldr.w	r3, [r9], #4
 800a91e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a922:	0c1b      	lsrs	r3, r3, #16
 800a924:	fb0a b303 	mla	r3, sl, r3, fp
 800a928:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a92c:	454f      	cmp	r7, r9
 800a92e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a932:	d805      	bhi.n	800a940 <__multiply+0x124>
 800a934:	f8c8 3004 	str.w	r3, [r8, #4]
 800a938:	3504      	adds	r5, #4
 800a93a:	e79b      	b.n	800a874 <__multiply+0x58>
 800a93c:	46d4      	mov	ip, sl
 800a93e:	e7b3      	b.n	800a8a8 <__multiply+0x8c>
 800a940:	46e0      	mov	r8, ip
 800a942:	e7dd      	b.n	800a900 <__multiply+0xe4>
 800a944:	3e01      	subs	r6, #1
 800a946:	e799      	b.n	800a87c <__multiply+0x60>

0800a948 <__pow5mult>:
 800a948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a94c:	4615      	mov	r5, r2
 800a94e:	f012 0203 	ands.w	r2, r2, #3
 800a952:	4606      	mov	r6, r0
 800a954:	460f      	mov	r7, r1
 800a956:	d007      	beq.n	800a968 <__pow5mult+0x20>
 800a958:	3a01      	subs	r2, #1
 800a95a:	4c21      	ldr	r4, [pc, #132]	; (800a9e0 <__pow5mult+0x98>)
 800a95c:	2300      	movs	r3, #0
 800a95e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a962:	f7ff fe8b 	bl	800a67c <__multadd>
 800a966:	4607      	mov	r7, r0
 800a968:	10ad      	asrs	r5, r5, #2
 800a96a:	d035      	beq.n	800a9d8 <__pow5mult+0x90>
 800a96c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a96e:	b93c      	cbnz	r4, 800a980 <__pow5mult+0x38>
 800a970:	2010      	movs	r0, #16
 800a972:	f7ff fe13 	bl	800a59c <malloc>
 800a976:	6270      	str	r0, [r6, #36]	; 0x24
 800a978:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a97c:	6004      	str	r4, [r0, #0]
 800a97e:	60c4      	str	r4, [r0, #12]
 800a980:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a984:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a988:	b94c      	cbnz	r4, 800a99e <__pow5mult+0x56>
 800a98a:	f240 2171 	movw	r1, #625	; 0x271
 800a98e:	4630      	mov	r0, r6
 800a990:	f7ff ff3b 	bl	800a80a <__i2b>
 800a994:	2300      	movs	r3, #0
 800a996:	f8c8 0008 	str.w	r0, [r8, #8]
 800a99a:	4604      	mov	r4, r0
 800a99c:	6003      	str	r3, [r0, #0]
 800a99e:	f04f 0800 	mov.w	r8, #0
 800a9a2:	07eb      	lsls	r3, r5, #31
 800a9a4:	d50a      	bpl.n	800a9bc <__pow5mult+0x74>
 800a9a6:	4639      	mov	r1, r7
 800a9a8:	4622      	mov	r2, r4
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f7ff ff36 	bl	800a81c <__multiply>
 800a9b0:	4639      	mov	r1, r7
 800a9b2:	4681      	mov	r9, r0
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	f7ff fe4a 	bl	800a64e <_Bfree>
 800a9ba:	464f      	mov	r7, r9
 800a9bc:	106d      	asrs	r5, r5, #1
 800a9be:	d00b      	beq.n	800a9d8 <__pow5mult+0x90>
 800a9c0:	6820      	ldr	r0, [r4, #0]
 800a9c2:	b938      	cbnz	r0, 800a9d4 <__pow5mult+0x8c>
 800a9c4:	4622      	mov	r2, r4
 800a9c6:	4621      	mov	r1, r4
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	f7ff ff27 	bl	800a81c <__multiply>
 800a9ce:	6020      	str	r0, [r4, #0]
 800a9d0:	f8c0 8000 	str.w	r8, [r0]
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	e7e4      	b.n	800a9a2 <__pow5mult+0x5a>
 800a9d8:	4638      	mov	r0, r7
 800a9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9de:	bf00      	nop
 800a9e0:	0800b4d0 	.word	0x0800b4d0

0800a9e4 <__lshift>:
 800a9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9ee:	6923      	ldr	r3, [r4, #16]
 800a9f0:	6849      	ldr	r1, [r1, #4]
 800a9f2:	eb0a 0903 	add.w	r9, sl, r3
 800a9f6:	68a3      	ldr	r3, [r4, #8]
 800a9f8:	4607      	mov	r7, r0
 800a9fa:	4616      	mov	r6, r2
 800a9fc:	f109 0501 	add.w	r5, r9, #1
 800aa00:	42ab      	cmp	r3, r5
 800aa02:	db32      	blt.n	800aa6a <__lshift+0x86>
 800aa04:	4638      	mov	r0, r7
 800aa06:	f7ff fdee 	bl	800a5e6 <_Balloc>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	4680      	mov	r8, r0
 800aa0e:	f100 0114 	add.w	r1, r0, #20
 800aa12:	461a      	mov	r2, r3
 800aa14:	4553      	cmp	r3, sl
 800aa16:	db2b      	blt.n	800aa70 <__lshift+0x8c>
 800aa18:	6920      	ldr	r0, [r4, #16]
 800aa1a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa1e:	f104 0314 	add.w	r3, r4, #20
 800aa22:	f016 021f 	ands.w	r2, r6, #31
 800aa26:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa2a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa2e:	d025      	beq.n	800aa7c <__lshift+0x98>
 800aa30:	f1c2 0e20 	rsb	lr, r2, #32
 800aa34:	2000      	movs	r0, #0
 800aa36:	681e      	ldr	r6, [r3, #0]
 800aa38:	468a      	mov	sl, r1
 800aa3a:	4096      	lsls	r6, r2
 800aa3c:	4330      	orrs	r0, r6
 800aa3e:	f84a 0b04 	str.w	r0, [sl], #4
 800aa42:	f853 0b04 	ldr.w	r0, [r3], #4
 800aa46:	459c      	cmp	ip, r3
 800aa48:	fa20 f00e 	lsr.w	r0, r0, lr
 800aa4c:	d814      	bhi.n	800aa78 <__lshift+0x94>
 800aa4e:	6048      	str	r0, [r1, #4]
 800aa50:	b108      	cbz	r0, 800aa56 <__lshift+0x72>
 800aa52:	f109 0502 	add.w	r5, r9, #2
 800aa56:	3d01      	subs	r5, #1
 800aa58:	4638      	mov	r0, r7
 800aa5a:	f8c8 5010 	str.w	r5, [r8, #16]
 800aa5e:	4621      	mov	r1, r4
 800aa60:	f7ff fdf5 	bl	800a64e <_Bfree>
 800aa64:	4640      	mov	r0, r8
 800aa66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa6a:	3101      	adds	r1, #1
 800aa6c:	005b      	lsls	r3, r3, #1
 800aa6e:	e7c7      	b.n	800aa00 <__lshift+0x1c>
 800aa70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800aa74:	3301      	adds	r3, #1
 800aa76:	e7cd      	b.n	800aa14 <__lshift+0x30>
 800aa78:	4651      	mov	r1, sl
 800aa7a:	e7dc      	b.n	800aa36 <__lshift+0x52>
 800aa7c:	3904      	subs	r1, #4
 800aa7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa82:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa86:	459c      	cmp	ip, r3
 800aa88:	d8f9      	bhi.n	800aa7e <__lshift+0x9a>
 800aa8a:	e7e4      	b.n	800aa56 <__lshift+0x72>

0800aa8c <__mcmp>:
 800aa8c:	6903      	ldr	r3, [r0, #16]
 800aa8e:	690a      	ldr	r2, [r1, #16]
 800aa90:	1a9b      	subs	r3, r3, r2
 800aa92:	b530      	push	{r4, r5, lr}
 800aa94:	d10c      	bne.n	800aab0 <__mcmp+0x24>
 800aa96:	0092      	lsls	r2, r2, #2
 800aa98:	3014      	adds	r0, #20
 800aa9a:	3114      	adds	r1, #20
 800aa9c:	1884      	adds	r4, r0, r2
 800aa9e:	4411      	add	r1, r2
 800aaa0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aaa4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aaa8:	4295      	cmp	r5, r2
 800aaaa:	d003      	beq.n	800aab4 <__mcmp+0x28>
 800aaac:	d305      	bcc.n	800aaba <__mcmp+0x2e>
 800aaae:	2301      	movs	r3, #1
 800aab0:	4618      	mov	r0, r3
 800aab2:	bd30      	pop	{r4, r5, pc}
 800aab4:	42a0      	cmp	r0, r4
 800aab6:	d3f3      	bcc.n	800aaa0 <__mcmp+0x14>
 800aab8:	e7fa      	b.n	800aab0 <__mcmp+0x24>
 800aaba:	f04f 33ff 	mov.w	r3, #4294967295
 800aabe:	e7f7      	b.n	800aab0 <__mcmp+0x24>

0800aac0 <__mdiff>:
 800aac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aac4:	460d      	mov	r5, r1
 800aac6:	4607      	mov	r7, r0
 800aac8:	4611      	mov	r1, r2
 800aaca:	4628      	mov	r0, r5
 800aacc:	4614      	mov	r4, r2
 800aace:	f7ff ffdd 	bl	800aa8c <__mcmp>
 800aad2:	1e06      	subs	r6, r0, #0
 800aad4:	d108      	bne.n	800aae8 <__mdiff+0x28>
 800aad6:	4631      	mov	r1, r6
 800aad8:	4638      	mov	r0, r7
 800aada:	f7ff fd84 	bl	800a5e6 <_Balloc>
 800aade:	2301      	movs	r3, #1
 800aae0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800aae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae8:	bfa4      	itt	ge
 800aaea:	4623      	movge	r3, r4
 800aaec:	462c      	movge	r4, r5
 800aaee:	4638      	mov	r0, r7
 800aaf0:	6861      	ldr	r1, [r4, #4]
 800aaf2:	bfa6      	itte	ge
 800aaf4:	461d      	movge	r5, r3
 800aaf6:	2600      	movge	r6, #0
 800aaf8:	2601      	movlt	r6, #1
 800aafa:	f7ff fd74 	bl	800a5e6 <_Balloc>
 800aafe:	692b      	ldr	r3, [r5, #16]
 800ab00:	60c6      	str	r6, [r0, #12]
 800ab02:	6926      	ldr	r6, [r4, #16]
 800ab04:	f105 0914 	add.w	r9, r5, #20
 800ab08:	f104 0214 	add.w	r2, r4, #20
 800ab0c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ab10:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ab14:	f100 0514 	add.w	r5, r0, #20
 800ab18:	f04f 0e00 	mov.w	lr, #0
 800ab1c:	f852 ab04 	ldr.w	sl, [r2], #4
 800ab20:	f859 4b04 	ldr.w	r4, [r9], #4
 800ab24:	fa1e f18a 	uxtah	r1, lr, sl
 800ab28:	b2a3      	uxth	r3, r4
 800ab2a:	1ac9      	subs	r1, r1, r3
 800ab2c:	0c23      	lsrs	r3, r4, #16
 800ab2e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ab32:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ab36:	b289      	uxth	r1, r1
 800ab38:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ab3c:	45c8      	cmp	r8, r9
 800ab3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ab42:	4694      	mov	ip, r2
 800ab44:	f845 3b04 	str.w	r3, [r5], #4
 800ab48:	d8e8      	bhi.n	800ab1c <__mdiff+0x5c>
 800ab4a:	45bc      	cmp	ip, r7
 800ab4c:	d304      	bcc.n	800ab58 <__mdiff+0x98>
 800ab4e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ab52:	b183      	cbz	r3, 800ab76 <__mdiff+0xb6>
 800ab54:	6106      	str	r6, [r0, #16]
 800ab56:	e7c5      	b.n	800aae4 <__mdiff+0x24>
 800ab58:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ab5c:	fa1e f381 	uxtah	r3, lr, r1
 800ab60:	141a      	asrs	r2, r3, #16
 800ab62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab6c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ab70:	f845 3b04 	str.w	r3, [r5], #4
 800ab74:	e7e9      	b.n	800ab4a <__mdiff+0x8a>
 800ab76:	3e01      	subs	r6, #1
 800ab78:	e7e9      	b.n	800ab4e <__mdiff+0x8e>
	...

0800ab7c <__ulp>:
 800ab7c:	4b12      	ldr	r3, [pc, #72]	; (800abc8 <__ulp+0x4c>)
 800ab7e:	ee10 2a90 	vmov	r2, s1
 800ab82:	401a      	ands	r2, r3
 800ab84:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	dd04      	ble.n	800ab96 <__ulp+0x1a>
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	4619      	mov	r1, r3
 800ab90:	ec41 0b10 	vmov	d0, r0, r1
 800ab94:	4770      	bx	lr
 800ab96:	425b      	negs	r3, r3
 800ab98:	151b      	asrs	r3, r3, #20
 800ab9a:	2b13      	cmp	r3, #19
 800ab9c:	f04f 0000 	mov.w	r0, #0
 800aba0:	f04f 0100 	mov.w	r1, #0
 800aba4:	dc04      	bgt.n	800abb0 <__ulp+0x34>
 800aba6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800abaa:	fa42 f103 	asr.w	r1, r2, r3
 800abae:	e7ef      	b.n	800ab90 <__ulp+0x14>
 800abb0:	3b14      	subs	r3, #20
 800abb2:	2b1e      	cmp	r3, #30
 800abb4:	f04f 0201 	mov.w	r2, #1
 800abb8:	bfda      	itte	le
 800abba:	f1c3 031f 	rsble	r3, r3, #31
 800abbe:	fa02 f303 	lslle.w	r3, r2, r3
 800abc2:	4613      	movgt	r3, r2
 800abc4:	4618      	mov	r0, r3
 800abc6:	e7e3      	b.n	800ab90 <__ulp+0x14>
 800abc8:	7ff00000 	.word	0x7ff00000

0800abcc <__b2d>:
 800abcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abce:	6905      	ldr	r5, [r0, #16]
 800abd0:	f100 0714 	add.w	r7, r0, #20
 800abd4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800abd8:	1f2e      	subs	r6, r5, #4
 800abda:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800abde:	4620      	mov	r0, r4
 800abe0:	f7ff fdc5 	bl	800a76e <__hi0bits>
 800abe4:	f1c0 0320 	rsb	r3, r0, #32
 800abe8:	280a      	cmp	r0, #10
 800abea:	600b      	str	r3, [r1, #0]
 800abec:	f8df c074 	ldr.w	ip, [pc, #116]	; 800ac64 <__b2d+0x98>
 800abf0:	dc14      	bgt.n	800ac1c <__b2d+0x50>
 800abf2:	f1c0 0e0b 	rsb	lr, r0, #11
 800abf6:	fa24 f10e 	lsr.w	r1, r4, lr
 800abfa:	42b7      	cmp	r7, r6
 800abfc:	ea41 030c 	orr.w	r3, r1, ip
 800ac00:	bf34      	ite	cc
 800ac02:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ac06:	2100      	movcs	r1, #0
 800ac08:	3015      	adds	r0, #21
 800ac0a:	fa04 f000 	lsl.w	r0, r4, r0
 800ac0e:	fa21 f10e 	lsr.w	r1, r1, lr
 800ac12:	ea40 0201 	orr.w	r2, r0, r1
 800ac16:	ec43 2b10 	vmov	d0, r2, r3
 800ac1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac1c:	42b7      	cmp	r7, r6
 800ac1e:	bf3a      	itte	cc
 800ac20:	f1a5 0608 	subcc.w	r6, r5, #8
 800ac24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ac28:	2100      	movcs	r1, #0
 800ac2a:	380b      	subs	r0, #11
 800ac2c:	d015      	beq.n	800ac5a <__b2d+0x8e>
 800ac2e:	4084      	lsls	r4, r0
 800ac30:	f1c0 0520 	rsb	r5, r0, #32
 800ac34:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800ac38:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800ac3c:	42be      	cmp	r6, r7
 800ac3e:	fa21 fc05 	lsr.w	ip, r1, r5
 800ac42:	ea44 030c 	orr.w	r3, r4, ip
 800ac46:	bf8c      	ite	hi
 800ac48:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ac4c:	2400      	movls	r4, #0
 800ac4e:	fa01 f000 	lsl.w	r0, r1, r0
 800ac52:	40ec      	lsrs	r4, r5
 800ac54:	ea40 0204 	orr.w	r2, r0, r4
 800ac58:	e7dd      	b.n	800ac16 <__b2d+0x4a>
 800ac5a:	ea44 030c 	orr.w	r3, r4, ip
 800ac5e:	460a      	mov	r2, r1
 800ac60:	e7d9      	b.n	800ac16 <__b2d+0x4a>
 800ac62:	bf00      	nop
 800ac64:	3ff00000 	.word	0x3ff00000

0800ac68 <__d2b>:
 800ac68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac6c:	460e      	mov	r6, r1
 800ac6e:	2101      	movs	r1, #1
 800ac70:	ec59 8b10 	vmov	r8, r9, d0
 800ac74:	4615      	mov	r5, r2
 800ac76:	f7ff fcb6 	bl	800a5e6 <_Balloc>
 800ac7a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ac7e:	4607      	mov	r7, r0
 800ac80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac84:	bb34      	cbnz	r4, 800acd4 <__d2b+0x6c>
 800ac86:	9301      	str	r3, [sp, #4]
 800ac88:	f1b8 0300 	subs.w	r3, r8, #0
 800ac8c:	d027      	beq.n	800acde <__d2b+0x76>
 800ac8e:	a802      	add	r0, sp, #8
 800ac90:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ac94:	f7ff fd8a 	bl	800a7ac <__lo0bits>
 800ac98:	9900      	ldr	r1, [sp, #0]
 800ac9a:	b1f0      	cbz	r0, 800acda <__d2b+0x72>
 800ac9c:	9a01      	ldr	r2, [sp, #4]
 800ac9e:	f1c0 0320 	rsb	r3, r0, #32
 800aca2:	fa02 f303 	lsl.w	r3, r2, r3
 800aca6:	430b      	orrs	r3, r1
 800aca8:	40c2      	lsrs	r2, r0
 800acaa:	617b      	str	r3, [r7, #20]
 800acac:	9201      	str	r2, [sp, #4]
 800acae:	9b01      	ldr	r3, [sp, #4]
 800acb0:	61bb      	str	r3, [r7, #24]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	bf14      	ite	ne
 800acb6:	2102      	movne	r1, #2
 800acb8:	2101      	moveq	r1, #1
 800acba:	6139      	str	r1, [r7, #16]
 800acbc:	b1c4      	cbz	r4, 800acf0 <__d2b+0x88>
 800acbe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800acc2:	4404      	add	r4, r0
 800acc4:	6034      	str	r4, [r6, #0]
 800acc6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800acca:	6028      	str	r0, [r5, #0]
 800accc:	4638      	mov	r0, r7
 800acce:	b003      	add	sp, #12
 800acd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acd8:	e7d5      	b.n	800ac86 <__d2b+0x1e>
 800acda:	6179      	str	r1, [r7, #20]
 800acdc:	e7e7      	b.n	800acae <__d2b+0x46>
 800acde:	a801      	add	r0, sp, #4
 800ace0:	f7ff fd64 	bl	800a7ac <__lo0bits>
 800ace4:	9b01      	ldr	r3, [sp, #4]
 800ace6:	617b      	str	r3, [r7, #20]
 800ace8:	2101      	movs	r1, #1
 800acea:	6139      	str	r1, [r7, #16]
 800acec:	3020      	adds	r0, #32
 800acee:	e7e5      	b.n	800acbc <__d2b+0x54>
 800acf0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800acf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800acf8:	6030      	str	r0, [r6, #0]
 800acfa:	6918      	ldr	r0, [r3, #16]
 800acfc:	f7ff fd37 	bl	800a76e <__hi0bits>
 800ad00:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ad04:	e7e1      	b.n	800acca <__d2b+0x62>

0800ad06 <__ratio>:
 800ad06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad0a:	4688      	mov	r8, r1
 800ad0c:	4669      	mov	r1, sp
 800ad0e:	4681      	mov	r9, r0
 800ad10:	f7ff ff5c 	bl	800abcc <__b2d>
 800ad14:	a901      	add	r1, sp, #4
 800ad16:	4640      	mov	r0, r8
 800ad18:	ec57 6b10 	vmov	r6, r7, d0
 800ad1c:	f7ff ff56 	bl	800abcc <__b2d>
 800ad20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad24:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ad28:	eba3 0c02 	sub.w	ip, r3, r2
 800ad2c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ad30:	1a9b      	subs	r3, r3, r2
 800ad32:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ad36:	ec5b ab10 	vmov	sl, fp, d0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	bfce      	itee	gt
 800ad3e:	463a      	movgt	r2, r7
 800ad40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ad44:	465a      	movle	r2, fp
 800ad46:	4659      	mov	r1, fp
 800ad48:	463d      	mov	r5, r7
 800ad4a:	bfd4      	ite	le
 800ad4c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800ad50:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800ad54:	4630      	mov	r0, r6
 800ad56:	ee10 2a10 	vmov	r2, s0
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	f7f5 fd95 	bl	800088c <__aeabi_ddiv>
 800ad62:	ec41 0b10 	vmov	d0, r0, r1
 800ad66:	b003      	add	sp, #12
 800ad68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad6c <__copybits>:
 800ad6c:	3901      	subs	r1, #1
 800ad6e:	b510      	push	{r4, lr}
 800ad70:	1149      	asrs	r1, r1, #5
 800ad72:	6914      	ldr	r4, [r2, #16]
 800ad74:	3101      	adds	r1, #1
 800ad76:	f102 0314 	add.w	r3, r2, #20
 800ad7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ad7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ad82:	42a3      	cmp	r3, r4
 800ad84:	4602      	mov	r2, r0
 800ad86:	d303      	bcc.n	800ad90 <__copybits+0x24>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	428a      	cmp	r2, r1
 800ad8c:	d305      	bcc.n	800ad9a <__copybits+0x2e>
 800ad8e:	bd10      	pop	{r4, pc}
 800ad90:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad94:	f840 2b04 	str.w	r2, [r0], #4
 800ad98:	e7f3      	b.n	800ad82 <__copybits+0x16>
 800ad9a:	f842 3b04 	str.w	r3, [r2], #4
 800ad9e:	e7f4      	b.n	800ad8a <__copybits+0x1e>

0800ada0 <__any_on>:
 800ada0:	f100 0214 	add.w	r2, r0, #20
 800ada4:	6900      	ldr	r0, [r0, #16]
 800ada6:	114b      	asrs	r3, r1, #5
 800ada8:	4298      	cmp	r0, r3
 800adaa:	b510      	push	{r4, lr}
 800adac:	db11      	blt.n	800add2 <__any_on+0x32>
 800adae:	dd0a      	ble.n	800adc6 <__any_on+0x26>
 800adb0:	f011 011f 	ands.w	r1, r1, #31
 800adb4:	d007      	beq.n	800adc6 <__any_on+0x26>
 800adb6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800adba:	fa24 f001 	lsr.w	r0, r4, r1
 800adbe:	fa00 f101 	lsl.w	r1, r0, r1
 800adc2:	428c      	cmp	r4, r1
 800adc4:	d10b      	bne.n	800adde <__any_on+0x3e>
 800adc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800adca:	4293      	cmp	r3, r2
 800adcc:	d803      	bhi.n	800add6 <__any_on+0x36>
 800adce:	2000      	movs	r0, #0
 800add0:	bd10      	pop	{r4, pc}
 800add2:	4603      	mov	r3, r0
 800add4:	e7f7      	b.n	800adc6 <__any_on+0x26>
 800add6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800adda:	2900      	cmp	r1, #0
 800addc:	d0f5      	beq.n	800adca <__any_on+0x2a>
 800adde:	2001      	movs	r0, #1
 800ade0:	e7f6      	b.n	800add0 <__any_on+0x30>

0800ade2 <_calloc_r>:
 800ade2:	b538      	push	{r3, r4, r5, lr}
 800ade4:	fb02 f401 	mul.w	r4, r2, r1
 800ade8:	4621      	mov	r1, r4
 800adea:	f000 f857 	bl	800ae9c <_malloc_r>
 800adee:	4605      	mov	r5, r0
 800adf0:	b118      	cbz	r0, 800adfa <_calloc_r+0x18>
 800adf2:	4622      	mov	r2, r4
 800adf4:	2100      	movs	r1, #0
 800adf6:	f7fc fd21 	bl	800783c <memset>
 800adfa:	4628      	mov	r0, r5
 800adfc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ae00 <_free_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	4605      	mov	r5, r0
 800ae04:	2900      	cmp	r1, #0
 800ae06:	d045      	beq.n	800ae94 <_free_r+0x94>
 800ae08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae0c:	1f0c      	subs	r4, r1, #4
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	bfb8      	it	lt
 800ae12:	18e4      	addlt	r4, r4, r3
 800ae14:	f000 fa36 	bl	800b284 <__malloc_lock>
 800ae18:	4a1f      	ldr	r2, [pc, #124]	; (800ae98 <_free_r+0x98>)
 800ae1a:	6813      	ldr	r3, [r2, #0]
 800ae1c:	4610      	mov	r0, r2
 800ae1e:	b933      	cbnz	r3, 800ae2e <_free_r+0x2e>
 800ae20:	6063      	str	r3, [r4, #4]
 800ae22:	6014      	str	r4, [r2, #0]
 800ae24:	4628      	mov	r0, r5
 800ae26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae2a:	f000 ba2c 	b.w	800b286 <__malloc_unlock>
 800ae2e:	42a3      	cmp	r3, r4
 800ae30:	d90c      	bls.n	800ae4c <_free_r+0x4c>
 800ae32:	6821      	ldr	r1, [r4, #0]
 800ae34:	1862      	adds	r2, r4, r1
 800ae36:	4293      	cmp	r3, r2
 800ae38:	bf04      	itt	eq
 800ae3a:	681a      	ldreq	r2, [r3, #0]
 800ae3c:	685b      	ldreq	r3, [r3, #4]
 800ae3e:	6063      	str	r3, [r4, #4]
 800ae40:	bf04      	itt	eq
 800ae42:	1852      	addeq	r2, r2, r1
 800ae44:	6022      	streq	r2, [r4, #0]
 800ae46:	6004      	str	r4, [r0, #0]
 800ae48:	e7ec      	b.n	800ae24 <_free_r+0x24>
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	685a      	ldr	r2, [r3, #4]
 800ae4e:	b10a      	cbz	r2, 800ae54 <_free_r+0x54>
 800ae50:	42a2      	cmp	r2, r4
 800ae52:	d9fa      	bls.n	800ae4a <_free_r+0x4a>
 800ae54:	6819      	ldr	r1, [r3, #0]
 800ae56:	1858      	adds	r0, r3, r1
 800ae58:	42a0      	cmp	r0, r4
 800ae5a:	d10b      	bne.n	800ae74 <_free_r+0x74>
 800ae5c:	6820      	ldr	r0, [r4, #0]
 800ae5e:	4401      	add	r1, r0
 800ae60:	1858      	adds	r0, r3, r1
 800ae62:	4282      	cmp	r2, r0
 800ae64:	6019      	str	r1, [r3, #0]
 800ae66:	d1dd      	bne.n	800ae24 <_free_r+0x24>
 800ae68:	6810      	ldr	r0, [r2, #0]
 800ae6a:	6852      	ldr	r2, [r2, #4]
 800ae6c:	605a      	str	r2, [r3, #4]
 800ae6e:	4401      	add	r1, r0
 800ae70:	6019      	str	r1, [r3, #0]
 800ae72:	e7d7      	b.n	800ae24 <_free_r+0x24>
 800ae74:	d902      	bls.n	800ae7c <_free_r+0x7c>
 800ae76:	230c      	movs	r3, #12
 800ae78:	602b      	str	r3, [r5, #0]
 800ae7a:	e7d3      	b.n	800ae24 <_free_r+0x24>
 800ae7c:	6820      	ldr	r0, [r4, #0]
 800ae7e:	1821      	adds	r1, r4, r0
 800ae80:	428a      	cmp	r2, r1
 800ae82:	bf04      	itt	eq
 800ae84:	6811      	ldreq	r1, [r2, #0]
 800ae86:	6852      	ldreq	r2, [r2, #4]
 800ae88:	6062      	str	r2, [r4, #4]
 800ae8a:	bf04      	itt	eq
 800ae8c:	1809      	addeq	r1, r1, r0
 800ae8e:	6021      	streq	r1, [r4, #0]
 800ae90:	605c      	str	r4, [r3, #4]
 800ae92:	e7c7      	b.n	800ae24 <_free_r+0x24>
 800ae94:	bd38      	pop	{r3, r4, r5, pc}
 800ae96:	bf00      	nop
 800ae98:	20000208 	.word	0x20000208

0800ae9c <_malloc_r>:
 800ae9c:	b570      	push	{r4, r5, r6, lr}
 800ae9e:	1ccd      	adds	r5, r1, #3
 800aea0:	f025 0503 	bic.w	r5, r5, #3
 800aea4:	3508      	adds	r5, #8
 800aea6:	2d0c      	cmp	r5, #12
 800aea8:	bf38      	it	cc
 800aeaa:	250c      	movcc	r5, #12
 800aeac:	2d00      	cmp	r5, #0
 800aeae:	4606      	mov	r6, r0
 800aeb0:	db01      	blt.n	800aeb6 <_malloc_r+0x1a>
 800aeb2:	42a9      	cmp	r1, r5
 800aeb4:	d903      	bls.n	800aebe <_malloc_r+0x22>
 800aeb6:	230c      	movs	r3, #12
 800aeb8:	6033      	str	r3, [r6, #0]
 800aeba:	2000      	movs	r0, #0
 800aebc:	bd70      	pop	{r4, r5, r6, pc}
 800aebe:	f000 f9e1 	bl	800b284 <__malloc_lock>
 800aec2:	4a21      	ldr	r2, [pc, #132]	; (800af48 <_malloc_r+0xac>)
 800aec4:	6814      	ldr	r4, [r2, #0]
 800aec6:	4621      	mov	r1, r4
 800aec8:	b991      	cbnz	r1, 800aef0 <_malloc_r+0x54>
 800aeca:	4c20      	ldr	r4, [pc, #128]	; (800af4c <_malloc_r+0xb0>)
 800aecc:	6823      	ldr	r3, [r4, #0]
 800aece:	b91b      	cbnz	r3, 800aed8 <_malloc_r+0x3c>
 800aed0:	4630      	mov	r0, r6
 800aed2:	f000 f98f 	bl	800b1f4 <_sbrk_r>
 800aed6:	6020      	str	r0, [r4, #0]
 800aed8:	4629      	mov	r1, r5
 800aeda:	4630      	mov	r0, r6
 800aedc:	f000 f98a 	bl	800b1f4 <_sbrk_r>
 800aee0:	1c43      	adds	r3, r0, #1
 800aee2:	d124      	bne.n	800af2e <_malloc_r+0x92>
 800aee4:	230c      	movs	r3, #12
 800aee6:	6033      	str	r3, [r6, #0]
 800aee8:	4630      	mov	r0, r6
 800aeea:	f000 f9cc 	bl	800b286 <__malloc_unlock>
 800aeee:	e7e4      	b.n	800aeba <_malloc_r+0x1e>
 800aef0:	680b      	ldr	r3, [r1, #0]
 800aef2:	1b5b      	subs	r3, r3, r5
 800aef4:	d418      	bmi.n	800af28 <_malloc_r+0x8c>
 800aef6:	2b0b      	cmp	r3, #11
 800aef8:	d90f      	bls.n	800af1a <_malloc_r+0x7e>
 800aefa:	600b      	str	r3, [r1, #0]
 800aefc:	50cd      	str	r5, [r1, r3]
 800aefe:	18cc      	adds	r4, r1, r3
 800af00:	4630      	mov	r0, r6
 800af02:	f000 f9c0 	bl	800b286 <__malloc_unlock>
 800af06:	f104 000b 	add.w	r0, r4, #11
 800af0a:	1d23      	adds	r3, r4, #4
 800af0c:	f020 0007 	bic.w	r0, r0, #7
 800af10:	1ac3      	subs	r3, r0, r3
 800af12:	d0d3      	beq.n	800aebc <_malloc_r+0x20>
 800af14:	425a      	negs	r2, r3
 800af16:	50e2      	str	r2, [r4, r3]
 800af18:	e7d0      	b.n	800aebc <_malloc_r+0x20>
 800af1a:	428c      	cmp	r4, r1
 800af1c:	684b      	ldr	r3, [r1, #4]
 800af1e:	bf16      	itet	ne
 800af20:	6063      	strne	r3, [r4, #4]
 800af22:	6013      	streq	r3, [r2, #0]
 800af24:	460c      	movne	r4, r1
 800af26:	e7eb      	b.n	800af00 <_malloc_r+0x64>
 800af28:	460c      	mov	r4, r1
 800af2a:	6849      	ldr	r1, [r1, #4]
 800af2c:	e7cc      	b.n	800aec8 <_malloc_r+0x2c>
 800af2e:	1cc4      	adds	r4, r0, #3
 800af30:	f024 0403 	bic.w	r4, r4, #3
 800af34:	42a0      	cmp	r0, r4
 800af36:	d005      	beq.n	800af44 <_malloc_r+0xa8>
 800af38:	1a21      	subs	r1, r4, r0
 800af3a:	4630      	mov	r0, r6
 800af3c:	f000 f95a 	bl	800b1f4 <_sbrk_r>
 800af40:	3001      	adds	r0, #1
 800af42:	d0cf      	beq.n	800aee4 <_malloc_r+0x48>
 800af44:	6025      	str	r5, [r4, #0]
 800af46:	e7db      	b.n	800af00 <_malloc_r+0x64>
 800af48:	20000208 	.word	0x20000208
 800af4c:	2000020c 	.word	0x2000020c

0800af50 <__ssputs_r>:
 800af50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af54:	688e      	ldr	r6, [r1, #8]
 800af56:	429e      	cmp	r6, r3
 800af58:	4682      	mov	sl, r0
 800af5a:	460c      	mov	r4, r1
 800af5c:	4690      	mov	r8, r2
 800af5e:	4699      	mov	r9, r3
 800af60:	d837      	bhi.n	800afd2 <__ssputs_r+0x82>
 800af62:	898a      	ldrh	r2, [r1, #12]
 800af64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af68:	d031      	beq.n	800afce <__ssputs_r+0x7e>
 800af6a:	6825      	ldr	r5, [r4, #0]
 800af6c:	6909      	ldr	r1, [r1, #16]
 800af6e:	1a6f      	subs	r7, r5, r1
 800af70:	6965      	ldr	r5, [r4, #20]
 800af72:	2302      	movs	r3, #2
 800af74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af78:	fb95 f5f3 	sdiv	r5, r5, r3
 800af7c:	f109 0301 	add.w	r3, r9, #1
 800af80:	443b      	add	r3, r7
 800af82:	429d      	cmp	r5, r3
 800af84:	bf38      	it	cc
 800af86:	461d      	movcc	r5, r3
 800af88:	0553      	lsls	r3, r2, #21
 800af8a:	d530      	bpl.n	800afee <__ssputs_r+0x9e>
 800af8c:	4629      	mov	r1, r5
 800af8e:	f7ff ff85 	bl	800ae9c <_malloc_r>
 800af92:	4606      	mov	r6, r0
 800af94:	b950      	cbnz	r0, 800afac <__ssputs_r+0x5c>
 800af96:	230c      	movs	r3, #12
 800af98:	f8ca 3000 	str.w	r3, [sl]
 800af9c:	89a3      	ldrh	r3, [r4, #12]
 800af9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afa2:	81a3      	strh	r3, [r4, #12]
 800afa4:	f04f 30ff 	mov.w	r0, #4294967295
 800afa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afac:	463a      	mov	r2, r7
 800afae:	6921      	ldr	r1, [r4, #16]
 800afb0:	f7ff fb0e 	bl	800a5d0 <memcpy>
 800afb4:	89a3      	ldrh	r3, [r4, #12]
 800afb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800afba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afbe:	81a3      	strh	r3, [r4, #12]
 800afc0:	6126      	str	r6, [r4, #16]
 800afc2:	6165      	str	r5, [r4, #20]
 800afc4:	443e      	add	r6, r7
 800afc6:	1bed      	subs	r5, r5, r7
 800afc8:	6026      	str	r6, [r4, #0]
 800afca:	60a5      	str	r5, [r4, #8]
 800afcc:	464e      	mov	r6, r9
 800afce:	454e      	cmp	r6, r9
 800afd0:	d900      	bls.n	800afd4 <__ssputs_r+0x84>
 800afd2:	464e      	mov	r6, r9
 800afd4:	4632      	mov	r2, r6
 800afd6:	4641      	mov	r1, r8
 800afd8:	6820      	ldr	r0, [r4, #0]
 800afda:	f000 f93a 	bl	800b252 <memmove>
 800afde:	68a3      	ldr	r3, [r4, #8]
 800afe0:	1b9b      	subs	r3, r3, r6
 800afe2:	60a3      	str	r3, [r4, #8]
 800afe4:	6823      	ldr	r3, [r4, #0]
 800afe6:	441e      	add	r6, r3
 800afe8:	6026      	str	r6, [r4, #0]
 800afea:	2000      	movs	r0, #0
 800afec:	e7dc      	b.n	800afa8 <__ssputs_r+0x58>
 800afee:	462a      	mov	r2, r5
 800aff0:	f000 f94a 	bl	800b288 <_realloc_r>
 800aff4:	4606      	mov	r6, r0
 800aff6:	2800      	cmp	r0, #0
 800aff8:	d1e2      	bne.n	800afc0 <__ssputs_r+0x70>
 800affa:	6921      	ldr	r1, [r4, #16]
 800affc:	4650      	mov	r0, sl
 800affe:	f7ff feff 	bl	800ae00 <_free_r>
 800b002:	e7c8      	b.n	800af96 <__ssputs_r+0x46>

0800b004 <_svfiprintf_r>:
 800b004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b008:	461d      	mov	r5, r3
 800b00a:	898b      	ldrh	r3, [r1, #12]
 800b00c:	061f      	lsls	r7, r3, #24
 800b00e:	b09d      	sub	sp, #116	; 0x74
 800b010:	4680      	mov	r8, r0
 800b012:	460c      	mov	r4, r1
 800b014:	4616      	mov	r6, r2
 800b016:	d50f      	bpl.n	800b038 <_svfiprintf_r+0x34>
 800b018:	690b      	ldr	r3, [r1, #16]
 800b01a:	b96b      	cbnz	r3, 800b038 <_svfiprintf_r+0x34>
 800b01c:	2140      	movs	r1, #64	; 0x40
 800b01e:	f7ff ff3d 	bl	800ae9c <_malloc_r>
 800b022:	6020      	str	r0, [r4, #0]
 800b024:	6120      	str	r0, [r4, #16]
 800b026:	b928      	cbnz	r0, 800b034 <_svfiprintf_r+0x30>
 800b028:	230c      	movs	r3, #12
 800b02a:	f8c8 3000 	str.w	r3, [r8]
 800b02e:	f04f 30ff 	mov.w	r0, #4294967295
 800b032:	e0c8      	b.n	800b1c6 <_svfiprintf_r+0x1c2>
 800b034:	2340      	movs	r3, #64	; 0x40
 800b036:	6163      	str	r3, [r4, #20]
 800b038:	2300      	movs	r3, #0
 800b03a:	9309      	str	r3, [sp, #36]	; 0x24
 800b03c:	2320      	movs	r3, #32
 800b03e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b042:	2330      	movs	r3, #48	; 0x30
 800b044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b048:	9503      	str	r5, [sp, #12]
 800b04a:	f04f 0b01 	mov.w	fp, #1
 800b04e:	4637      	mov	r7, r6
 800b050:	463d      	mov	r5, r7
 800b052:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b056:	b10b      	cbz	r3, 800b05c <_svfiprintf_r+0x58>
 800b058:	2b25      	cmp	r3, #37	; 0x25
 800b05a:	d13e      	bne.n	800b0da <_svfiprintf_r+0xd6>
 800b05c:	ebb7 0a06 	subs.w	sl, r7, r6
 800b060:	d00b      	beq.n	800b07a <_svfiprintf_r+0x76>
 800b062:	4653      	mov	r3, sl
 800b064:	4632      	mov	r2, r6
 800b066:	4621      	mov	r1, r4
 800b068:	4640      	mov	r0, r8
 800b06a:	f7ff ff71 	bl	800af50 <__ssputs_r>
 800b06e:	3001      	adds	r0, #1
 800b070:	f000 80a4 	beq.w	800b1bc <_svfiprintf_r+0x1b8>
 800b074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b076:	4453      	add	r3, sl
 800b078:	9309      	str	r3, [sp, #36]	; 0x24
 800b07a:	783b      	ldrb	r3, [r7, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 809d 	beq.w	800b1bc <_svfiprintf_r+0x1b8>
 800b082:	2300      	movs	r3, #0
 800b084:	f04f 32ff 	mov.w	r2, #4294967295
 800b088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b08c:	9304      	str	r3, [sp, #16]
 800b08e:	9307      	str	r3, [sp, #28]
 800b090:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b094:	931a      	str	r3, [sp, #104]	; 0x68
 800b096:	462f      	mov	r7, r5
 800b098:	2205      	movs	r2, #5
 800b09a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b09e:	4850      	ldr	r0, [pc, #320]	; (800b1e0 <_svfiprintf_r+0x1dc>)
 800b0a0:	f7f5 f8be 	bl	8000220 <memchr>
 800b0a4:	9b04      	ldr	r3, [sp, #16]
 800b0a6:	b9d0      	cbnz	r0, 800b0de <_svfiprintf_r+0xda>
 800b0a8:	06d9      	lsls	r1, r3, #27
 800b0aa:	bf44      	itt	mi
 800b0ac:	2220      	movmi	r2, #32
 800b0ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b0b2:	071a      	lsls	r2, r3, #28
 800b0b4:	bf44      	itt	mi
 800b0b6:	222b      	movmi	r2, #43	; 0x2b
 800b0b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b0bc:	782a      	ldrb	r2, [r5, #0]
 800b0be:	2a2a      	cmp	r2, #42	; 0x2a
 800b0c0:	d015      	beq.n	800b0ee <_svfiprintf_r+0xea>
 800b0c2:	9a07      	ldr	r2, [sp, #28]
 800b0c4:	462f      	mov	r7, r5
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	250a      	movs	r5, #10
 800b0ca:	4639      	mov	r1, r7
 800b0cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0d0:	3b30      	subs	r3, #48	; 0x30
 800b0d2:	2b09      	cmp	r3, #9
 800b0d4:	d94d      	bls.n	800b172 <_svfiprintf_r+0x16e>
 800b0d6:	b1b8      	cbz	r0, 800b108 <_svfiprintf_r+0x104>
 800b0d8:	e00f      	b.n	800b0fa <_svfiprintf_r+0xf6>
 800b0da:	462f      	mov	r7, r5
 800b0dc:	e7b8      	b.n	800b050 <_svfiprintf_r+0x4c>
 800b0de:	4a40      	ldr	r2, [pc, #256]	; (800b1e0 <_svfiprintf_r+0x1dc>)
 800b0e0:	1a80      	subs	r0, r0, r2
 800b0e2:	fa0b f000 	lsl.w	r0, fp, r0
 800b0e6:	4318      	orrs	r0, r3
 800b0e8:	9004      	str	r0, [sp, #16]
 800b0ea:	463d      	mov	r5, r7
 800b0ec:	e7d3      	b.n	800b096 <_svfiprintf_r+0x92>
 800b0ee:	9a03      	ldr	r2, [sp, #12]
 800b0f0:	1d11      	adds	r1, r2, #4
 800b0f2:	6812      	ldr	r2, [r2, #0]
 800b0f4:	9103      	str	r1, [sp, #12]
 800b0f6:	2a00      	cmp	r2, #0
 800b0f8:	db01      	blt.n	800b0fe <_svfiprintf_r+0xfa>
 800b0fa:	9207      	str	r2, [sp, #28]
 800b0fc:	e004      	b.n	800b108 <_svfiprintf_r+0x104>
 800b0fe:	4252      	negs	r2, r2
 800b100:	f043 0302 	orr.w	r3, r3, #2
 800b104:	9207      	str	r2, [sp, #28]
 800b106:	9304      	str	r3, [sp, #16]
 800b108:	783b      	ldrb	r3, [r7, #0]
 800b10a:	2b2e      	cmp	r3, #46	; 0x2e
 800b10c:	d10c      	bne.n	800b128 <_svfiprintf_r+0x124>
 800b10e:	787b      	ldrb	r3, [r7, #1]
 800b110:	2b2a      	cmp	r3, #42	; 0x2a
 800b112:	d133      	bne.n	800b17c <_svfiprintf_r+0x178>
 800b114:	9b03      	ldr	r3, [sp, #12]
 800b116:	1d1a      	adds	r2, r3, #4
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	9203      	str	r2, [sp, #12]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	bfb8      	it	lt
 800b120:	f04f 33ff 	movlt.w	r3, #4294967295
 800b124:	3702      	adds	r7, #2
 800b126:	9305      	str	r3, [sp, #20]
 800b128:	4d2e      	ldr	r5, [pc, #184]	; (800b1e4 <_svfiprintf_r+0x1e0>)
 800b12a:	7839      	ldrb	r1, [r7, #0]
 800b12c:	2203      	movs	r2, #3
 800b12e:	4628      	mov	r0, r5
 800b130:	f7f5 f876 	bl	8000220 <memchr>
 800b134:	b138      	cbz	r0, 800b146 <_svfiprintf_r+0x142>
 800b136:	2340      	movs	r3, #64	; 0x40
 800b138:	1b40      	subs	r0, r0, r5
 800b13a:	fa03 f000 	lsl.w	r0, r3, r0
 800b13e:	9b04      	ldr	r3, [sp, #16]
 800b140:	4303      	orrs	r3, r0
 800b142:	3701      	adds	r7, #1
 800b144:	9304      	str	r3, [sp, #16]
 800b146:	7839      	ldrb	r1, [r7, #0]
 800b148:	4827      	ldr	r0, [pc, #156]	; (800b1e8 <_svfiprintf_r+0x1e4>)
 800b14a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b14e:	2206      	movs	r2, #6
 800b150:	1c7e      	adds	r6, r7, #1
 800b152:	f7f5 f865 	bl	8000220 <memchr>
 800b156:	2800      	cmp	r0, #0
 800b158:	d038      	beq.n	800b1cc <_svfiprintf_r+0x1c8>
 800b15a:	4b24      	ldr	r3, [pc, #144]	; (800b1ec <_svfiprintf_r+0x1e8>)
 800b15c:	bb13      	cbnz	r3, 800b1a4 <_svfiprintf_r+0x1a0>
 800b15e:	9b03      	ldr	r3, [sp, #12]
 800b160:	3307      	adds	r3, #7
 800b162:	f023 0307 	bic.w	r3, r3, #7
 800b166:	3308      	adds	r3, #8
 800b168:	9303      	str	r3, [sp, #12]
 800b16a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b16c:	444b      	add	r3, r9
 800b16e:	9309      	str	r3, [sp, #36]	; 0x24
 800b170:	e76d      	b.n	800b04e <_svfiprintf_r+0x4a>
 800b172:	fb05 3202 	mla	r2, r5, r2, r3
 800b176:	2001      	movs	r0, #1
 800b178:	460f      	mov	r7, r1
 800b17a:	e7a6      	b.n	800b0ca <_svfiprintf_r+0xc6>
 800b17c:	2300      	movs	r3, #0
 800b17e:	3701      	adds	r7, #1
 800b180:	9305      	str	r3, [sp, #20]
 800b182:	4619      	mov	r1, r3
 800b184:	250a      	movs	r5, #10
 800b186:	4638      	mov	r0, r7
 800b188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b18c:	3a30      	subs	r2, #48	; 0x30
 800b18e:	2a09      	cmp	r2, #9
 800b190:	d903      	bls.n	800b19a <_svfiprintf_r+0x196>
 800b192:	2b00      	cmp	r3, #0
 800b194:	d0c8      	beq.n	800b128 <_svfiprintf_r+0x124>
 800b196:	9105      	str	r1, [sp, #20]
 800b198:	e7c6      	b.n	800b128 <_svfiprintf_r+0x124>
 800b19a:	fb05 2101 	mla	r1, r5, r1, r2
 800b19e:	2301      	movs	r3, #1
 800b1a0:	4607      	mov	r7, r0
 800b1a2:	e7f0      	b.n	800b186 <_svfiprintf_r+0x182>
 800b1a4:	ab03      	add	r3, sp, #12
 800b1a6:	9300      	str	r3, [sp, #0]
 800b1a8:	4622      	mov	r2, r4
 800b1aa:	4b11      	ldr	r3, [pc, #68]	; (800b1f0 <_svfiprintf_r+0x1ec>)
 800b1ac:	a904      	add	r1, sp, #16
 800b1ae:	4640      	mov	r0, r8
 800b1b0:	f7fc fbe0 	bl	8007974 <_printf_float>
 800b1b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b1b8:	4681      	mov	r9, r0
 800b1ba:	d1d6      	bne.n	800b16a <_svfiprintf_r+0x166>
 800b1bc:	89a3      	ldrh	r3, [r4, #12]
 800b1be:	065b      	lsls	r3, r3, #25
 800b1c0:	f53f af35 	bmi.w	800b02e <_svfiprintf_r+0x2a>
 800b1c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1c6:	b01d      	add	sp, #116	; 0x74
 800b1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1cc:	ab03      	add	r3, sp, #12
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	4622      	mov	r2, r4
 800b1d2:	4b07      	ldr	r3, [pc, #28]	; (800b1f0 <_svfiprintf_r+0x1ec>)
 800b1d4:	a904      	add	r1, sp, #16
 800b1d6:	4640      	mov	r0, r8
 800b1d8:	f7fc fe82 	bl	8007ee0 <_printf_i>
 800b1dc:	e7ea      	b.n	800b1b4 <_svfiprintf_r+0x1b0>
 800b1de:	bf00      	nop
 800b1e0:	0800b4dc 	.word	0x0800b4dc
 800b1e4:	0800b4e2 	.word	0x0800b4e2
 800b1e8:	0800b4e6 	.word	0x0800b4e6
 800b1ec:	08007975 	.word	0x08007975
 800b1f0:	0800af51 	.word	0x0800af51

0800b1f4 <_sbrk_r>:
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	4c06      	ldr	r4, [pc, #24]	; (800b210 <_sbrk_r+0x1c>)
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	4605      	mov	r5, r0
 800b1fc:	4608      	mov	r0, r1
 800b1fe:	6023      	str	r3, [r4, #0]
 800b200:	f7fc f8a8 	bl	8007354 <_sbrk>
 800b204:	1c43      	adds	r3, r0, #1
 800b206:	d102      	bne.n	800b20e <_sbrk_r+0x1a>
 800b208:	6823      	ldr	r3, [r4, #0]
 800b20a:	b103      	cbz	r3, 800b20e <_sbrk_r+0x1a>
 800b20c:	602b      	str	r3, [r5, #0]
 800b20e:	bd38      	pop	{r3, r4, r5, pc}
 800b210:	200008e8 	.word	0x200008e8

0800b214 <strncmp>:
 800b214:	b510      	push	{r4, lr}
 800b216:	b16a      	cbz	r2, 800b234 <strncmp+0x20>
 800b218:	3901      	subs	r1, #1
 800b21a:	1884      	adds	r4, r0, r2
 800b21c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b220:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b224:	4293      	cmp	r3, r2
 800b226:	d103      	bne.n	800b230 <strncmp+0x1c>
 800b228:	42a0      	cmp	r0, r4
 800b22a:	d001      	beq.n	800b230 <strncmp+0x1c>
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1f5      	bne.n	800b21c <strncmp+0x8>
 800b230:	1a98      	subs	r0, r3, r2
 800b232:	bd10      	pop	{r4, pc}
 800b234:	4610      	mov	r0, r2
 800b236:	e7fc      	b.n	800b232 <strncmp+0x1e>

0800b238 <__ascii_wctomb>:
 800b238:	b149      	cbz	r1, 800b24e <__ascii_wctomb+0x16>
 800b23a:	2aff      	cmp	r2, #255	; 0xff
 800b23c:	bf85      	ittet	hi
 800b23e:	238a      	movhi	r3, #138	; 0x8a
 800b240:	6003      	strhi	r3, [r0, #0]
 800b242:	700a      	strbls	r2, [r1, #0]
 800b244:	f04f 30ff 	movhi.w	r0, #4294967295
 800b248:	bf98      	it	ls
 800b24a:	2001      	movls	r0, #1
 800b24c:	4770      	bx	lr
 800b24e:	4608      	mov	r0, r1
 800b250:	4770      	bx	lr

0800b252 <memmove>:
 800b252:	4288      	cmp	r0, r1
 800b254:	b510      	push	{r4, lr}
 800b256:	eb01 0302 	add.w	r3, r1, r2
 800b25a:	d807      	bhi.n	800b26c <memmove+0x1a>
 800b25c:	1e42      	subs	r2, r0, #1
 800b25e:	4299      	cmp	r1, r3
 800b260:	d00a      	beq.n	800b278 <memmove+0x26>
 800b262:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b266:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b26a:	e7f8      	b.n	800b25e <memmove+0xc>
 800b26c:	4283      	cmp	r3, r0
 800b26e:	d9f5      	bls.n	800b25c <memmove+0xa>
 800b270:	1881      	adds	r1, r0, r2
 800b272:	1ad2      	subs	r2, r2, r3
 800b274:	42d3      	cmn	r3, r2
 800b276:	d100      	bne.n	800b27a <memmove+0x28>
 800b278:	bd10      	pop	{r4, pc}
 800b27a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b27e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b282:	e7f7      	b.n	800b274 <memmove+0x22>

0800b284 <__malloc_lock>:
 800b284:	4770      	bx	lr

0800b286 <__malloc_unlock>:
 800b286:	4770      	bx	lr

0800b288 <_realloc_r>:
 800b288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b28a:	4607      	mov	r7, r0
 800b28c:	4614      	mov	r4, r2
 800b28e:	460e      	mov	r6, r1
 800b290:	b921      	cbnz	r1, 800b29c <_realloc_r+0x14>
 800b292:	4611      	mov	r1, r2
 800b294:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b298:	f7ff be00 	b.w	800ae9c <_malloc_r>
 800b29c:	b922      	cbnz	r2, 800b2a8 <_realloc_r+0x20>
 800b29e:	f7ff fdaf 	bl	800ae00 <_free_r>
 800b2a2:	4625      	mov	r5, r4
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2a8:	f000 f814 	bl	800b2d4 <_malloc_usable_size_r>
 800b2ac:	42a0      	cmp	r0, r4
 800b2ae:	d20f      	bcs.n	800b2d0 <_realloc_r+0x48>
 800b2b0:	4621      	mov	r1, r4
 800b2b2:	4638      	mov	r0, r7
 800b2b4:	f7ff fdf2 	bl	800ae9c <_malloc_r>
 800b2b8:	4605      	mov	r5, r0
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d0f2      	beq.n	800b2a4 <_realloc_r+0x1c>
 800b2be:	4631      	mov	r1, r6
 800b2c0:	4622      	mov	r2, r4
 800b2c2:	f7ff f985 	bl	800a5d0 <memcpy>
 800b2c6:	4631      	mov	r1, r6
 800b2c8:	4638      	mov	r0, r7
 800b2ca:	f7ff fd99 	bl	800ae00 <_free_r>
 800b2ce:	e7e9      	b.n	800b2a4 <_realloc_r+0x1c>
 800b2d0:	4635      	mov	r5, r6
 800b2d2:	e7e7      	b.n	800b2a4 <_realloc_r+0x1c>

0800b2d4 <_malloc_usable_size_r>:
 800b2d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2d8:	1f18      	subs	r0, r3, #4
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	bfbc      	itt	lt
 800b2de:	580b      	ldrlt	r3, [r1, r0]
 800b2e0:	18c0      	addlt	r0, r0, r3
 800b2e2:	4770      	bx	lr

0800b2e4 <_init>:
 800b2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e6:	bf00      	nop
 800b2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ea:	bc08      	pop	{r3}
 800b2ec:	469e      	mov	lr, r3
 800b2ee:	4770      	bx	lr

0800b2f0 <_fini>:
 800b2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f2:	bf00      	nop
 800b2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2f6:	bc08      	pop	{r3}
 800b2f8:	469e      	mov	lr, r3
 800b2fa:	4770      	bx	lr
